diff --git CMakeLists.txt CMakeLists.txt
index 2f5b93e..fc8161d 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -25,6 +25,27 @@ target_link_libraries(
 
 set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
 
+file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/tmp)
+
+# add_executable(dram-test)
+# target_sources(
+#   dram-test
+#   PRIVATE test.cpp
+# )
+
+# target_link_libraries(
+#   dram-test
+#   PRIVATE llm_system
+# )
+
+# set_target_properties(
+#   dram-test
+#   PROPERTIES
+#   OUTPUT_NAME dram-test
+#   RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+# )
+
+
 configure_file(dram_config_HBM3_80GB.yaml ${EXECUTABLE_OUTPUT_PATH}/dram_config_HBM3_80GB.yaml COPYONLY)
 configure_file(dram_config_HBM3E_192GB.yaml ${EXECUTABLE_OUTPUT_PATH}/dram_config_HBM3E_192GB.yaml COPYONLY)
 configure_file(config.yaml ${EXECUTABLE_OUTPUT_PATH}/config.yaml COPYONLY)
\ No newline at end of file
diff --git config.yaml config.yaml
index 91eb69d..8463392 100644
--- config.yaml
+++ config.yaml
@@ -1,47 +1,37 @@
 model:
-  model_name: deepseekV3
+  model_name: mixtral
 
 system:
-  gpu_gen: B100 # e.g. A100, H100, B100, B200 (currently only support 4 generation)
-  nvlink_gen: 5
-  infiniband_gen: 800
+  gpu_gen: H100
   num_node: 1
-  num_device: 8
+  num_device: 4
   processor_type: GPU
+  offload:
+    collects_gpu_compute: on
+    offload_expert_to_cpu_memory: off
+    offload_expert_to_ssd: off
+    ssd_energy_scale: 1.0
+    offload_bandwidth: 5 # GPU <-> CPU-memory/SSD NVLink-C2C generation 4: NVLink4.0 and 5: NVLink5.0
   distribution:
     expert_tensor_degree: 1
-    none_expert_tensor_degree: 1
+    none_expert_tensor_degree: 4
   optimization:
-    parallel_execution: off
-    hetero_subbatch: off
-    disagg_system: off
-    use_low_unit_moe_only: off
-    use_ramulator: off
-    compressed_kv: on
-    use_absorb: on
-    use_flash_mla: on
-    use_flash_attention: on
-    reuse_kv_cache: on
-    kv_cache_reuse_rate: 0.0
+    compressed_kv: off
+    use_absorb: off
     prefill_mode: off
     decode_mode: on
 
 serving:
-  max_batch_size: 32
+  max_batch_size: 1
   max_process_token: 0
 
 simulation:
   data: synthesis
   input_len: 1024
-  output_len: 10
-  precision_byte: 1
-  iter: 5
+  output_len: 2
+  precision_byte: 2
+  iter: 2
   injection_rate: 0
-  exit_out_of_memory: off
-  mem_cap_limit: off # if memory usage exceed memory capacity, batchsize modifies
 
 log:
-  print_log: on
-  export_gantt: off
-  output_directory: ../data/
-  gantt_directory: ./gantt
\ No newline at end of file
+  output_directory: ./tmp
diff --git eval/CMakeLists.txt eval/CMakeLists.txt
index 0bf62ed..83a6835 100644
--- eval/CMakeLists.txt
+++ eval/CMakeLists.txt
@@ -1,10 +1,92 @@
+add_executable(latency-test latency.cpp)
+add_executable(sub-batch-test sub_batch_test.cpp)
+add_executable(latency-export export_latency_trace.cpp)
+add_executable(stat-export export_stat.cpp)
+add_executable(stat-export-hetero export_stat_hetero.cpp)
+add_executable(ablation_study ablation_study.cpp)
 add_executable(run test.cpp)
+add_executable(edap edap.cpp)
+add_executable(sum_gen_split sum_gen_split.cpp)
+
+target_link_libraries(
+    latency-test
+    PRIVATE llm_system
+)
+
+target_link_libraries(
+    sum_gen_split
+    PRIVATE llm_system
+)
+
+target_link_libraries(
+    sub-batch-test
+    PRIVATE llm_system
+)
+
+target_link_libraries(
+    latency-export
+    PRIVATE llm_system
+)
+
+target_link_libraries(
+    ablation_study
+    PRIVATE llm_system
+)
+
+target_link_libraries(
+    stat-export
+    PRIVATE llm_system
+)
+
+target_link_libraries(
+    stat-export-hetero
+    PRIVATE llm_system
+)
 
 target_link_libraries(
     run
     PRIVATE llm_system
 )
 
+target_link_libraries(
+    edap
+    PRIVATE llm_system
+)
+
+
+set_target_properties(latency-test PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+set_target_properties(sum_gen_split PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+
+set_target_properties(sub-batch-test PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+set_target_properties(latency-export PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+set_target_properties(ablation_study PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+set_target_properties(stat-export PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+set_target_properties(stat-export-hetero PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
 set_target_properties(run PROPERTIES
     RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
 )
+
+set_target_properties(edap PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
\ No newline at end of file
diff --git eval/ablation_study.cpp eval/ablation_study.cpp
new file mode 100644
index 0000000..64519b7
--- /dev/null
+++ eval/ablation_study.cpp
@@ -0,0 +1,163 @@
+#include <algorithm>
+#include <iostream>
+
+#include "hardware/stat.h"
+#include "model/model.h"
+#include "model/util.h"
+#include "module/layer.h"
+#include "module/module_graph.h"
+
+using namespace llm_system;
+
+int main(int argc, char *argv[]) {
+  std::vector<std::string> arg;
+  for (int i = 1; i < argc; i++) {
+    arg.push_back(argv[i]);
+  }
+  // 0: data_name,  1: processor_type, 2: device_num;
+
+  std::string model_name = arg[0];
+  std::string data_name = arg[1];
+  std::string processor_type = arg[2];
+  int num_device = std::stoi(arg[3]);
+  std::string output_path = arg[4];
+  // int max_batch_size = 128;
+  //  int iter = std::stoi(arg[6]);
+  int max_batch_size = std::stoi(arg[5]);
+  int input_len = std::stoi(arg[6]);
+  int output_len = std::stoi(arg[7]);
+  int max_process_token = std::stoi(arg[8]);
+  int request_per_second = std::stoi(arg[9]);
+  int iter = std::stoi(arg[10]);
+  int num_node = std::stoi(arg[11]);
+  int e_tp_dg = std::stoi(arg[12]);
+  int parallel_execution = std::stoi(arg[13]);
+  int hetero_subbatch = std::stoi(arg[14]); 
+
+
+  SystemConfig system_config;
+  system_config.num_node = num_node;
+  system_config.num_device = num_device;
+
+  // system_config.processor_type = {ProcessorType::GPU};
+  system_config.high_processor_type = ProcessorType::GPU;
+  system_config.low_processor_type = ProcessorType::LOGIC;
+
+  system_config.parallel_execution = false;
+  system_config.hetero_subbatch = false;
+  system_config.disagg_system = true;
+  system_config.use_ramulator = true;
+
+  int split = 0;
+  if (!system_config.disagg_system) {
+    split = 1;
+  }
+
+  if (!processor_type.compare("GPU")) {
+    system_config.processor_type = {ProcessorType::GPU};
+  } else if (!processor_type.compare("LOGIC")) {
+    system_config.processor_type = {ProcessorType::LOGIC};
+  } else if (!processor_type.compare("GPU+LOGIC")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+    system_config.logic_op_b = 16;
+    system_config.memory_capacity = 2 * system_config.memory_capacity;
+    system_config.num_logic_cube = 10;
+
+    if (parallel_execution) {
+      system_config.parallel_execution = true;
+    } else {
+      system_config.parallel_execution = false;
+    }
+    if (hetero_subbatch) {
+      system_config.parallel_execution = true;
+      system_config.hetero_subbatch = true;
+    }
+  } else if (!processor_type.compare("GPU+PIM")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::PIM};
+    system_config.parallel_execution = false;
+  } else {
+    fail("Not supported device type");
+  }
+
+  if (request_per_second == 0) {
+    system_config.use_inject_rate = false;
+  } else {
+    system_config.use_inject_rate = true;
+    system_config.request_per_second = request_per_second;
+  }
+
+  std::string expert_file_path;
+
+  ModelConfig model_config;
+
+  if (!model_name.compare("mixtral")) {
+    model_config = mixtral;
+  } else if (!model_name.compare("openMoE")) {
+    model_config = openMoE;
+  } else if (!model_name.compare("llama7bMoE")) {
+    model_config = llama7bMoE;
+  } else if (!model_name.compare("grok1")) {
+    model_config = grok1;
+  } else if (!model_name.compare("glam")) {
+    model_config = glam;
+  } else {
+    fail("Model is not supported");
+  }
+
+  model_config.ne_tp_dg = system_config.num_device;
+  model_config.e_tp_dg = e_tp_dg;
+  model_config.dataset = data_name;
+  // model_config.max_seq_len = 512;
+
+  if (!data_name.compare("synthesis")) {
+    expert_file_path = "none";
+    model_config.input_len = input_len;
+    model_config.output_len = output_len;
+  } else {
+    expert_file_path =
+        "../expert_data/experts_" + model_name + "_" + data_name + ".csv";
+  }
+
+  // long max_batch_size = 128;
+  if (max_process_token == 0) {
+    max_process_token = 8192 * 4;
+  }
+  Scheduler::Ptr scheduler =
+      Scheduler::Create(system_config, model_config, expert_file_path,
+                        max_batch_size, 8192 * 32, max_process_token);
+
+  Cluster::Ptr cluster = Cluster::Create(system_config, scheduler);
+
+  Model model(model_config, cluster, scheduler);
+
+  bool out_of_memory = cluster->checkMemorySize();
+  cluster->set_dependency();
+
+  // std::vector<Stat> stat_list;
+  int total_iter = iter;
+  
+  std::ofstream csv;
+  std::string file_name =
+      output_path + "/" + model_name + "_" + data_name + "_" +
+      std::to_string(input_len) + "_" + std::to_string(output_len) + "_" +
+      processor_type + "_N" + std::to_string(num_node) + "_D" +
+      std::to_string(num_device) + "_maxbatch" +
+      std::to_string(max_batch_size) + "_maxprocess" +
+      std::to_string(max_process_token) + "_injectionrate" +
+      std::to_string(request_per_second) + "_iter" +
+      std::to_string(total_iter) + "_e_tp" + std::to_string(e_tp_dg) +
+      "_parallel_execution" + std::to_string(parallel_execution) + "_split" +
+      std::to_string(split) + "_hetero_subbatch" +
+      std::to_string(hetero_subbatch) + ".csv";
+
+  std::cout << "-----------------------------------" << std::endl;
+  std::cout << "-------------start-----------------" << std::endl;
+  std::cout << "-----------------------------------" << std::endl;
+
+  scheduler->getActualArrivalTime(total_iter);
+  cluster->runIteration(total_iter, file_name);
+
+  // TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
+  // top0->print_timeboard();
+  return 0;
+}
diff --git eval/edap.cpp eval/edap.cpp
new file mode 100644
index 0000000..56ed373
--- /dev/null
+++ eval/edap.cpp
@@ -0,0 +1,191 @@
+#include <algorithm>
+#include <iostream>
+
+#include "dram/dram_interface.h"
+#include "dram/memory_object.h"
+#include "dram/mmap_controller.h"
+#include "dram/power.h"
+#include "hardware/device.h"
+#include "hardware/stat.h"
+#include "module/tensor.h"
+
+using namespace llm_system;
+
+int main(int argc, char *argv[]) {
+  std::vector<std::string> arg;
+  for (int i = 1; i < argc; i++) {
+    arg.push_back(argv[i]);
+  }
+  std::string output_path = arg[0];
+  // std::string output_path = "test";
+
+  // Area overhead //
+  area_um2 dram_die = 106.92 * 1000.0 * 1000.0;
+  area_um2 logic_die = 106.92 * 1000.0 * 1000.0;
+  // area_um2 logic_die = 121.00 * 1000.0 * 1000.0;
+
+  double dram_scale = 46;
+
+  energy_nJ mac_energy = 0.45 / 1000;  // per operation
+  area_um2 fp16_mac_logic = 139.2536;
+  area_um2 fp16_mac_dram = 133.6257 * dram_scale;
+
+  double pitch = 22;  // um
+  area_um2 tsv_area = pitch * pitch * 4096 * 4;
+
+  area_um2 scratch_pad_logic = 702.706;
+  area_um2 scratch_pad_dram = 702.706 * dram_scale;
+
+  area_um2 controller_logic = 613.0;
+  area_um2 controller_dram = 613.0 * dram_scale;
+
+  area_um2 compute_area_per_pe_logic = fp16_mac_logic * 16;
+  area_um2 compute_area_per_pe_dram = fp16_mac_dram * 16;
+
+  int num_pseudo_channel = 32;
+  int num_rank = 2;
+  int num_bankgroup = 4;
+  int num_bank = 4;
+
+  // Area overhead end//
+
+  std::vector<energy_nJ> energy_list;
+  std::vector<time_ns> delay_list;
+  std::vector<area_um2> area_list;
+
+  SystemConfig config;
+  int m = 16384;
+  int k = 4096;
+
+  MemoryConfig memory_config(1);
+
+  Device::Ptr device = Device::Create(config, 0, nullptr);
+  device->mmap_controller = MMapController::Create(memory_config);
+  Tensor::Ptr tensor = Tensor::Create("dummy", {m, k}, "act", device, device->model_config.precision_byte);
+
+  std::vector<int> op_b = {1, 2, 4, 8, 16, 32};
+
+  DRAMInterface::Ptr interface = DRAMInterface::Create("./dram_config.yaml", 1);
+
+  // ALL-BANK PIM, X16 memory bandwidth //
+  energy_nJ energy = 0;
+  interface->setPIMHWConfig(ProcessorType::PIM, 16);
+
+  DRAMRequest::Ptr dram_request = DRAMRequest::Create(DRAMRequestType::kGEMV);
+  dram_request->AddOperand(tensor->getMemoryObject(), PIMOperandType::kSrc);
+
+  double start_time = interface->time;
+  std::list<DRAMRequest::Ptr> request;
+  request.push_back(dram_request);
+  interface->HandleRequest(request, 0);
+  ExecStatus exec_status = interface->getExecStatus();
+
+  energy += exec_status.act_count * pimEnergy.kACT_energy_j_;
+  energy += exec_status.read_count * pimEnergy.kREAD_energy_j_;
+  energy += exec_status.write_count * pimEnergy.kWRITE_energy_j_;
+  energy += exec_status.all_act_count * pimEnergy.kALL_ACT_energy_j_;
+  energy += exec_status.all_read_count * pimEnergy.kALL_READ_energy_j_;
+  energy += exec_status.all_write_count * pimEnergy.kALL_WRITE_energy_j_;
+  energy *= memory_config.num_channel;
+
+  time_ns time = exec_status.memory_duration;
+
+  for (int n : op_b) {
+    energy_list.push_back(energy + 1.0 * m * k * n * mac_energy);
+    delay_list.push_back(time * n);
+    area_list.push_back(
+        (dram_die +
+         ((compute_area_per_pe_dram + controller_dram + scratch_pad_dram * n) *
+          memory_config.num_bankgroup * memory_config.num_bank *
+          memory_config.num_channel / 4)) /
+        dram_die);
+  }
+
+  // ALL-BANKGroup PIM, X4 memory bandwidth, Op/b8 //
+  energy = 0;
+  interface->setPIMHWConfig(ProcessorType::PIM, 4);
+
+  dram_request = DRAMRequest::Create(DRAMRequestType::kGEMV);
+  dram_request->AddOperand(tensor->getMemoryObject(), PIMOperandType::kSrc);
+
+  start_time = interface->time;
+  request.resize(0);
+  request.push_back(dram_request);
+  interface->HandleRequest(request, 0);
+  exec_status = interface->getExecStatus();
+
+  energy += exec_status.act_count * pimBankgroupEnergy.kACT_energy_j_;
+  energy += exec_status.read_count * pimBankgroupEnergy.kREAD_energy_j_;
+  energy += exec_status.write_count * pimBankgroupEnergy.kWRITE_energy_j_;
+  energy += exec_status.all_act_count * pimBankgroupEnergy.kALL_ACT_energy_j_;
+  energy += exec_status.all_read_count * pimBankgroupEnergy.kALL_READ_energy_j_;
+  energy +=
+      exec_status.all_write_count * pimBankgroupEnergy.kALL_WRITE_energy_j_;
+  energy *= memory_config.num_channel;
+
+  time = exec_status.memory_duration;
+
+  for (int n : op_b) {
+    energy_list.push_back(energy + 1.0 * m * k * n * mac_energy);
+    delay_list.push_back(time * std::max(1, n / 8));
+    area_list.push_back((dram_die + (compute_area_per_pe_dram * 8 +
+                                     controller_dram + scratch_pad_dram * n) *
+                                        memory_config.num_bankgroup *
+                                        memory_config.num_channel / 4) /
+                        dram_die);
+  }
+
+  // LOGIC, X4 memory bandwidth //
+  energy = 0;
+  interface->setPIMHWConfig(ProcessorType::LOGIC, 4);
+
+  dram_request = DRAMRequest::Create(DRAMRequestType::kGEMV);
+  dram_request->AddOperand(tensor->getMemoryObject(), PIMOperandType::kSrc);
+
+  start_time = interface->time;
+  request.resize(0);
+  request.push_back(dram_request);
+  interface->HandleRequest(request, 0);
+  exec_status = interface->getExecStatus();
+
+  energy += exec_status.act_count * logicEnergy.kACT_energy_j_;
+  energy += exec_status.read_count * logicEnergy.kREAD_energy_j_;
+  energy += exec_status.write_count * logicEnergy.kWRITE_energy_j_;
+  energy += exec_status.all_act_count * logicEnergy.kALL_ACT_energy_j_;
+  energy += exec_status.all_read_count * logicEnergy.kALL_READ_energy_j_;
+  energy += exec_status.all_write_count * logicEnergy.kALL_WRITE_energy_j_;
+  energy *= memory_config.num_channel;
+
+  time = exec_status.memory_duration;
+
+  for (int n : op_b) {
+    energy_list.push_back(energy + 1.0 * m * k * n * mac_energy);
+    delay_list.push_back(time * std::max(1, n / 8));
+    area_list.push_back((logic_die + tsv_area +
+                         (compute_area_per_pe_logic * 8 + controller_logic +
+                          scratch_pad_logic * n) *
+                             4 * memory_config.num_channel) /
+                        logic_die);
+  }
+
+  std::ofstream csv;
+  std::string file_name = "unit_test.csv";
+
+  csv.open(output_path + "/" + file_name);
+  csv << "device,op_b,energy,delay,area" << std::endl;
+
+  std::vector<std::string> device_list;
+  device_list = {"PIM", "BG", "LOGIC"};
+  int i = 0;
+  for (auto device : device_list) {
+    for (auto opb : op_b) {
+      csv << device << "," << std::to_string(opb) << "," << energy_list[i]
+          << "," << delay_list[i] << "," << area_list[i] << std::endl;
+      i++;
+    }
+  }
+
+  csv.close();
+
+  return 0;
+}
diff --git eval/export_latency_trace.cpp eval/export_latency_trace.cpp
new file mode 100644
index 0000000..af0c0de
--- /dev/null
+++ eval/export_latency_trace.cpp
@@ -0,0 +1,106 @@
+#include <algorithm>
+#include <iostream>
+
+#include "hardware/stat.h"
+#include "model/model.h"
+#include "model/util.h"
+#include "module/layer.h"
+#include "module/module_graph.h"
+
+using namespace llm_system;
+
+int main(int argc, char *argv[]) {
+  std::vector<std::string> arg;
+  for (int i = 1; i < argc; i++) {
+    arg.push_back(argv[i]);
+  }
+  // 0: data_name,  1: processor_type, 2: device_num;
+
+  std::string model_name = arg[0];
+  std::string data_name = arg[1];
+  std::string processor_type = arg[2];
+  int num_device = std::stoi(arg[3]);
+  std::string output_path = arg[4];
+  int iter = std::stoi(arg[5]);
+
+  SystemConfig system_config;
+  system_config.num_node = 1;
+  system_config.num_device = num_device;
+
+  // system_config.processor_type = {ProcessorType::GPU};
+  system_config.high_processor_type = ProcessorType::GPU;
+  system_config.low_processor_type = ProcessorType::LOGIC;
+
+  system_config.parallel_execution = false;
+  system_config.communication_hiding = false;
+  system_config.hetero_subbatch = false;
+
+  system_config.disagg_system = true;
+
+  system_config.use_ramulator = true;
+
+  if (!processor_type.compare("GPU")) {
+    system_config.processor_type = {ProcessorType::GPU};
+  } else if (!processor_type.compare("LOGIC")) {
+    system_config.processor_type = {ProcessorType::LOGIC};
+  } else if (!processor_type.compare("GPU+LOGIC")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+    system_config.parallel_execution = true;
+  }
+
+  std::string expert_file_path =
+      "../expert_data/experts_" + model_name + "_" + data_name + ".csv";
+
+  ModelConfig model_config;
+  model_config.ne_tp_dg = system_config.num_device;
+  model_config.e_tp_dg = system_config.num_device;
+
+  model_config.num_layers = 32;
+  model_config.expert_freq = 4;
+
+  long max_batch_size = 128;
+
+  Scheduler::Ptr scheduler = Scheduler::Create(
+      system_config, model_config, expert_file_path, max_batch_size, 4096);
+
+  Cluster::Ptr cluster = Cluster::Create(system_config, scheduler);
+
+  Model model(model_config, cluster, scheduler);
+
+  cluster->checkMemorySize();
+  cluster->set_dependency();
+
+  std::cout << "-----------------------------------" << std::endl;
+  std::cout << "-------------start-----------------" << std::endl;
+  std::cout << "-----------------------------------" << std::endl;
+
+  std::vector<Stat> stat_list;
+  int total_iter = iter;
+  int p50 = total_iter / 2;
+  int p99 = total_iter * 0.99;
+  int p99dot9 = total_iter * 0.999;
+  stat_list = cluster->runIteration(total_iter);
+
+  TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
+  // TopModuleGraph::Ptr top1 = cluster->get_device(1)->top_module_graph;
+  // top0->print_timeboard();
+  // top1->print_timeboard();
+
+  std::ofstream csv;
+  std::string file_name = model_name + "_" + data_name + "_" + processor_type +
+                          std::to_string(num_device) + "_" +
+                          std::to_string(max_batch_size) + "_iter" +
+                          std::to_string(total_iter) + ".csv";
+  csv.open(output_path + "/" + file_name);
+  csv << "latency,mixed,batchsize,numtoken,seqlen" << std::endl;
+  for (auto temp : stat_list) {
+    csv << std::to_string(temp.latency) << ","
+        << std::to_string(temp.is_mixed) << ","
+        << std::to_string(temp.batchsize) << ","
+        << std::to_string(temp.process_token) << ","
+        << std::to_string(temp.average_seq_len) << std::endl;
+  }
+  csv.close();
+
+  return 0;
+}
diff --git eval/export_stat.cpp eval/export_stat.cpp
new file mode 100644
index 0000000..642c521
--- /dev/null
+++ eval/export_stat.cpp
@@ -0,0 +1,226 @@
+#include <algorithm>
+#include <iostream>
+
+#include "hardware/stat.h"
+#include "model/model.h"
+#include "model/util.h"
+#include "module/layer.h"
+#include "module/module_graph.h"
+
+using namespace llm_system;
+
+int main(int argc, char *argv[]) {
+  std::vector<std::string> arg;
+  for (int i = 1; i < argc; i++) {
+    arg.push_back(argv[i]);
+  }
+  // 0: data_name,  1: processor_type, 2: device_num;
+
+  std::string model_name = arg[0];
+  std::string data_name = arg[1];
+  std::string processor_type = arg[2];
+  int num_device = std::stoi(arg[3]);
+  std::string output_path = arg[4];
+  // int max_batch_size = 128;
+  //  int iter = std::stoi(arg[6]);
+  int max_batch_size = std::stoi(arg[5]);
+  int input_len = std::stoi(arg[6]);
+  int output_len = std::stoi(arg[7]);
+  int max_process_token = std::stoi(arg[8]);
+  int request_per_second = std::stoi(arg[9]);
+  int iter = std::stoi(arg[10]);
+  int num_node = std::stoi(arg[11]);
+  int e_tp_dg = std::stoi(arg[12]);
+  int parallel_execution = std::stoi(arg[13]);
+  int hetero_subbatch = std::stoi(arg[14]); 
+  int is_prefill = std::stoi(arg[15]); 
+
+
+  SystemConfig system_config;
+  system_config.num_node = num_node;
+  system_config.num_device = num_device;
+
+  // system_config.processor_type = {ProcessorType::GPU};
+  system_config.high_processor_type = ProcessorType::GPU;
+  system_config.low_processor_type = ProcessorType::LOGIC;
+
+  system_config.parallel_execution = false;
+  system_config.hetero_subbatch = false;
+  system_config.disagg_system = false;
+
+
+  system_config.use_ramulator = false;
+
+  system_config.use_flash_mla = false;
+  system_config.use_flash_attention = false;
+
+  system_config.reuse_kv_cache = false;
+  system_config.kv_cache_reuse_rate = 0.0;
+
+  if(is_prefill){
+    system_config.prefill_mode = true;
+    system_config.decode_mode = false;
+  }
+  else{
+    system_config.prefill_mode = false;
+    system_config.decode_mode = true;
+  }
+
+  assertTrue((system_config.prefill_mode == false) || (system_config.decode_mode == false), 
+            "prefill mode and decode mode is incompatible");
+  if(system_config.prefill_mode){
+    std::cout << "[Prefill Mode] Output Length is modified into 1" << std::endl;
+  }
+
+  if(system_config.decode_mode){
+    std::cout << "[Decode Mode] Current Length of sequences is modified into input_len" << std::endl;
+  }
+
+  int split = 0;
+  if (!system_config.disagg_system) {
+    split = 1;
+  }
+
+  if (!processor_type.compare("GPU")) {
+    system_config.processor_type = {ProcessorType::GPU};
+  } else if (!processor_type.compare("LOGIC")) {
+    system_config.processor_type = {ProcessorType::LOGIC};
+  } else if (!processor_type.compare("GPU+LOGIC")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+    if (parallel_execution) {
+      system_config.parallel_execution = true;
+    } else {
+      system_config.parallel_execution = false;
+    }
+    if (hetero_subbatch) {
+      system_config.parallel_execution = true;
+      system_config.hetero_subbatch = true;
+    }
+  } else if (!processor_type.compare("GPU+PIM")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::PIM};
+    system_config.parallel_execution = false;
+  } else {
+    fail("Not supported device type");
+  }
+
+  if (request_per_second == 0) {
+    system_config.use_inject_rate = false;
+  } else {
+    system_config.use_inject_rate = true;
+    system_config.request_per_second = request_per_second;
+  }
+
+  std::string expert_file_path;
+
+  ModelConfig model_config;
+
+  if (!model_name.compare("mixtral")) {
+    model_config = mixtral;
+  } else if (!model_name.compare("openMoE")) {
+    model_config = openMoE;
+  } else if (!model_name.compare("llama7bMoE")) {
+    model_config = llama7bMoE;
+  } else if (!model_name.compare("grok1")) {
+    model_config = grok1;
+  } else if (!model_name.compare("glam")) {
+    model_config = glam;
+  } else if (!model_name.compare("deepseekR1")) {
+    model_config = deepseekR1;
+  } else {
+    fail("Model is not supported");
+  }
+
+  model_config.ne_tp_dg = system_config.num_device;
+  model_config.e_tp_dg = e_tp_dg;
+  model_config.dataset = data_name;
+  if(system_config.prefill_mode){
+    model_config.use_absorb = false;
+    model_config.compressed_kv = true;
+    assertTrue(max_batch_size == 1, "For prefill mode, max batch size must be 1");
+  }
+  if(system_config.decode_mode){
+    model_config.use_absorb = true;
+    model_config.compressed_kv = true;
+  }
+  // model_config.max_seq_len = 512;
+
+  if (!data_name.compare("synthesis")) {
+    expert_file_path = "none";
+    model_config.input_len = input_len;
+    model_config.output_len = output_len;
+  } else {
+    expert_file_path =
+        "../expert_data/experts_" + model_name + "_" + data_name + ".csv";
+  }
+
+  // long max_batch_size = 128;
+  if (max_process_token == 0) {
+    max_process_token = 8192 * 4;
+  }
+  Scheduler::Ptr scheduler =
+      Scheduler::Create(system_config, model_config, expert_file_path,
+                        max_batch_size, 8192 * 32, max_process_token);
+
+  Cluster::Ptr cluster = Cluster::Create(system_config, scheduler);
+
+  Model model(model_config, cluster, scheduler);
+
+  bool out_of_memory = cluster->checkMemorySize();
+  cluster->set_dependency();
+
+  // std::vector<Stat> stat_list;
+  int total_iter = iter;
+  
+  std::ofstream csv;
+    std::string file_name;
+  if(system_config.prefill_mode){
+      file_name = output_path + "/" + model_name + "_" + data_name + "_" +
+      std::to_string(input_len) + "_" + std::to_string(output_len) + "_" +
+      processor_type + "_N" + std::to_string(num_node) + "_D" +
+      std::to_string(num_device) + "_maxbatch" +
+      std::to_string(max_batch_size) + "_maxprocess" +
+      std::to_string(max_process_token) + "_injectionrate" +
+      std::to_string(request_per_second) + "_iter" +
+      std::to_string(total_iter) + "_e_tp" + std::to_string(e_tp_dg) +
+      "_parallel_execution" + std::to_string(parallel_execution) + "_split" +
+      std::to_string(split) + "_hetero_subbatch" +
+      std::to_string(hetero_subbatch) + "_prefill.csv";
+
+  }else if(system_config.decode_mode){
+    file_name = output_path + "/" + model_name + "_" + data_name + "_" +
+    std::to_string(input_len) + "_" + std::to_string(output_len) + "_" +
+    processor_type + "_N" + std::to_string(num_node) + "_D" +
+    std::to_string(num_device) + "_maxbatch" +
+    std::to_string(max_batch_size) + "_maxprocess" +
+    std::to_string(max_process_token) + "_injectionrate" +
+    std::to_string(request_per_second) + "_iter" +
+    std::to_string(total_iter) + "_e_tp" + std::to_string(e_tp_dg) +
+    "_parallel_execution" + std::to_string(parallel_execution) + "_split" +
+    std::to_string(split) + "_hetero_subbatch" +
+    std::to_string(hetero_subbatch) + "_decode.csv";
+  }
+  else{
+    file_name = output_path + "/" + model_name + "_" + data_name + "_" +
+    std::to_string(input_len) + "_" + std::to_string(output_len) + "_" +
+    processor_type + "_N" + std::to_string(num_node) + "_D" +
+    std::to_string(num_device) + "_maxbatch" +
+    std::to_string(max_batch_size) + "_maxprocess" +
+    std::to_string(max_process_token) + "_injectionrate" +
+    std::to_string(request_per_second) + "_iter" +
+    std::to_string(total_iter) + "_e_tp" + std::to_string(e_tp_dg) +
+    "_parallel_execution" + std::to_string(parallel_execution) + "_split" +
+    std::to_string(split) + "_hetero_subbatch" +
+    std::to_string(hetero_subbatch) + ".csv";
+  }
+
+  std::cout << "-----------------------------------" << std::endl;
+  std::cout << "-------------start-----------------" << std::endl;
+  std::cout << "-----------------------------------" << std::endl;
+
+  scheduler->getActualArrivalTime(total_iter);
+  cluster->runIteration(total_iter, file_name);
+
+  // TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
+  // top0->print_timeboard();
+  return 0;
+}
diff --git eval/export_stat_hetero.cpp eval/export_stat_hetero.cpp
new file mode 100644
index 0000000..e491063
--- /dev/null
+++ eval/export_stat_hetero.cpp
@@ -0,0 +1,159 @@
+#include <algorithm>
+#include <iostream>
+
+#include "hardware/stat.h"
+#include "model/model.h"
+#include "model/util.h"
+#include "module/layer.h"
+#include "module/module_graph.h"
+
+using namespace llm_system;
+
+int main(int argc, char *argv[]) {
+  std::vector<std::string> arg;
+  for (int i = 1; i < argc; i++) {
+    arg.push_back(argv[i]);
+  }
+  // 0: data_name,  1: processor_type, 2: device_num;
+
+  std::string model_name = arg[0];
+  std::string data_name = arg[1];
+  std::string processor_type = arg[2];
+  int num_device = std::stoi(arg[3]);
+  std::string output_path = arg[4];
+  // int max_batch_size = 128;
+  //  int iter = std::stoi(arg[6]);
+  int max_batch_size = std::stoi(arg[5]);
+  int input_len = std::stoi(arg[6]);
+  int output_len = std::stoi(arg[7]);
+  int max_process_token = std::stoi(arg[8]);
+  int request_per_second = std::stoi(arg[9]);
+  int iter = std::stoi(arg[10]);
+  int num_node = std::stoi(arg[11]);
+  int e_tp_dg = std::stoi(arg[12]);
+  int parallel_execution = std::stoi(arg[13]);
+  int hetero_subbatch = std::stoi(arg[14]); 
+
+
+  SystemConfig system_config;
+  system_config.num_node = num_node;
+  system_config.num_device = num_device;
+
+  // system_config.processor_type = {ProcessorType::GPU};
+  system_config.high_processor_type = ProcessorType::GPU;
+  system_config.low_processor_type = ProcessorType::LOGIC;
+
+  system_config.parallel_execution = false;
+  system_config.hetero_subbatch = false;
+  system_config.disagg_system = true;
+  system_config.use_ramulator = true;
+
+  int split = 0;
+  if (!system_config.disagg_system) {
+    split = 1;
+  }
+
+  if (!processor_type.compare("GPU")) {
+    system_config.processor_type = {ProcessorType::GPU};
+  } else if (!processor_type.compare("LOGIC")) {
+    system_config.processor_type = {ProcessorType::LOGIC};
+  } else if (!processor_type.compare("GPU+LOGIC")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+    if (parallel_execution) {
+      system_config.parallel_execution = true;
+    } else {
+      system_config.parallel_execution = false;
+    }
+    if (hetero_subbatch) {
+      system_config.parallel_execution = true;
+      system_config.hetero_subbatch = true;
+    }
+  } else if (!processor_type.compare("GPU+PIM")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::PIM};
+    system_config.parallel_execution = false;
+  } else {
+    fail("Not supported device type");
+  }
+
+  if (request_per_second == 0) {
+    system_config.use_inject_rate = false;
+  } else {
+    system_config.use_inject_rate = true;
+    system_config.request_per_second = request_per_second;
+  }
+
+  std::string expert_file_path;
+
+  ModelConfig model_config;
+
+  if (!model_name.compare("mixtral")) {
+    model_config = mixtral;
+  } else if (!model_name.compare("openMoE")) {
+    model_config = openMoE;
+  } else if (!model_name.compare("llama7bMoE")) {
+    model_config = llama7bMoE;
+  } else if (!model_name.compare("grok1")) {
+    model_config = grok1;
+  } else if (!model_name.compare("glam")) {
+    model_config = glam;
+  } else {
+    fail("Model is not supported");
+  }
+
+  model_config.ne_tp_dg = system_config.num_device;
+  model_config.e_tp_dg = e_tp_dg;
+  model_config.dataset = data_name;
+  // model_config.max_seq_len = 512;
+
+  if (!data_name.compare("synthesis")) {
+    expert_file_path = "none";
+    model_config.input_len = input_len;
+    model_config.output_len = output_len;
+  } else {
+    expert_file_path =
+        "../expert_data/experts_" + model_name + "_" + data_name + ".csv";
+  }
+
+  // long max_batch_size = 128;
+  if (max_process_token == 0) {
+    max_process_token = 8192 * 4;
+  }
+  Scheduler::Ptr scheduler =
+      Scheduler::Create(system_config, model_config, expert_file_path,
+                        max_batch_size, 8192 * 32, max_process_token);
+
+  Cluster::Ptr cluster = Cluster::Create(system_config, scheduler);
+
+  Model model(model_config, cluster, scheduler);
+
+  bool out_of_memory = cluster->checkHeteroMemorySize();
+  cluster->set_dependency();
+
+  // std::vector<Stat> stat_list;
+  int total_iter = iter;
+  
+  std::ofstream csv;
+  std::string file_name =
+      output_path + "/" + model_name + "_" + data_name + "_" +
+      std::to_string(input_len) + "_" + std::to_string(output_len) + "_" +
+      processor_type + "_N" + std::to_string(num_node) + "_D" +
+      std::to_string(num_device) + "_maxbatch" +
+      std::to_string(max_batch_size) + "_maxprocess" +
+      std::to_string(max_process_token) + "_injectionrate" +
+      std::to_string(request_per_second) + "_iter" +
+      std::to_string(total_iter) + "_e_tp" + std::to_string(e_tp_dg) +
+      "_parallel_execution" + std::to_string(parallel_execution) + "_split" +
+      std::to_string(split) + "_hetero_subbatch" +
+      std::to_string(hetero_subbatch) + ".csv";
+
+  std::cout << "-----------------------------------" << std::endl;
+  std::cout << "-------------start-----------------" << std::endl;
+  std::cout << "-----------------------------------" << std::endl;
+
+  scheduler->getActualArrivalTime(total_iter);
+  cluster->runIteration(total_iter, file_name);
+
+  // TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
+  // top0->print_timeboard();
+  return 0;
+}
diff --git eval/latency.cpp eval/latency.cpp
new file mode 100644
index 0000000..4c0022b
--- /dev/null
+++ eval/latency.cpp
@@ -0,0 +1,91 @@
+#include <algorithm>
+
+#include "hardware/stat.h"
+#include "model/model.h"
+#include "model/util.h"
+#include "module/layer.h"
+#include "module/module_graph.h"
+
+using namespace llm_system;
+
+int main() {
+  SystemConfig system_config;
+  system_config.num_node = 1;
+  system_config.num_device = 4;
+  // system_config.processor_type = {ProcessorType::GPU};
+  system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+  system_config.high_processor_type = ProcessorType::GPU;
+  system_config.low_processor_type = ProcessorType::LOGIC;
+
+  system_config.parallel_execution = false;
+
+  system_config.disagg_system = true;
+
+  // system_config.use_ramulator = false;
+  system_config.use_ramulator = true;
+
+  ModelConfig& model_config = mixtral;
+  model_config.ne_tp_dg = system_config.num_device;
+  model_config.e_tp_dg = system_config.num_device;
+  model_config.num_layers = 1;
+
+  // model_config.expert_freq = 1;
+  model_config.input_len = 2048;
+  model_config.output_len = 512;
+
+  long max_batch_size = 16;
+
+  Scheduler::Ptr scheduler = Scheduler::Create(
+      system_config, model_config, "none",
+      max_batch_size, 4096);
+
+  Cluster::Ptr cluster = Cluster::Create(system_config, scheduler);
+
+  scheduler->fillSequenceQueue();
+  scheduler->fillRunningQueue();
+  
+  Model model(model_config, cluster, scheduler);
+
+  cluster->set_dependency();
+
+  cluster->checkMemorySize();
+
+  std::cout << "-----------------------------------" << std::endl;
+  std::cout << "-------------start-----------------" << std::endl;
+  std::cout << "-----------------------------------" << std::endl;
+
+  std::vector<Stat> stat_list;
+  int total_iter = 2;
+  stat_list = cluster->runIteration(total_iter);
+
+  total_iter = stat_list.size();
+  int p50 = total_iter / 2;
+  int p99 = total_iter * 0.99;
+  int p99dot9 = total_iter * 0.999;
+
+  std::vector<time_ns> time;
+  for (auto& temp : stat_list) {
+    if (temp.iter_info) {
+      time.push_back(temp.latency);
+    }
+  }
+
+  sort(time.begin(), time.end());
+  // std::cout << "p50: " << time.at(p50) << ", p99: " << time.at(p99)
+  //           << ", p99.9: " << time.at(p99dot9) << std::endl;
+
+  TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
+  TopModuleGraph::Ptr top1 = cluster->get_device(1)->top_module_graph;
+  TopModuleGraph::Ptr top2 = cluster->get_device(2)->top_module_graph;
+  TopModuleGraph::Ptr top3 = cluster->get_device(3)->top_module_graph;
+
+  top0->print_timeboard();
+  top1->print_timeboard();
+  top2->print_timeboard();
+  top3->print_timeboard();
+
+  cluster->getTotalEnergy();
+  // top1->print_timeboard();
+
+  return 0;
+}
diff --git eval/sub_batch_test.cpp eval/sub_batch_test.cpp
new file mode 100644
index 0000000..6a8cba4
--- /dev/null
+++ eval/sub_batch_test.cpp
@@ -0,0 +1,258 @@
+#include <algorithm>
+
+#include "model/model.h"
+#include "model/util.h"
+#include "module/layer.h"
+#include "module/module_graph.h"
+#define MAX(a, b) a > b ? a : b
+
+using namespace llm_system;
+
+int main() {
+  SystemConfig system_config;
+  system_config.num_node = 1;
+  system_config.num_device = 2;
+  system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+  system_config.hetero_subbatch = true;
+  system_config.use_ramulator = false;
+
+  ModelConfig model_config;
+  model_config.ne_tp_dg = 2;
+  model_config.e_tp_dg = 1;
+  model_config.num_layers = 2;
+  model_config.expert_freq = 1;
+
+  long max_batch_size = 32;
+
+  Scheduler::Ptr scheduler1 = Scheduler::Create(
+      system_config, model_config, "../expert_data/experts_mixtral_GSM.csv",
+      max_batch_size / 2, 4096);
+  Scheduler::Ptr scheduler2 = Scheduler::Create(
+      system_config, model_config, "../expert_data/experts_mixtral_GSM.csv",
+      max_batch_size / 2, 4096);
+
+  Cluster::Ptr cluster1 = Cluster::Create(system_config, scheduler1);
+  Cluster::Ptr cluster2 = Cluster::Create(system_config, scheduler2);
+
+  Model model1(model_config, cluster1, scheduler1);
+  Model model2(model_config, cluster2, scheduler2);
+
+  cluster1->checkMemorySize();
+  cluster2->checkMemorySize();
+  
+  cluster1->set_dependency();
+  cluster2->set_dependency();
+
+  std::cout << "-----------------------------------" << std::endl;
+  std::cout << "-------------start-----------------" << std::endl;
+  std::cout << "-----------------------------------" << std::endl;
+
+  int total_iter = 60;
+  int p50 = total_iter / 2;
+  int p99 = total_iter * 0.99;
+  int p99dot9 = total_iter * 0.999;
+  // time = cluster->runIteration(total_iter);
+  
+  scheduler1->fillSequenceQueue();
+  scheduler1->fillRunningQueue();
+
+  scheduler2->fillSequenceQueue();
+  scheduler2->fillRunningQueue();
+
+  // hitting
+  // scheduler1->hittingQueue(5000);
+  // scheduler2->hittingQueue(5000);
+  
+  time_ns total_time = 0;
+
+  std::vector<time_ns> time_list;
+
+  for (int i = 0; i < total_iter; i++) {
+    auto metadata1 = scheduler1->setMetadata();
+    auto metadata2 = scheduler2->setMetadata();
+    cluster1->run(metadata1);
+    cluster2->run(metadata2);
+
+    TimeBoard& timeboard1 =
+        cluster1->get_device(0)->top_module_graph->timeboard;
+    TimeBoard& timeboard2 =
+        cluster2->get_device(0)->top_module_graph->timeboard;
+
+    std::vector<TimeStamp*> QKV_gen_1; // GPU
+    std::vector<TimeStamp*> AttnSum_1; // GPU
+    std::vector<TimeStamp*> AttnGen_1; // PIM or Logic
+    std::vector<TimeStamp*> O_proj_1; // GPU
+    std::vector<TimeStamp*> FFN_1; // GPU
+    std::vector<TimeStamp*> ExpertFFN_1; // PIM or Logic
+
+    std::vector<TimeStamp*> QKV_gen_2; // GPU
+    std::vector<TimeStamp*> AttnSum_2; // GPU
+    std::vector<TimeStamp*> AttnGen_2; // PIM or Logic
+    std::vector<TimeStamp*> O_proj_2; // GPU
+    std::vector<TimeStamp*> FFN_2; // GPU
+    std::vector<TimeStamp*> ExpertFFN_2; // PIM or Logic
+
+    timeboard1.find_stamp("attn_qkv_proj", QKV_gen_1);
+    timeboard1.find_stamp("AttentionSum", AttnSum_1);
+    timeboard1.find_stamp("AttentionGen", AttnGen_1);
+    timeboard1.find_stamp("attn_o_proj", O_proj_1);
+    timeboard1.find_stamp("expertFFN", ExpertFFN_1);
+    timeboard1.find_stamp("feedforward", FFN_1);
+
+    timeboard2.find_stamp("attn_qkv_proj", QKV_gen_2);
+    timeboard2.find_stamp("AttentionSum", AttnSum_2);
+    timeboard2.find_stamp("AttentionGen", AttnGen_2);
+    timeboard2.find_stamp("attn_o_proj", O_proj_2);
+    timeboard2.find_stamp("expertFFN", ExpertFFN_2);
+    timeboard1.find_stamp("feedforward", FFN_2);
+
+    time_ns stage_time = 0;
+    int layer_idx_1 = 0;
+    int layer_idx_2 = 0;
+    
+    int cur_1 = 1;
+    int cur_2 = 0;
+
+    time_ns pipe_1;
+    time_ns pipe_2;
+
+    int num_layer = model_config.num_layers;
+    int expert_freq = model_config.expert_freq;
+    stage_time += QKV_gen_1[0]->get_duration() + AttnSum_1[0]->get_duration();
+    while(layer_idx_1 < num_layer || layer_idx_2 < num_layer){
+      // first layer must be MoE layer
+      // batch-1
+      pipe_1 = 0;
+      pipe_2 = 0;
+      if(layer_idx_1 % expert_freq == 0 && layer_idx_1 < num_layer){ // is MoE Layer
+        if(cur_1 == 0){
+          pipe_1 = QKV_gen_1[layer_idx_1]->get_duration() + AttnSum_1[layer_idx_1]->get_duration();
+        }
+        else if(cur_1 == 1){
+          pipe_1 = AttnGen_1[layer_idx_1]->get_duration();
+        }
+        else if(cur_1 == 2){
+          pipe_1 = O_proj_1[layer_idx_1]->get_duration();
+        }
+        else {
+          int expert_ffn_idx = layer_idx_1 / expert_freq;
+          pipe_1 = ExpertFFN_1[expert_ffn_idx]->get_duration();
+        }
+      }
+      else if (layer_idx_1 < num_layer){ // is Non-MoE layer
+        if(cur_1 == 0){
+          pipe_1 = QKV_gen_1[layer_idx_1]->get_duration() + AttnSum_1[layer_idx_1]->get_duration();
+        }
+        else if(cur_1 == 1){
+          pipe_1 = AttnGen_1[layer_idx_1]->get_duration();
+        }
+        else {
+          int ffn_idx = layer_idx_1 - (layer_idx_1 / expert_freq) - 1;
+          if(layer_idx_1 != num_layer - 1){
+            pipe_1 = O_proj_1[layer_idx_1]->get_duration()
+                    + FFN_1[ffn_idx]->get_duration()
+                    + QKV_gen_1[layer_idx_1 + 1]->get_duration() + AttnSum_1[layer_idx_1 + 1]->get_duration();
+          }
+          else{
+            pipe_1 = O_proj_1[layer_idx_1]->get_duration()
+                    + FFN_1[ffn_idx]->get_duration();
+          }
+          layer_idx_1++;
+          cur_1 = 0;
+        }
+      }
+      // batch-2
+      if(layer_idx_2 % expert_freq == 0){ // is MoE Layer
+        if(cur_2 == 0){
+          pipe_2 = QKV_gen_2[layer_idx_2]->get_duration() + AttnSum_2[layer_idx_2]->get_duration();
+        }
+        else if(cur_2 == 1){
+          pipe_2 = AttnGen_2[layer_idx_2]->get_duration();
+        }
+        else if(cur_2 == 2){
+          pipe_2 = O_proj_2[layer_idx_2]->get_duration();
+        }
+        else {
+          int expert_ffn_idx = layer_idx_2 / expert_freq;
+          pipe_2 = ExpertFFN_2[expert_ffn_idx]->get_duration();
+        }
+      }
+      else{ // is Non-MoE layer
+        if(cur_2 == 0){
+          pipe_2 = QKV_gen_2[layer_idx_2]->get_duration() + AttnSum_2[layer_idx_2]->get_duration();
+        }
+        else if(cur_2 == 1){
+          pipe_2 = AttnGen_2[layer_idx_2]->get_duration();
+        }
+        else {
+          int ffn_idx = layer_idx_2 - (layer_idx_2 / expert_freq) - 1;
+          if(layer_idx_2 != num_layer - 1){
+            pipe_2 = O_proj_2[layer_idx_2]->get_duration()
+                    + FFN_2[ffn_idx]->get_duration()
+                    + QKV_gen_2[layer_idx_2 + 1]->get_duration() + AttnSum_2[layer_idx_2 + 1]->get_duration();
+          }
+          else{
+            pipe_2 = O_proj_2[layer_idx_2]->get_duration()
+                    + FFN_2[ffn_idx]->get_duration();
+          }
+          layer_idx_2++;
+          cur_2 = 0;
+        }
+      }
+      stage_time += MAX(pipe_1, pipe_2);
+
+      cur_1++;
+      cur_2++;
+      if(cur_1 == 4){
+        layer_idx_1++;
+        cur_1 = 0;
+      }
+      if(cur_2 == 4){
+        layer_idx_2++;
+        cur_2 = 0;
+      }
+    }
+    time_list.push_back(stage_time);
+    total_time += stage_time;
+    std::cout << "Iter: " << std::to_string(i)
+              << "\t| time: " << std::setprecision(4) << stage_time / 1000 << "us\t|";
+
+    // check time
+    scheduler1->updateScheduler();
+    scheduler1->fillSequenceQueue();
+    scheduler1->fillRunningQueue();
+
+    scheduler2->updateScheduler();
+    scheduler2->fillSequenceQueue();
+    scheduler2->fillRunningQueue();
+
+    // if(i != total_iter - 1){
+    //   timeboard1.reset_timeboard();
+    //   timeboard2.reset_timeboard();
+    // }
+  } 
+  std::cout << "Total: " << std::to_string(total_time) << std::endl;
+  // batch
+  // auto metadata1 = scheduler1->setMetadata();
+  // cluster1->run(metadata1);
+  
+  // scheduler1->updateScheduler();
+  // scheduler1->fillSequenceQueue();
+  // scheduler1->fillRunningQueue();
+  
+  cluster1->get_device(0)->top_module_graph->print_timeboard();
+  cluster1->get_device(1)->top_module_graph->print_timeboard();
+  // cluster1->get_device(2)->top_module_graph->print_timeboard();
+  // cluster1->get_device(3)->top_module_graph->print_timeboard();
+
+  cluster2->get_device(0)->top_module_graph->print_timeboard();
+  cluster2->get_device(1)->top_module_graph->print_timeboard();
+  // cluster2->get_device(2)->top_module_graph->print_timeboard();
+  // cluster2->get_device(3)->top_module_graph->print_timeboard();
+
+  // sort(time_list.begin(), time_list.end());
+  // std::cout << "p50: " << time_list.at(p50) << ", p99: " << time_list.at(p99)
+  //           << ", p99.9: " << time_list.at(p99dot9) << std::endl;
+  return 0;
+}
+
diff --git eval/sum_gen_split.cpp eval/sum_gen_split.cpp
new file mode 100644
index 0000000..7e243cd
--- /dev/null
+++ eval/sum_gen_split.cpp
@@ -0,0 +1,144 @@
+#include <algorithm>
+#include <iostream>
+
+#include "hardware/stat.h"
+#include "model/model.h"
+#include "model/util.h"
+#include "module/layer.h"
+#include "module/module_graph.h"
+
+using namespace llm_system;
+
+int main(int argc, char *argv[]) {
+  std::vector<std::string> arg;
+  for (int i = 1; i < argc; i++) {
+    arg.push_back(argv[i]);
+  }
+  // 0: data_name,  1: processor_type, 2: device_num;
+
+  std::string model_name = arg[0];
+  std::string data_name = arg[1];
+  std::string processor_type = arg[2];
+  int num_device = std::stoi(arg[3]);
+  std::string output_path = arg[4];
+  int max_batch_size = std::stoi(arg[5]);
+  int input_len = std::stoi(arg[6]);
+  int output_len = std::stoi(arg[7]);
+  int max_process_token = std::stoi(arg[8]);
+  int request_per_second = std::stoi(arg[9]);
+  int iter = std::stoi(arg[10]);
+  int num_node = std::stoi(arg[11]);
+  int e_tp_dg = std::stoi(arg[12]);
+  int parallel_execution = std::stoi(arg[13]);
+
+  SystemConfig system_config;
+  system_config.num_node = num_node;
+  system_config.num_device = num_device;
+
+  // system_config.processor_type = {ProcessorType::GPU};
+  system_config.high_processor_type = ProcessorType::GPU;
+  system_config.low_processor_type = ProcessorType::LOGIC;
+
+  system_config.parallel_execution = false;
+  system_config.hetero_subbatch = false;
+  system_config.disagg_system = false;
+  system_config.use_ramulator = true;
+
+  if (!processor_type.compare("GPU")) {
+    system_config.processor_type = {ProcessorType::GPU};
+  } else if (!processor_type.compare("LOGIC")) {
+    system_config.processor_type = {ProcessorType::LOGIC};
+  } else if (!processor_type.compare("GPU+LOGIC")) {
+    system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+    if (parallel_execution) {
+      system_config.parallel_execution = true;
+    } else {
+      system_config.parallel_execution = false;
+    }
+  }
+
+  if (request_per_second == 0) {
+    system_config.use_inject_rate = false;
+  } else {
+    system_config.use_inject_rate = true;
+    system_config.request_per_second = request_per_second;
+  }
+
+  int split = 0;
+  if (!system_config.disagg_system) {
+    split = 1;
+  }
+  std::string expert_file_path;
+
+  ModelConfig model_config;
+
+  if (!model_name.compare("mixtral")) {
+    model_config = mixtral;
+  } else if (!model_name.compare("openMoE")) {
+    model_config = openMoE;
+  } else if (!model_name.compare("llama7bMoE")) {
+    model_config = llama7bMoE;
+  } else if (!model_name.compare("grok1")) {
+    model_config = grok1;
+  } else if (!model_name.compare("glam")) {
+    model_config = glam;
+  } else {
+    fail("Model is not supported");
+  }
+
+  model_config.ne_tp_dg = system_config.num_device;
+  model_config.e_tp_dg = e_tp_dg;
+  model_config.dataset = data_name;
+  // model_config.max_seq_len = 512;
+
+  if (!data_name.compare("synthesis")) {
+    expert_file_path = "none";
+    model_config.input_len = input_len;
+    model_config.output_len = output_len;
+  } else {
+    expert_file_path =
+        "../expert_data/experts_" + model_name + "_" + data_name + ".csv";
+  }
+
+  // long max_batch_size = 128;
+  if (max_process_token == 0) {
+    max_process_token = 8192 * 4;
+  }
+  Scheduler::Ptr scheduler =
+      Scheduler::Create(system_config, model_config, expert_file_path,
+                        max_batch_size, 8192 * 32, max_process_token);
+
+  Cluster::Ptr cluster = Cluster::Create(system_config, scheduler);
+
+  Model model(model_config, cluster, scheduler);
+
+  bool out_of_memory = cluster->checkMemorySize();
+  cluster->set_dependency();
+
+  // std::vector<Stat> stat_list;
+  int total_iter = iter;
+
+  std::ofstream csv;
+  std::string file_name =
+      output_path + "/" + model_name + "_" + data_name + "_" +
+      std::to_string(input_len) + "_" + std::to_string(output_len) + "_" +
+      processor_type + "_N" + std::to_string(num_node) + "_D" +
+      std::to_string(num_device) + "_maxbatch" +
+      std::to_string(max_batch_size) + "_maxprocess" +
+      std::to_string(max_process_token) + "_injectionrate" +
+      std::to_string(request_per_second) + "_iter" +
+      std::to_string(total_iter) + "_e_tp" + std::to_string(e_tp_dg) +
+      "_parallel_execution" + std::to_string(parallel_execution) + "_split" +
+      std::to_string(split) + ".csv";
+
+  std::cout << "-----------------------------------" << std::endl;
+  std::cout << "-------------start-----------------" << std::endl;
+  std::cout << "-----------------------------------" << std::endl;
+
+  scheduler->getActualArrivalTime(total_iter);
+  cluster->runIteration(total_iter, file_name);
+
+  // TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
+  // top0->print_timeboard();
+  return 0;
+}
diff --git eval/test.cpp eval/test.cpp
index 0e25244..8053391 100644
--- eval/test.cpp
+++ eval/test.cpp
@@ -55,68 +55,27 @@ int main(int argc, char *argv[]) {
     fail("No GPU generation information");
   }
 
-  // NVLink Config // 
-  if(config["system"]["nvlink_gen"].as<int>() == 4){
-    system_config.device_ict_bandwidth = 450.0 * 1000 * 1000 * 1000; // B/s NVLink 4th Gen (H100)
-    system_config.device_ict_latency = 0.8 * 1000; // ns
-  }
-  else if(config["system"]["nvlink_gen"].as<int>() == 5){
-    system_config.device_ict_bandwidth = 900.0 * 1000 * 1000 * 1000; // B/s NVLink 5th Gen (B100, B200)
-    system_config.device_ict_latency = 0.8 * 1000; // ns
-  }else{
-    fail("Not support NVLink generation");
-  }
+  // inter-GPU NVLink Config // 
+  system_config.device_ict_bandwidth = 450.0 * 1000 * 1000 * 1000; // B/s NVLink 4th Gen (DGX H100)
+  system_config.device_ict_latency = 0.8 * 1000; // ns
 
   // InfiniBand Config // 
-  if(config["system"]["infiniband_gen"].as<int>() == 400){
-    system_config.node_ict_bandwidth = 50.0 * 1000 * 1000 * 1000; // B/s Infiniband NDR
-    system_config.node_ict_latency = 0.13 * 1000; // ns
-  }
-  else if(config["system"]["infiniband_gen"].as<int>() == 800){
-    system_config.node_ict_bandwidth = 100.0 * 1000 * 1000 * 1000; // B/s InfiniBand XDR
-    system_config.node_ict_latency = 0.13 * 1000; // ns
-  }
-  else if(config["system"]["infiniband_gen"].as<int>() == 3600){
-    system_config.node_ict_bandwidth = 450.0 * 1000 * 1000 * 1000; // B/s NVLink 4th Gen
-    system_config.node_ict_latency = 0.8 * 1000; // ns
-  }
-  else if(config["system"]["infiniband_gen"].as<int>() == 7200){
-    system_config.node_ict_bandwidth = 900.0 * 1000 * 1000 * 1000; // B/s NVLink 5th Gen
-    system_config.node_ict_latency = 0.8 * 1000; // ns
-  }
-  else{
-    fail("Not support InfiniBand generation");
-  }
-  
+  system_config.node_ict_bandwidth = 50.0 * 1000 * 1000 * 1000; // B/s Infiniband NDR
+  system_config.node_ict_latency = 0.13 * 1000; // ns
+
   system_config.num_node = num_node;
   system_config.num_device = num_device;
 
-
-  system_config.high_processor_type = ProcessorType::GPU;
-  system_config.low_processor_type = ProcessorType::LOGIC;
-
-
-  system_config.parallel_execution =
-      config["system"]["optimization"]["parallel_execution"].as<bool>();
-  system_config.hetero_subbatch =
-      config["system"]["optimization"]["hetero_subbatch"].as<bool>();
-  system_config.disagg_system =
-      config["system"]["optimization"]["disagg_system"].as<bool>(); 
-  system_config.use_low_unit_moe_only =
-      config["system"]["optimization"]["use_low_unit_moe_only"].as<bool>();      
-  system_config.use_ramulator =
-      config["system"]["optimization"]["use_ramulator"].as<bool>();
-
-  system_config.use_flash_mla =
-      config["system"]["optimization"]["use_flash_mla"].as<bool>();
-  system_config.use_flash_attention =
-      config["system"]["optimization"]["use_flash_attention"].as<bool>();
-
-  // kv cache reuse
-  system_config.reuse_kv_cache =
-      config["system"]["optimization"]["reuse_kv_cache"].as<bool>();
-  system_config.kv_cache_reuse_rate =
-      config["system"]["optimization"]["kv_cache_reuse_rate"].as<double>();
+  // default settings
+  system_config.parallel_execution = false;
+  system_config.hetero_subbatch = false;
+  system_config.disagg_system = false;
+  system_config.use_low_unit_moe_only = false;
+  system_config.use_ramulator = false;
+  system_config.use_flash_mla = false;
+  system_config.use_flash_attention = false;
+  system_config.reuse_kv_cache = false;
+  system_config.kv_cache_reuse_rate = 0.0;
   
   // prefill mode or decode mode
   system_config.prefill_mode =
@@ -137,24 +96,24 @@ int main(int argc, char *argv[]) {
     std::cout << "[Decode Mode] Current Length of sequences is modified into input_len" << std::endl;
   }
 
+  //// In this branch, we use only GPU-related code, neither LOGIC nor PIM
   if (!processor_type.compare("GPU")) {
     system_config.processor_type = {ProcessorType::GPU};
     system_config.high_processor_type = ProcessorType::GPU;
     system_config.low_processor_type = ProcessorType::GPU;
-  } else if (!processor_type.compare("LOGIC")) {
-    system_config.processor_type = {ProcessorType::LOGIC};
-    system_config.high_processor_type = ProcessorType::LOGIC;
-    system_config.low_processor_type = ProcessorType::LOGIC;
-  } else if (!processor_type.compare("GPU+LOGIC")) {
-    system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
-    system_config.high_processor_type = ProcessorType::GPU;
-    system_config.low_processor_type = ProcessorType::LOGIC;
-    // system_config.parallel_execution = true;
-  } else if (!processor_type.compare("GPU+PIM")) {
-    system_config.processor_type = {ProcessorType::GPU, ProcessorType::PIM};
-    system_config.high_processor_type = ProcessorType::GPU;
-    system_config.low_processor_type = ProcessorType::PIM;
-  }
+  } //else if (!processor_type.compare("LOGIC")) {
+  //  system_config.processor_type = {ProcessorType::LOGIC};
+  //  system_config.high_processor_type = ProcessorType::LOGIC;
+  //  system_config.low_processor_type = ProcessorType::LOGIC;
+  //} else if (!processor_type.compare("GPU+LOGIC")) {
+  //  system_config.processor_type = {ProcessorType::GPU, ProcessorType::LOGIC};
+  //  system_config.high_processor_type = ProcessorType::GPU;
+  //  system_config.low_processor_type = ProcessorType::LOGIC;
+  //} else if (!processor_type.compare("GPU+PIM")) {
+  //  system_config.processor_type = {ProcessorType::GPU, ProcessorType::PIM};
+  //  system_config.high_processor_type = ProcessorType::GPU;
+  //  system_config.low_processor_type = ProcessorType::PIM;
+  //}
 
   std::string expert_file_path;
 
@@ -166,12 +125,16 @@ int main(int argc, char *argv[]) {
     model_config = openMoE;
   } else if (!model_name.compare("llama7bMoE")) {
     model_config = llama7bMoE;
+  } else if (!model_name.compare("llama3_70B")) {
+    model_config = llama3_70B;
   } else if (!model_name.compare("llama3_405B")) {
     model_config = llama3_405B;
+  } else if (!model_name.compare("llama4_maverick")) {
+    model_config = llama4_maverick;
   } else if (!model_name.compare("grok1")) {
     model_config = grok1;
-  } else if (!model_name.compare("deepseekV3")) {
-    model_config = deepseekV3;
+  } else if (!model_name.compare("deepseekR1")) {
+    model_config = deepseekR1;
   } else {
     fail("No model configuration of " + model_name);
   }
@@ -191,8 +154,8 @@ int main(int argc, char *argv[]) {
     system_config.compute_peak_flops *= 2; // system_config has FP16 peak FLOPS information
   }
 
-  system_config.exit_out_of_memory = config["simulation"]["exit_out_of_memory"].as<bool>();
-  system_config.mem_cap_limit = config["simulation"]["mem_cap_limit"].as<bool>();
+  system_config.exit_out_of_memory = false;
+  system_config.mem_cap_limit = false;
 
   model_config.dataset = data_name;
 
@@ -222,7 +185,6 @@ int main(int argc, char *argv[]) {
 
   Model model(model_config, cluster, scheduler);
 
-  bool out_of_memory = cluster->checkMemorySize();
   cluster->set_dependency();
 
   std::cout << "-----------------------------------" << std::endl;
@@ -237,109 +199,39 @@ int main(int argc, char *argv[]) {
 
   int precision_bytes = model_config.precision_byte;
 
-  std::string file_name;
-  if(system_config.prefill_mode){
-    if(system_config.use_ramulator){
-      file_name = output_path + "/" + model_name + "_" + data_name +
-                            "_" + std::to_string(input_len) + "_" +
-                            std::to_string(output_len) + "_" + processor_type +
-                            "_N" + std::to_string(num_node) + "_D" + 
-                            std::to_string(num_device) + "_TP" +
-                            std::to_string(ne_tp_dg) + "_DP" +
-                            std::to_string(ne_dp_dg) + "_maxbatch" +
-                            std::to_string(max_batch_size) + "_maxprocess" +
-                            std::to_string(max_process_token) + "_iter" +
-                            std::to_string(total_iter) + 
-                            "_precision_byte" + std::to_string(precision_bytes) + "_parallel_execution" + std::to_string(system_config.parallel_execution) + "_ramul_prefill.csv";
-    }
-    else{
-      file_name = output_path + "/" + model_name + "_" + data_name +
-                            "_" + std::to_string(input_len) + "_" +
-                            std::to_string(output_len) + "_" + processor_type +
-                            "_N" + std::to_string(num_node) + "_D" + 
-                            std::to_string(num_device) + "_TP" +
-                            std::to_string(ne_tp_dg) + "_DP" +
-                            std::to_string(ne_dp_dg) + "_maxbatch" +
-                            std::to_string(max_batch_size) + "_maxprocess" +
-                            std::to_string(max_process_token) + "_iter" +
-                            std::to_string(total_iter) + 
-                            "_precision_byte" + std::to_string(precision_bytes) + "_parallel_execution" + std::to_string(system_config.parallel_execution) + "_prefill.csv";
-    }
+  std::string offloading;
+  if(config["system"]["offload"]["offload_expert_to_cpu_memory"].as<bool>()){
+    offloading="CPU_memory";
+  } else if(config["system"]["offload"]["offload_expert_to_ssd"].as<bool>()){
+    offloading="SSD";
+  } else{
+    offloading="baseline"; // no offload
   }
-  else if(system_config.decode_mode){
-    if(system_config.use_ramulator){
-      file_name = output_path + "/" + model_name + "_" + data_name +
-                            "_" + std::to_string(input_len) + "_" +
-                            std::to_string(output_len) + "_" + processor_type +
-                            "_N" + std::to_string(num_node) + "_D" + 
-                            std::to_string(num_device) + "_TP" +
-                            std::to_string(ne_tp_dg) + "_DP" +
-                            std::to_string(ne_dp_dg) + "_maxbatch" +
-                            std::to_string(max_batch_size) + "_maxprocess" +
-                            std::to_string(max_process_token) + "_iter" +
-                            std::to_string(total_iter) + 
-                            "_precision_byte" + std::to_string(precision_bytes) + "_parallel_execution" + std::to_string(system_config.parallel_execution) + "_ramul_decode.csv";
-    }
-    else{
-      file_name = output_path + "/" + model_name + "_" + data_name +
-                            "_" + std::to_string(input_len) + "_" +
-                            std::to_string(output_len) + "_" + processor_type +
-                            "_N" + std::to_string(num_node) + "_D" + 
-                            std::to_string(num_device) + "_TP" +
-                            std::to_string(ne_tp_dg) + "_DP" +
-                            std::to_string(ne_dp_dg) + "_maxbatch" +
-                            std::to_string(max_batch_size) + "_maxprocess" +
-                            std::to_string(max_process_token) + "_iter" +
-                            std::to_string(total_iter) + 
-                            "_precision_byte" + std::to_string(precision_bytes) + "_parallel_execution" + std::to_string(system_config.parallel_execution) + "_decode.csv";
-    }
-  }
-  else{
-    if(system_config.use_ramulator){
-      file_name = output_path + "/" + model_name + "_" + data_name +
-                            "_" + std::to_string(input_len) + "_" +
-                            std::to_string(output_len) + "_" + processor_type +
-                            "_N" + std::to_string(num_node) + "_D" + 
-                            std::to_string(num_device) + "_TP" +
-                            std::to_string(ne_tp_dg) + "_DP" +
-                            std::to_string(ne_dp_dg) + "_maxbatch" +
-                            std::to_string(max_batch_size) + "_maxprocess" +
-                            std::to_string(max_process_token) + "_iter" +
-                            std::to_string(total_iter) + 
-                            "_precision_byte" + std::to_string(precision_bytes) + "_parallel_execution" + std::to_string(system_config.parallel_execution) + "_ramul.csv";
-    }
-    else{
-      file_name = output_path + "/" + model_name + "_" + data_name +
-                            "_" + std::to_string(input_len) + "_" +
-                            std::to_string(output_len) + "_" + processor_type +
-                            "_N" + std::to_string(num_node) + "_D" + 
-                            std::to_string(num_device) + "_TP" +
-                            std::to_string(ne_tp_dg) + "_DP" +
-                            std::to_string(ne_dp_dg) + "_maxbatch" +
-                            std::to_string(max_batch_size) + "_maxprocess" +
-                            std::to_string(max_process_token) + "_iter" +
-                            std::to_string(total_iter) + 
-                            "_precision_byte" + std::to_string(precision_bytes) + "_parallel_execution" + std::to_string(system_config.parallel_execution) + ".csv";
-    }
-  }
-  if (out_of_memory && config["simulation"]["exit_out_of_memory"].as<bool>()) {
-    std::cout << "Out of Memory: " << file_name << std::endl;
-    return 0;
+
+  std::string collect;
+  if(config["system"]["offload"]["collects_gpu_compute"].as<bool>()){
+    collect="GPU_compute";
+  } else{
+    collect="offloaded_weight_copy";
   }
+
+  int nvlink_gen = config["system"]["offload"]["offload_bandwidth"].as<int>();
+
+  std::string file_name;
+  file_name = output_path + "/" + model_name + "_" + data_name +
+                        "_N" + std::to_string(num_node) + "_D" + 
+                        std::to_string(num_device) + "_TP" +
+                        std::to_string(ne_tp_dg) + "_DP" +
+                        std::to_string(ne_dp_dg) + "_batchsize" +
+                        std::to_string(max_batch_size) + "_" + offloading + 
+                        "_NVLink" + std::to_string(nvlink_gen) + "_" + collect + ".csv";
+
+  
   scheduler->getActualArrivalTime(total_iter);
   stat_list = cluster->runIteration(total_iter, file_name);
-  // TopModuleGraph::Ptr top1 = cluster->get_device(8)->top_module_graph;
-  std::string gantt_file_path =
-      config["log"]["gantt_directory"].as<std::string>();
-
-  if(config["log"]["export_gantt"].as<bool>()){
-    cluster->exportGantt(gantt_file_path);
-  }
 
-  if(config["log"]["print_log"].as<bool>()){
-    TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
-    top0->print_timeboard();
-  }
+  //TopModuleGraph::Ptr top0 = cluster->get_device(0)->top_module_graph;
+  //top0->print_timeboard();
 
   return 0;
 }
diff --git figure_4_and_5.py figure_4_and_5.py
new file mode 100755
index 0000000..d95acda
--- /dev/null
+++ figure_4_and_5.py
@@ -0,0 +1,304 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import subprocess
+import yaml
+import pandas as pd
+
+BASE_DIR     = os.path.dirname(os.path.abspath(__file__))
+CONFIG_FILE  = os.path.join(BASE_DIR, "build", "config.yaml")
+SIM_CMD      = [os.path.join(BASE_DIR, "build", "run")]
+
+# latency
+LATENCY_NON_MOE_DECODER   = "non_MoE_decoders"
+LATENCY_FC_COLS = [
+    "qkvgen", "q_down_proj", "kv_down_proj", "kr_proj",
+    "q_up_proj", "qr_proj", "kv_up_proj", "tr_k_up_proj",
+    "v_up_proj", "o_proj", "ffn", "shared_expert_ffn"
+]
+LATENCY_ATTEN = "atten_gen"
+LATENCY_MOE   = "expert_ffn"
+LATENCY_COMM  = "communication"
+
+# energy
+BASE = {
+    "fc_dram":         "fc_dram",
+    "fc_comp":         "fc_comp",
+    "ffn_dram":        "ffn_dram",
+    "ffn_comp":        "ffn_comp",
+    "shared_moe_hbm": "shared_moe_hbm",
+    "shared_moe_comp": "shared_moe_comp",
+    "attn_dram":       "attn_dram",
+    "attn_comp":       "attn_comp",
+    "moe_hbm":        "moe_hbm",
+    "moe_comp":        "moe_comp",
+}
+OFFLOAD = "moe_offload"
+
+# model & batch size
+EXPERIMENTS = {
+    "mixtral":    [1, 4, 16, 64, 256, 1024],
+    "deepseekR1": [4, 16, 64, 256, 1024],
+}
+
+# system background power (Watt)
+## 70: single H100 SXM 80GB GPU (includes HBM)
+## 57: 256GB of CPU memory (DDR5-7200 x8) per GPU
+## ignore the negligible background power of SSD (https://semiconductor.samsung.com/consumer-storage/internal-ssd/9100-pro/)
+BACKGROUND_POWER = 57 + 70
+
+DISCARD_COLS = [
+    "non_MoE_decoders", "MoE_decoders", "qkvgen", "q_down_proj", "kv_down_proj", "kr_proj",
+    "q_up_proj", "qr_proj", "kv_up_proj", "tr_k_up_proj",
+    "v_up_proj", "atten_sum", "atten_gen", "o_proj",
+    "ffn", "shared_expert_ffn", "communication", "fc_dram",
+    "fc_comp", "attn_dram", "attn_comp", "ffn_dram", "ffn_comp",
+    "shared_moe_hbm", "shared_moe_comp", "moe_hbm", "moe_comp"
+]
+
+def load_cfg():
+    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
+        return yaml.safe_load(f)
+
+def write_cfg(cfg):
+    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
+        yaml.dump(cfg, f, sort_keys=False, allow_unicode=True)
+
+def update_configuration(model_name: str, batch_size: int, input_sequence_length: int):
+    cfg = load_cfg()
+    cfg['model']['model_name'] = model_name
+    cfg['serving']['max_batch_size'] = batch_size
+    cfg['simulation']['input_len'] = input_sequence_length
+    cfg['simulation']['output_len'] = 2 # the first decode stage after the prefill stage
+    cfg['simulation']['iter'] = 2
+
+    if model_name == "mixtral":
+        cfg['system']['num_node'] = 1
+        cfg['system']['num_device'] = 4
+        cfg['system']['distribution']['expert_tensor_degree'] = 1
+        cfg['system']['distribution']['none_expert_tensor_degree'] = 4
+        cfg['system']['optimization']['compressed_kv'] = False
+        cfg['system']['optimization']['use_absorb'] = False
+    elif model_name == "deepseekR1":
+        cfg['system']['num_node'] = 4
+        cfg['system']['num_device'] = 8
+        cfg['system']['distribution']['expert_tensor_degree'] = 1
+        cfg['system']['distribution']['none_expert_tensor_degree'] = 8
+        cfg['system']['optimization']['compressed_kv'] = True
+        cfg['system']['optimization']['use_absorb'] = True
+
+    cfg['system']['offload']['ssd_energy_scale'] = 1.0
+    cfg['system']['offload']['offload_expert_to_cpu_memory'] = False
+    cfg['system']['offload']['offload_expert_to_ssd']       = False
+    write_cfg(cfg)
+
+
+def run_sim(target_gpu: bool, offload_cpu: bool, offload_ssd: bool, nvlink_gen: int = 4) -> str:
+    cfg = load_cfg()
+    cfg['system']['offload']['offload_expert_to_cpu_memory'] = offload_cpu
+    cfg['system']['offload']['offload_expert_to_ssd']       = offload_ssd
+    cfg['system']['offload']['collects_gpu_compute']       = target_gpu
+    cfg['system']['offload']['offload_bandwidth']       = nvlink_gen
+    write_cfg(cfg)
+
+    tag = "CPU_memory" if offload_cpu else "SSD" if offload_ssd else "baseline"
+    collect = "GPU_compute" if target_gpu else "offloaded_weight_copy"
+    print(f"\n--- Running [{tag}] ---")
+    simulation_working_dir = "./build"
+    proc = subprocess.run(SIM_CMD, cwd=simulation_working_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
+    if proc.returncode != 0:
+        print(proc.stdout, file=sys.stdout)
+        print(proc.stderr, file=sys.stderr)
+        sys.exit(f"ERROR: failed ({tag})")
+
+    # file name
+    m   = cfg['model']['model_name']
+    d   = cfg['simulation']['data']
+    nn  = cfg['system']['num_node']
+    nd  = cfg['system']['num_device']
+    ne_tp_dg = cfg["system"]["distribution"]["none_expert_tensor_degree"]
+    ne_dp_dg = int(nd * nn / ne_tp_dg)
+    bs  = cfg['serving']['max_batch_size']
+    od  = cfg['log']['output_directory']
+    fname = os.path.join(simulation_working_dir, od, f"{m}_{d}_N{nn}_D{nd}_TP{ne_tp_dg}_DP{ne_dp_dg}_batchsize{bs}_{tag}_NVLink{nvlink_gen}_{collect}.csv")
+    if not os.path.isfile(fname):
+        sys.exit(f"ERROR: cannot find generated CSV: {fname}")
+    print(f"→ OK: {fname}")
+
+    if not target_gpu:
+        zero_out_columns_in_csv(fname)
+    
+    return fname
+
+def zero_out_columns_in_csv(fname: str):
+    df = pd.read_csv(fname)
+    for col in DISCARD_COLS:
+        if col in df.columns:
+            df[col] = 0
+    df.to_csv(fname, index=False)
+
+def compute_energy_baseline(label: str, latency: float, df_base: pd.DataFrame, bs: int):
+    cfg = load_cfg()
+    num_tot_device = cfg['system']['num_node'] * cfg['system']['num_device']
+
+    r = df_base.loc[0]
+    # xx_off: (memory/storage access) off-chip memory access
+    # xx_on: (GPU-compute) on-chip memory & compute
+    fc_off   = (r[BASE["fc_dram"]] + r[BASE["ffn_dram"]] + r[BASE["shared_moe_hbm"]]) / 1e9
+    fc_on    = (r[BASE["fc_comp"]] + r[BASE["ffn_comp"]] + r[BASE["shared_moe_comp"]]) / 1e9
+    attn_off = r[BASE["attn_dram"]] / 1e9
+    attn_on  = r[BASE["attn_comp"]] / 1e9
+    moe_off  = r[BASE["moe_hbm"]] / 1e9
+    moe_on   = r[BASE["moe_comp"]] / 1e9
+    background   = num_tot_device * BACKGROUND_POWER * latency / 1e3
+    per_tok  = (fc_off + fc_on + attn_off + attn_on + moe_off + moe_on + background) / bs
+
+    print(f"\n>> {label} energy (J/single decode stage)")
+    print(f"   FC off-chip      : {fc_off:.6f}")
+    print(f"   FC on-chip       : {fc_on:.6f}")
+    print(f"   Attn off-chip    : {attn_off:.6f}")
+    print(f"   Attn on-chip     : {attn_on:.6f}")
+    print(f"   MoE off-chip     : {moe_off:.6f}")
+    print(f"   MoE on-chip      : {moe_on:.6f}")
+    print(f"   System background: {background:.6f}")
+    print(f"   ---------------------------")
+    print(f"   Per token        : {per_tok:.6f} (÷ batch_size={bs})")
+
+def compute_energy_offload(label: str, latency: float, df_gpu: pd.DataFrame, df_offload: pd.DataFrame, bs: int):
+    cfg = load_cfg()
+    num_tot_device = cfg['system']['num_node'] * cfg['system']['num_device']
+
+    r, s = df_gpu.loc[0], df_offload.loc[0]
+    # xx_off: (memory/storage access) off-chip memory access
+    # xx_on: (GPU-compute) on-chip memory & compute
+    fc_off   = (r[BASE["fc_dram"]] + r[BASE["ffn_dram"]] + r[BASE["shared_moe_hbm"]]) / 1e9
+    fc_on    = (r[BASE["fc_comp"]] + r[BASE["ffn_comp"]] + r[BASE["shared_moe_comp"]]) / 1e9
+    attn_off = r[BASE["attn_dram"]] / 1e9
+    attn_on  = r[BASE["attn_comp"]] / 1e9
+    moe_off  = (r[BASE["moe_hbm"]] + s[OFFLOAD]) / 1e9
+    moe_on   = r[BASE["moe_comp"]] / 1e9
+    # system background energy
+    background   = num_tot_device * BACKGROUND_POWER * latency / 1e3
+    per_tok  = (fc_off + fc_on + attn_off + attn_on + moe_off + moe_on + background) / bs
+
+    print(f"\n>> {label}-offloaded (nvlink5.0) case energy (J/single decode stage)")
+    print(f"   FC off-chip      : {fc_off:.6f}")
+    print(f"   FC on-chip       : {fc_on:.6f}")
+    print(f"   Attn off-chip    : {attn_off:.6f}")
+    print(f"   Attn on-chip     : {attn_on:.6f}")
+    print(f"   MoE off-chip     : {moe_off:.6f}")
+    print(f"   MoE on-chip      : {moe_on:.6f}")
+    print(f"   System background: {background:.6f}")
+    print(f"   ---------------------------")
+    print(f"   Per token        : {per_tok:.6f} (÷ batch_size={bs})")
+
+
+def compute_latency_baseline(label: str, df_base: pd.DataFrame) -> float:
+    r = df_base.loc[0]
+    # FC
+    fc_sum = sum(r[col] for col in LATENCY_FC_COLS)
+    fc_lat = fc_sum / 1e6
+    # Attention
+    attn_lat = r[LATENCY_ATTEN] / 1e6
+    # MoE
+    moe_lat  = r[LATENCY_MOE] / 1e6
+    # Communication
+    comm_lat = r[LATENCY_COMM] / 1e6
+    per_tok = fc_lat + attn_lat + moe_lat + comm_lat
+
+    print(f"\n>> {label}-latency (ms/token)")
+    print(f"   FC            : {fc_lat:.6f}")
+    print(f"   Attention     : {attn_lat:.6f}")
+    print(f"   MoE           : {moe_lat:.6f}")
+    print(f"   Communication : {comm_lat:.6f}")
+    print(f"   ---------------------------")
+    print(f"   Per token     : {per_tok:.6f}")
+
+    return per_tok
+
+def compute_latency_offload(label: str, nvlink_gen: str, df_base: pd.DataFrame, df_cpu: pd.DataFrame, bs: int) -> float:
+    r, s = df_base.loc[0], df_cpu.loc[0]
+    # FC
+    fc_sum = sum(r[col] for col in LATENCY_FC_COLS)
+    fc_lat = fc_sum / 1e6
+    # Attention
+    attn_lat = r[LATENCY_ATTEN] / 1e6
+    # MoE
+    if bs == 1024 and nvlink_gen == "nvlink5.0":
+        # For this batch size and NVLink generation, compute latency exceeds gated-expert weight load latency for both Mixtral and DeepSeek-R1
+        moe_lat  = r[LATENCY_MOE] / 1e6
+    else:
+        # For others, gated-expert weight load latency exceeds compute latency
+        moe_lat  = (s[LATENCY_MOE] - (fc_sum + r[LATENCY_ATTEN] + r[LATENCY_COMM] - r[LATENCY_NON_MOE_DECODER])) / 1e6
+    # Communication
+    comm_lat = r[LATENCY_COMM] / 1e6
+    per_tok = fc_lat + attn_lat + moe_lat + comm_lat
+
+    print(f"\n>> {label} ({nvlink_gen}) latency (ms/token)")
+    print(f"   FC            : {fc_lat:.6f}")
+    print(f"   Attention     : {attn_lat:.6f}")
+    print(f"   MoE           : {moe_lat:.6f}")
+    print(f"   Communication : {comm_lat:.6f}")
+    print(f"   ---------------------------")
+    print(f"   Per token     : {per_tok:.6f}")
+
+    return per_tok
+
+
+def main():
+    for model_name, bs_list in EXPERIMENTS.items():
+        for bs in bs_list:
+            print("\n" + "="*60)
+            print(f" Experiment: model={model_name}, batch_size={bs}")
+            print("="*60)
+
+            input_sequence_length = 1024
+            update_configuration(model_name, bs, input_sequence_length)
+
+            # -----------------------------------------------------------------------------
+            # Configuration flags:
+            #   target_gpu (bool):
+            #     • True  – measure GPU compute latency and energy
+            #     • False – measure latency and energy for offloaded‐weight copying
+            #   offload_cpu (bool), offload_ssd (bool):
+            #     • offload_cpu=False and offload_ssd=False
+            #         – baseline (no offloading)
+            #     • offload_cpu=True
+            #         – gated‐expert weights are offloaded to CPU memory
+            #     • offload_ssd=True
+            #         – gated‐expert weights are offloaded to SSD
+            # -----------------------------------------------------------------------------
+
+            f_baseline = run_sim(target_gpu=True, offload_cpu=False, offload_ssd=False)
+            f_cpu_offload_gpu_compute = run_sim(target_gpu=True, offload_cpu=True,  offload_ssd=False)
+            f_cpu_offload_weight_copy = run_sim(target_gpu=False, offload_cpu=True,  offload_ssd=False)
+            # below, GPU and CPU-memory/SSD are connected with NVLink4.0
+            f_ssd_offload_gpu_compute_nvlink4 = run_sim(target_gpu=True, offload_cpu=False, offload_ssd=True, nvlink_gen=4)
+            f_ssd_offload_weight_copy_nvlink4 = run_sim(target_gpu=False, offload_cpu=False, offload_ssd=True, nvlink_gen=4)
+            # below, GPU and CPU-memory/SSD are connected with NVLink5.0
+            f_ssd_offload_gpu_compute_nvlink5 = run_sim(target_gpu=True, offload_cpu=False, offload_ssd=True, nvlink_gen=5)            
+            f_ssd_offload_weight_copy_nvlink5 = run_sim(target_gpu=False, offload_cpu=False, offload_ssd=True, nvlink_gen=5)
+
+            df_baseline = pd.read_csv(f_baseline)
+            df_cpu_offload_gpu_compute  = pd.read_csv(f_cpu_offload_gpu_compute)
+            df_cpu_offload_weight_copy  = pd.read_csv(f_cpu_offload_weight_copy)
+            df_ssd_offload_gpu_compute_nvlink4  = pd.read_csv(f_ssd_offload_gpu_compute_nvlink4)
+            df_ssd_offload_weight_copy_nvlink4  = pd.read_csv(f_ssd_offload_weight_copy_nvlink4)
+            df_ssd_offload_gpu_compute_nvlink5  = pd.read_csv(f_ssd_offload_gpu_compute_nvlink5)
+            df_ssd_offload_weight_copy_nvlink5  = pd.read_csv(f_ssd_offload_weight_copy_nvlink5)
+
+            real_bs = load_cfg()['serving']['max_batch_size']
+
+            latency_baseline = compute_latency_baseline("Baseline", df_baseline)
+            compute_latency_offload("Offloaded-case", "nvlink4.0", df_ssd_offload_gpu_compute_nvlink4, df_ssd_offload_weight_copy_nvlink4, real_bs)
+            latency_offload = compute_latency_offload("Offloaded-case", "nvlink5.0", df_ssd_offload_gpu_compute_nvlink5, df_ssd_offload_weight_copy_nvlink5, real_bs) 
+
+            compute_energy_baseline("Baseline", latency_baseline, df_baseline, real_bs)
+            compute_energy_offload("SSD", latency_offload, df_ssd_offload_gpu_compute_nvlink4, df_ssd_offload_weight_copy_nvlink4, real_bs) # SSD offload
+            compute_energy_offload("CPU", latency_offload, df_cpu_offload_gpu_compute, df_cpu_offload_weight_copy, real_bs) # CPU-memory offload
+    
+    print("\nAll experiments done.")
+
+if __name__ == "__main__":
+    main()
diff --git figure_6.py figure_6.py
new file mode 100755
index 0000000..95019c1
--- /dev/null
+++ figure_6.py
@@ -0,0 +1,257 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import subprocess
+import yaml
+import pandas as pd
+
+BASE_DIR     = os.path.dirname(os.path.abspath(__file__))
+CONFIG_FILE  = os.path.join(BASE_DIR, "build", "config.yaml")
+SIM_CMD      = [os.path.join(BASE_DIR, "build", "run")]
+
+# latency
+LATENCY_FC_COLS = [
+    "qkvgen", "q_down_proj", "kv_down_proj", "kr_proj",
+    "q_up_proj", "qr_proj", "kv_up_proj", "tr_k_up_proj",
+    "v_up_proj", "o_proj", "ffn", "shared_expert_ffn"
+]
+LATENCY_ATTEN = "atten_gen"
+LATENCY_MOE   = "expert_ffn"
+LATENCY_COMM  = "communication"
+
+# energy
+BASE = {
+    "fc_dram":         "fc_dram",
+    "fc_comp":         "fc_comp",
+    "ffn_dram":        "ffn_dram",
+    "ffn_comp":        "ffn_comp",
+    "shared_moe_hbm":  "shared_moe_hbm",
+    "shared_moe_comp": "shared_moe_comp",
+    "attn_dram":       "attn_dram",
+    "attn_comp":       "attn_comp",
+    "moe_hbm":         "moe_hbm",
+    "moe_comp":        "moe_comp",
+}
+OFFLOAD = "moe_offload"
+
+# batch size
+BATCH_SIZES = [1, 2, 3, 4]
+
+# system background power (Watt)
+# single H100 SXM 80GB GPU (includes HBM)
+# ignore the negligible background power of SSD (https://semiconductor.samsung.com/consumer-storage/internal-ssd/9100-pro/)
+# don't use CPU memory in this experiment
+BACKGROUND_POWER = 70
+
+# SSD energy‐scale values to sweep
+SSD_SCALES = [0.1]#1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]
+
+DISCARD_COLS = [
+    "non_MoE_decoders", "MoE_decoders", "qkvgen", "q_down_proj", "kv_down_proj", "kr_proj",
+    "q_up_proj", "qr_proj", "kv_up_proj", "tr_k_up_proj",
+    "v_up_proj", "atten_sum", "atten_gen", "o_proj",
+    "ffn", "shared_expert_ffn", "communication", "fc_dram",
+    "fc_comp", "attn_dram", "attn_comp", "ffn_dram", "ffn_comp",
+    "shared_moe_hbm", "shared_moe_comp", "moe_hbm", "moe_comp"
+]
+
+def load_cfg():
+    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
+        return yaml.safe_load(f)
+
+def write_cfg(cfg):
+    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
+        yaml.dump(cfg, f, sort_keys=False, allow_unicode=True)
+
+def update_configuration(model_name: str, batch_size: int, input_sequence_length: int):
+    cfg = load_cfg()
+    cfg['model']['model_name'] = model_name
+    cfg['serving']['max_batch_size'] = batch_size
+    cfg['simulation']['input_len'] = input_sequence_length
+    cfg['simulation']['output_len'] = 2 # the first decode stage after the prefill stage
+    cfg['simulation']['iter'] = 2
+
+    cfg['system']['num_node'] = 1
+    cfg['system']['num_device'] = 8
+    cfg['system']['distribution']['expert_tensor_degree'] = 1
+    cfg['system']['distribution']['none_expert_tensor_degree'] = 8
+    cfg['system']['optimization']['compressed_kv'] = False
+    cfg['system']['optimization']['use_absorb'] = False
+
+    # ensure offload flags default
+    cfg['system']['offload']['offload_expert_to_cpu_memory'] = False
+    cfg['system']['offload']['offload_expert_to_ssd']       = False
+    write_cfg(cfg)
+
+def set_ssd_scale(scale: float):
+    cfg = load_cfg()
+    cfg['system']['offload']['ssd_energy_scale'] = scale
+    write_cfg(cfg)
+
+def run_sim(target_gpu: bool, offload_cpu: bool, offload_ssd: bool, nvlink_gen: int = 5) -> str:
+    cfg = load_cfg()
+    cfg['system']['offload']['offload_expert_to_cpu_memory'] = offload_cpu
+    cfg['system']['offload']['offload_expert_to_ssd']       = offload_ssd
+    cfg['system']['offload']['collects_gpu_compute']        = target_gpu
+    cfg['system']['offload']['offload_bandwidth']           = nvlink_gen
+    write_cfg(cfg)
+
+    tag = "CPU_memory" if offload_cpu else "SSD" if offload_ssd else "baseline"
+    collect = "GPU_compute" if target_gpu else "offloaded_weight_copy"
+    print(f"\n--- Running [{tag}] ---")
+    simulation_working_dir = "./build"
+    proc = subprocess.run(SIM_CMD, cwd=simulation_working_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
+    if proc.returncode != 0:
+        print(proc.stdout, file=sys.stdout)
+        print(proc.stderr, file=sys.stderr)
+        sys.exit(f"ERROR: failed ({tag})")
+
+    # file name
+    m    = cfg['model']['model_name']
+    d    = cfg['simulation']['data']
+    nn   = cfg['system']['num_node']
+    nd   = cfg['system']['num_device']
+    ne_tp_dg = cfg["system"]["distribution"]["none_expert_tensor_degree"]
+    ne_dp_dg = int(nd * nn / ne_tp_dg)
+    bs   = cfg['serving']['max_batch_size']
+    od   = cfg['log']['output_directory']
+    fname = os.path.join(simulation_working_dir, od,
+        f"{m}_{d}_N{nn}_D{nd}_TP{ne_tp_dg}_DP{ne_dp_dg}_batchsize{bs}_{tag}_NVLink{nvlink_gen}_{collect}.csv")
+    if not os.path.isfile(fname):
+        sys.exit(f"ERROR: cannot find generated CSV: {fname}")
+    print(f"→ OK: {fname}")
+
+    if not target_gpu:
+        zero_out_columns_in_csv(fname)
+
+    return fname
+
+def zero_out_columns_in_csv(fname: str):
+    df = pd.read_csv(fname)
+    for col in DISCARD_COLS:
+        if col in df.columns:
+            df[col] = 0
+    df.to_csv(fname, index=False)
+
+def compute_energy_baseline(label: str, latency: float, df_base: pd.DataFrame, bs: int) -> float:
+    cfg = load_cfg()
+    num_tot_device = cfg['system']['num_node'] * cfg['system']['num_device']
+
+    r = df_base.loc[0]
+    # xx_off: (memory/storage access) off-chip memory access
+    # xx_on: (GPU-compute) on-chip memory & compute
+    fc_off   = (r[BASE["fc_dram"]] + r[BASE["ffn_dram"]] + r[BASE["shared_moe_hbm"]]) / 1e9
+    fc_on    = (r[BASE["fc_comp"]] + r[BASE["ffn_comp"]] + r[BASE["shared_moe_comp"]]) / 1e9
+    attn_off = r[BASE["attn_dram"]] / 1e9
+    attn_on  = r[BASE["attn_comp"]] / 1e9
+    moe_off  = r[BASE["moe_hbm"]] / 1e9
+    moe_on   = r[BASE["moe_comp"]] / 1e9
+    background   = num_tot_device * BACKGROUND_POWER * latency / 1e3
+    per_tok  = (fc_off + fc_on + attn_off + attn_on + moe_off + moe_on + background) / bs
+
+    print(f"\n>> {label} Energy (J/single decode stage)")
+    print(f"   FC off-chip      : {fc_off:.6f}")
+    print(f"   FC on-chip       : {fc_on:.6f}")
+    print(f"   Attn off-chip    : {attn_off:.6f}")
+    print(f"   Attn on-chip     : {attn_on:.6f}")
+    print(f"   MoE off-chip     : {moe_off:.6f}")
+    print(f"   MoE on-chip      : {moe_on:.6f}")
+    print(f"   System background: {background:.6f}")
+    print(f"   ---------------------------")
+    print(f"   Per token        : {per_tok:.6f} (÷ batch_size={bs})")
+
+    return per_tok
+
+def compute_energy_offload(label: str, latency: float, df_gpu: pd.DataFrame, df_offload: pd.DataFrame, bs: int) -> float:
+    cfg = load_cfg()
+    num_tot_device = cfg['system']['num_node'] * cfg['system']['num_device']
+
+    r, s = df_gpu.loc[0], df_offload.loc[0]
+    # xx_off: (memory/storage access) off-chip memory access
+    # xx_on: (GPU-compute) on-chip memory & compute
+    fc_off   = (r[BASE["fc_dram"]] + r[BASE["ffn_dram"]] + r[BASE["shared_moe_hbm"]]) / 1e9
+    fc_on    = (r[BASE["fc_comp"]] + r[BASE["ffn_comp"]] + r[BASE["shared_moe_comp"]]) / 1e9
+    attn_off = r[BASE["attn_dram"]] / 1e9
+    attn_on  = r[BASE["attn_comp"]] / 1e9
+    moe_off  = (r[BASE["moe_hbm"]] + s[OFFLOAD]) / 1e9
+    moe_on   = r[BASE["moe_comp"]] / 1e9
+    background   = num_tot_device * BACKGROUND_POWER * latency / 1e3
+    per_tok  = (fc_off + fc_on + attn_off + attn_on + moe_off + moe_on + background) / bs
+
+    print(f"\n>> {label}-offloaded case Energy (J/single decode stage)")
+    print(f"   FC off-chip      : {fc_off:.6f}")
+    print(f"   FC on-chip       : {fc_on:.6f}")
+    print(f"   Attn off-chip    : {attn_off:.6f}")
+    print(f"   Attn on-chip     : {attn_on:.6f}")
+    print(f"   MoE off-chip     : {moe_off:.6f}")
+    print(f"   MoE on-chip      : {moe_on:.6f}")
+    print(f"   System background: {background:.6f}")
+    print(f"   ---------------------------")
+    print(f"   Per token        : {per_tok:.6f} (÷ batch_size={bs})")
+
+    return per_tok
+
+def compute_latency_baseline(df_base: pd.DataFrame) -> float:
+    r = df_base.loc[0]
+    # FC
+    fc_sum = sum(r[col] for col in LATENCY_FC_COLS)
+    fc_lat = fc_sum / 1e6
+    # Attention
+    attn_lat = r[LATENCY_ATTEN] / 1e6
+    # MoE
+    moe_lat  = r[LATENCY_MOE] / 1e6
+    # Communication
+    comm_lat = r[LATENCY_COMM] / 1e6
+    per_tok = fc_lat + attn_lat + moe_lat + comm_lat
+
+    return per_tok
+
+def compute_latency_offload(df_offload: pd.DataFrame) -> float:
+    s = df_offload.loc[0]
+    # gated-expert weight load latency exceeds compute latency
+    moe_lat  = s[LATENCY_MOE] / 1e6
+    per_tok = moe_lat
+
+    return per_tok
+
+def main():
+    for bs in BATCH_SIZES:
+        print("\n" + "="*60)
+        print(f"### Batch size = {bs} ###")
+        print("="*60)
+
+        input_sequence_length = 1024
+        # llama3_70B (baseline)
+        update_configuration("llama3_70B", bs, input_sequence_length)
+        real_bs = load_cfg()['serving']['max_batch_size']
+
+        f_baseline = run_sim(target_gpu=True, offload_cpu=False, offload_ssd=False)
+        df_baseline = pd.read_csv(f_baseline)
+        latency_llama3 = compute_latency_baseline(df_baseline)
+        energy_llama3 = compute_energy_baseline("llama3_70B Baseline", latency_llama3, df_baseline, real_bs)
+
+        # llama4_maverick (SSD-offloading)
+        print("-"*60)
+        update_configuration("llama4_maverick", bs, input_sequence_length)
+        f_ssd_gpu_compute = run_sim(target_gpu=True, offload_cpu=False, offload_ssd=True, nvlink_gen=5)
+        df_ssd_gpu = pd.read_csv(f_ssd_gpu_compute)
+        
+        for scale in SSD_SCALES:
+            print("-"*60)
+            set_ssd_scale(scale)
+            ssd_read_energy = 102.4 * scale
+            print(f"\n>>> ssd_energy_scale = {scale} ({ssd_read_energy:.1f}pJ/b)")
+
+            f_ssd_weight_copy = run_sim(target_gpu=False, offload_cpu=False, offload_ssd=True, nvlink_gen=5)
+            df_ssd_offload = pd.read_csv(f_ssd_weight_copy)
+            latency_llama4 = compute_latency_offload(df_ssd_offload)
+            energy_llama4 = compute_energy_offload("llama4_maverick SSD", latency_llama4, df_ssd_gpu, df_ssd_offload, real_bs)
+
+            ratio = energy_llama4 / energy_llama3 if energy_llama3 > 0 else 0.0
+            print(f"\n>>> Energy ratio (llama4_maverick / llama3_70B) at batch size {bs} = {ratio:.3f}\n")
+
+    print("\nAll experiments done.")
+
+if __name__ == "__main__":
+    main()
diff --git log/cmd_hbm3.log.ch0 log/cmd_hbm3.log.ch0
new file mode 100644
index 0000000..e69de29
diff --git script/edap.sh script/edap.sh
new file mode 100755
index 0000000..c6ec2bc
--- /dev/null
+++ script/edap.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+MAX_CORE=30
+
+
+OUTPUT_DIR="../data/edap"
+
+rm -rf run__.sh
+
+mkdir -p ${OUTPUT_DIR}
+
+echo "../build/edap ${OUTPUT_DIR}" >> run__.sh
+
+./run_multiprog.py --process ${MAX_CORE} --script run__.sh
+rm -rf run__.sh
diff --git script/pinball_config.yaml script/pinball_config.yaml
new file mode 100644
index 0000000..f338f59
--- /dev/null
+++ script/pinball_config.yaml
@@ -0,0 +1,31 @@
+Frontend:
+  impl: PIMController
+  clock_ratio: 1
+  path: example_inst.trace 
+
+MemorySystem:
+  impl: PIMDRAMSystem
+  clock_ratio: 1
+
+  DRAM:
+    impl: HBM3
+    org:
+      preset: HBM3_16Gb_2R
+      channel: 1
+      rank: 2
+    timing:
+      preset: HBM3_5.2Gbps
+
+  Controller:
+    impl: PIM_DRAM_controller
+    Scheduler:
+      impl: PIM_Scheduler
+    RefreshManager:
+      impl: AllBank
+#    plugins:
+#    - ControllerPlugin:
+#        impl: TraceRecorder
+#        path: log/cmd.log
+
+  AddrMapper:
+    impl: RoBaRaCoCh
diff --git script/run_multiprog.py script/run_multiprog.py
new file mode 100755
index 0000000..80b3dea
--- /dev/null
+++ script/run_multiprog.py
@@ -0,0 +1,109 @@
+#!/usr/bin/python3
+
+from optparse import OptionParser
+import sys, re, string, time, os
+from subprocess import Popen
+from datetime import datetime
+
+def getcmd(cmd_list, simscript):
+  try:
+    script = open(simscript,'r')
+  except IOError:
+    print ("cannot open " + options.simscript)
+    sys.exit()
+
+  for line in script:
+    line = re.sub('#.*', '', line)
+    if len(line) > 2:
+      line=line[:-1]
+      cmd_list.append(line)
+
+def check_va_randomize():
+  va_flag = "/proc/sys/kernel/randomize_va_space"
+  try:
+    f = open(va_flag,'rt')
+  except IOError:
+    print ("cannot open " + va_flag)
+
+  flag = re.split("\s*",f.readline())
+  if flag[0] != "0":
+    print ("Set %s 0"%(va_flag))
+    print ("cmd echo 0 > %s"%(va_flag))
+    print ("sudo sh -c \"echo 0 > /proc/sys/kernel/randomize_va_space\" ")
+#    sys.exit(1)
+    print ("for now, it is allowed to run yet")
+
+usage = "usage: %prog [options]"
+parser = OptionParser(usage)
+parser.add_option("--process", action = "store", type="int", default=4, dest="process", help="maximum active process, default = 4")
+parser.add_option("--script", action = "store", type="string", default="/dev/null", dest="simscript", help="cmd list")
+
+(options, args) = parser.parse_args()
+
+active_processes = []
+cmd_list = []
+
+check_va_randomize()
+getcmd(cmd_list, options.simscript)
+
+
+#create log dir if it is not exist
+host = os.uname()[1]
+now = str(datetime.now())
+t = re.split("\s*",now)
+t1 = re.split("\.",t[1])
+t1 = re.split(":",t1[0])
+if not os.path.exists("/scale/cal/home/jhpark/log/%s"%t[0]):
+  os.makedirs("/scale/cal/home/jhpark/log/%s"%t[0])
+#log = open(logfile, 'w')
+script = os.path.abspath(options.simscript)
+#log.write("Simulation Start: %s with %d processes\n"%(now, options.process))
+#log.write("Script: %s\n\n"%(script))
+#log.close()
+
+cmd_list.reverse()
+# first, check if we have enough processes
+# for process in active_processes:
+while True:
+  try:
+    for process in active_processes[:]:
+     if process.poll() != None:
+       active_processes.remove(process)
+       finish = "Process [pid = " + str(process.pid) + "] finished"
+       #log = open(logfile,'a')
+       #log.write(finish + "\n")
+       #log.close()
+       print (finish)
+
+    while len(active_processes) < options.process:
+      if len(cmd_list) != 0:
+        cmd=cmd_list.pop()
+        #log = open(logfile, 'a')
+        #log.write("started -- " + cmd + "\n")
+        #log.close()
+      else:
+        break
+      active_processes.append(Popen([cmd], shell=True))
+      print ("Process [pid = "+str(active_processes[-1].pid)+"] started -- " + cmd)
+
+    time.sleep(1)
+
+    if len(active_processes) == 0:
+      break
+
+  except KeyboardInterrupt:
+    os.killpg(os.getpgrp(), 9)
+    for process in active_processes:
+      kill = "Process [pid = " + str(process.pid) + "] killed"
+      #log = open(logfile, 'a')
+      #log.write(kill + "\n")
+      #log.close()
+      print (kill)
+      os.kill(process.pid, 9)
+    sys.exit()
+
+#log = open(logfile, 'a')
+end = str(datetime.now())
+#log.write("\nSimulation End: %s\n"%(end))
+#log.close()
+sys.exit()
diff --git script/sum_gen_split.sh script/sum_gen_split.sh
new file mode 100755
index 0000000..2c86110
--- /dev/null
+++ script/sum_gen_split.sh
@@ -0,0 +1,52 @@
+#!/bin/bash
+
+MAX_CORE=32
+
+
+OUTPUT_DIR="../data/sum_gen_split"
+
+rm -rf run__.sh
+
+mkdir -p ${OUTPUT_DIR}
+
+for MODEL in "mixtral"
+do
+  for DATA in "synthesis"
+  do
+    for HARDWARE in "GPU" 
+    do
+      for DEVICE_NUM in 2
+      do
+        for MAX_BATCHSIZE in 64
+        do
+          for MAX_PROCESS_TOKEN in 0
+          do
+            for INPUT_LEN in 1024
+            do
+              for OUTPUT_LEN in 16 64 256 1024 4096
+              do
+                for ITER in 5000
+                do
+                  for INJECTION_RATE in 0 1 2 4 8 16
+                  do
+                    for NUM_NODE in 1
+                    do
+                      for PARALLEL_EXECUTION in 0
+                      do
+                          echo "../build/sum_gen_split ${MODEL} ${DATA} ${HARDWARE} ${DEVICE_NUM} ${OUTPUT_DIR} ${MAX_BATCHSIZE} ${INPUT_LEN} ${OUTPUT_LEN} ${MAX_PROCESS_TOKEN} ${INJECTION_RATE} ${ITER} 1 1 ${PARALLEL_EXECUTION}" >> run__.sh
+                  
+                      done
+                    done
+                  done
+                done
+              done
+            done
+          done
+        done
+      done
+    done
+  done
+done
+
+./run_multiprog.py --process ${MAX_CORE} --script run__.sh
+rm -rf run__.sh
diff --git script/test_stat.sh script/test_stat.sh
new file mode 100755
index 0000000..156ecac
--- /dev/null
+++ script/test_stat.sh
@@ -0,0 +1,46 @@
+#!/bin/bash
+
+MAX_CORE=30
+
+
+OUTPUT_DIR="../data/latency"
+# OUTPUT_DIR="../data/latency/not_ramul"
+
+rm -rf run__.sh
+
+mkdir -p ${OUTPUT_DIR}
+
+for MODEL in mixtral
+do
+  for DATA in "synthesis"
+  do
+    for HARDWARE in "GPU"
+    do
+      for DEVICE_NUM in 4
+      do
+        for MAX_BATCHSIZE in 64
+        do
+          for MAX_PROCESS_TOKEN in 0
+          do
+            for INPUT_LEN in 4096
+            do
+              for OUTPUT_LEN in 512
+              do
+                for INJECTION_RATE in 0
+                do
+                  for ITER in 1000
+                  do
+                    echo "../build/stat-export ${MODEL} ${DATA} ${HARDWARE} ${DEVICE_NUM} ${OUTPUT_DIR} ${MAX_BATCHSIZE} ${INPUT_LEN} ${OUTPUT_LEN} ${MAX_PROCESS_TOKEN} ${INJECTION_RATE} ${ITER}" >> run__.sh
+                  done
+                done
+              done
+            done
+          done
+        done
+      done
+    done
+  done
+done
+
+./run_multiprog.py --process ${MAX_CORE} --script run__.sh
+rm -rf run__.sh
diff --git script/time_breakdown.sh script/time_breakdown.sh
new file mode 100755
index 0000000..731d471
--- /dev/null
+++ script/time_breakdown.sh
@@ -0,0 +1,30 @@
+#!/bin/bash
+
+MAX_CORE=30
+
+
+OUTPUT_DIR="../data/latency"
+
+rm -rf run__.sh
+
+mkdir -p ${OUTPUT_DIR}
+
+for MODEL in mixtral
+do
+  for DATA in GSM ShareGPT Alpaca HellaSwag
+  do
+    for HARDWARE in "GPU" "LOGIC" "GPU+LOGIC"
+    do
+      for DEVICE_NUM in 2 4
+      do
+        for ITER in 100
+        do
+          echo "../build/timebreakdown-export ${MODEL} ${DATA} ${HARDWARE} ${DEVICE_NUM} ${OUTPUT_DIR} ${ITER}" >> run__.sh
+        done
+      done
+    done
+  done
+done
+
+./run_multiprog.py --process ${MAX_CORE} --script run__.sh
+rm -rf run__.sh
diff --git src/dram/CMakeLists.txt src/dram/CMakeLists.txt
index 8d3f471..1161146 100644
--- src/dram/CMakeLists.txt
+++ src/dram/CMakeLists.txt
@@ -2,6 +2,7 @@ add_library(dram STATIC)
 
 add_subdirectory(pimkernel)
 add_subdirectory(ramulator2)
+#add_dependencies(dram ramulator)
 
 target_sources(
   dram PRIVATE
@@ -11,4 +12,29 @@ target_sources(
   pim_request.cpp
   memory_object.cpp
   mmap_controller.cpp
-)
\ No newline at end of file
+)
+
+# target_link_libraries(
+#   dram 
+#   PRIVATE ramulator
+#   PRIVATE pimkernel
+# )
+
+add_executable(dram-test)
+target_sources(
+  dram-test
+  PRIVATE test.cpp
+)
+
+target_link_libraries(
+  dram-test
+  PRIVATE llm_system
+)
+
+set_target_properties(
+  dram-test
+  PROPERTIES
+  OUTPUT_NAME dram-test
+  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
diff --git src/dram/pimkernel/CMakeLists.txt src/dram/pimkernel/CMakeLists.txt
index 7690072..bd393b1 100644
--- src/dram/pimkernel/CMakeLists.txt
+++ src/dram/pimkernel/CMakeLists.txt
@@ -7,6 +7,20 @@ target_sources(
   Read.cpp
   Write.cpp
   GEMV.cpp
+  # pimkernel/Move.cpp
+  # pimkernel/Mult.cpp
+  # pimkernel/Add.cpp
+  # pimkernel/MAD.cpp
+  # pimkernel/PMult.cpp
+  # pimkernel/CMult.cpp
+  # pimkernel/CAdd.cpp
+  # pimkernel/CMAD.cpp
+  # pimkernel/Tensor.cpp
+  # pimkernel/Tensor_Square.cpp
+  # pimkernel/ModUp_Evkmult.cpp
+  # pimkernel/ModDownEpilogue.cpp
+  # pimkernel/PMult_Accum.cpp
+  # pimkernel/CMult_Accum.cpp
 )
 
 
diff --git src/dram/pimkernel/heean/Add.cpp src/dram/pimkernel/heean/Add.cpp
new file mode 100644
index 0000000..69ca7a8
--- /dev/null
+++ src/dram/pimkernel/heean/Add.cpp
@@ -0,0 +1,58 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void Add_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                DRAMRequest::PIM_Operand& operand,
+                const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer / num_dest;
+
+  assertTrue(src.size() == 2, "Add operands are not valid");
+  assertTrue(dest.size() == 1, "Mult destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // read a1
+    // b = a1 + a2
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/CAdd.cpp src/dram/pimkernel/heean/CAdd.cpp
new file mode 100644
index 0000000..a8bea9b
--- /dev/null
+++ src/dram/pimkernel/heean/CAdd.cpp
@@ -0,0 +1,57 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void CAdd_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                 DRAMRequest::PIM_Operand& operand,
+                 const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer / num_dest;
+
+  assertTrue(src.size() == 1, "CAdd operands are not valid");
+  assertTrue(dest.size() == 1, "CAdd destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // b = a1 + c
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kAdd,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/CMAD.cpp src/dram/pimkernel/heean/CMAD.cpp
new file mode 100644
index 0000000..fbe8e2a
--- /dev/null
+++ src/dram/pimkernel/heean/CMAD.cpp
@@ -0,0 +1,60 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void CMAD_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                 DRAMRequest::PIM_Operand& operand,
+                 const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int dnum = src.size();
+  int evk_size = dest.size();
+
+  int mde_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer;
+
+  assertTrue(src.size() == 2, "CMAD operands are not valid");
+  assertTrue(dest.size() == 1, "Mult destinations are not valid");
+
+  // loop for read Modup to RF
+  for (int chunk_idx = 0; chunk_idx < mde_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // b = a1 * c
+    // b += a2
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, mde_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, mde_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kDRAM2RF,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/CMult.cpp src/dram/pimkernel/heean/CMult.cpp
new file mode 100644
index 0000000..44f1a90
--- /dev/null
+++ src/dram/pimkernel/heean/CMult.cpp
@@ -0,0 +1,57 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void CMult_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                  DRAMRequest::PIM_Operand& operand,
+                  const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer / num_dest;
+
+  assertTrue(src.size() == 1, "CMult operands are not valid");
+  assertTrue(dest.size() == 1, "CMult destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // b = a1 * c
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/CMult_Accum.cpp src/dram/pimkernel/heean/CMult_Accum.cpp
new file mode 100644
index 0000000..1d7a76d
--- /dev/null
+++ src/dram/pimkernel/heean/CMult_Accum.cpp
@@ -0,0 +1,84 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void CMult_Accum_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                        DRAMRequest::PIM_Operand& operand,
+                        const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_x = src.size() / 2;
+  int num_dest = dest.size();
+
+  int num_chunk = (src[0]->GetAddress()).num_chunks_;
+
+  // assertTrue(src.size() == 2, "PMult Accum operands are not valid");
+  assertTrue(src.size() % 2 == 0, "CMult Accum operands are not valid");
+  assertTrue(dest.size() == 2, "CMult Accum destinations are not valid");
+
+  // the number of chunks which can be buffered
+  int num_chunk_in_buffer = total_buffer / (num_dest);
+  int max_num_x_in_buffer = std::min(total_buffer - num_dest, num_x);
+  num_chunk_in_buffer = std::max(num_chunk_in_buffer, 1);
+
+  // std::next(buffer.begin(), std::min(max_size, buffer.size())
+  // loop for read Modup to RF
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    for (int x_idx = 0; x_idx < num_x; x_idx += max_num_x_in_buffer) {
+      for (int x_inner_idx = 0;
+           x_inner_idx < std::min(max_num_x_in_buffer, num_x - x_idx);
+           x_inner_idx++) {
+        for (int rf_inner_idx = 0;
+             rf_inner_idx <
+             std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+             rf_inner_idx++) {
+          Limb::Ptr opnd_b = src[2 * (x_idx + x_inner_idx)];
+
+          addr_vec[4] = opnd_b->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd_b->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                            PIMOperandType::kSrc, addr_vec,
+                                            &pim_request, dramreq_type));
+        }
+      }
+      for (int x_inner_idx = 0;
+           x_inner_idx < std::min(max_num_x_in_buffer, num_x - x_idx);
+           x_inner_idx++) {
+        // read a1
+        for (int rf_inner_idx = 0;
+             rf_inner_idx <
+             std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+             rf_inner_idx++) {
+          Limb::Ptr opnd_a = src[2 * (x_idx + x_inner_idx) + 1];
+
+          addr_vec[4] = opnd_a->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd_a->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                            PIMOperandType::kSrc, addr_vec,
+                                            &pim_request, dramreq_type));
+        }
+      }
+    }
+    for (auto des_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = des_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = des_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kDest, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/MAD.cpp src/dram/pimkernel/heean/MAD.cpp
new file mode 100644
index 0000000..bbb9c86
--- /dev/null
+++ src/dram/pimkernel/heean/MAD.cpp
@@ -0,0 +1,59 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void MAD_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                DRAMRequest::PIM_Operand& operand,
+                const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer / num_dest;
+
+  assertTrue(src.size() == 3, "MAD operands are not valid");
+  assertTrue(dest.size() == 1, "MAD destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // read a1
+    // b = a1 * a2
+    // b += a3
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/ModDownEpilogue.cpp src/dram/pimkernel/heean/ModDownEpilogue.cpp
new file mode 100644
index 0000000..4098d43
--- /dev/null
+++ src/dram/pimkernel/heean/ModDownEpilogue.cpp
@@ -0,0 +1,58 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void ModDownEpilogue_kernel(PIMRequest& pim_request,
+                            DRAMRequestType dramreq_type,
+                            DRAMRequest::PIM_Operand& operand,
+                            const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int dnum = src.size();
+  int evk_size = dest.size();
+
+  int mde_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer;
+
+  // loop for read Modup to RF
+  for (int chunk_idx = 0; chunk_idx < mde_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // b = a1 * c1 + a2 + a3
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, mde_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, mde_chunk - chunk_idx);
+           rf_inner_idx++) {
+        // b = a1 * c1 + a2 + a3
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/ModUp_Evkmult.cpp src/dram/pimkernel/heean/ModUp_Evkmult.cpp
new file mode 100644
index 0000000..732fed0
--- /dev/null
+++ src/dram/pimkernel/heean/ModUp_Evkmult.cpp
@@ -0,0 +1,100 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void ModUp_Evkmult_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                          DRAMRequest::PIM_Operand& operand,
+                          const PIMHWConfig pim_hw_config) {
+  // const int num_modup_buffer = 8;  // number of buffer, each holds 256-bit
+  // const int num_accum_buffer = 8;  // twice for total accum buffer
+  const int total_buffer = pim_hw_config.num_buffer;
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto precomputed = get_operand(operand, PIMOperandType::kPrecomputed);
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_dnum = src.size();
+  int num_dest = dest.size();
+
+  int num_chunk = (src[0]->GetAddress()).num_chunks_;
+
+  // assertTrue(src.size() == 2, "ModUp_Evkmult operands are not valid");
+  // assertTrue(num_dnum * 3 < total_buffer,
+  //            "ModUp_Evkmult may results invalid value");
+  assertTrue(precomputed.size() == 2 * num_dnum,
+             "ModUp_Evkmult operands are not valid");
+  assertTrue(dest.size() == 2, "ModUp_Evkmult destinations are not valid");
+
+  // the number of chunks which can be buffered
+  int num_chunk_in_buffer = total_buffer / (num_dnum + num_dest);
+  int max_num_dnum_in_buffer = std::min(total_buffer - num_dest, num_dnum);
+  num_chunk_in_buffer = std::max(num_chunk_in_buffer, 1);
+
+  // loop for read Modup to RF
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    for (int dnum_idx = 0; dnum_idx < num_dnum;
+         dnum_idx += max_num_dnum_in_buffer) {
+      for (int dnum_inner_idx = 0;
+           dnum_inner_idx <
+           std::min(max_num_dnum_in_buffer, num_dnum - dnum_idx);
+           dnum_inner_idx++) {
+        for (int rf_inner_idx = 0;
+             rf_inner_idx <
+             std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+             rf_inner_idx++) {
+          Limb::Ptr opnd = src[dnum_idx + dnum_inner_idx];
+          addr_vec[4] = opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(PIMCommand(PIMCommandType::kDRAM2RF,
+                                            PIMOperandType::kModUp, addr_vec,
+                                            &pim_request, dramreq_type));
+        }
+      }
+    }
+    for (int dnum_idx = 0; dnum_idx < num_dnum;
+         dnum_idx += max_num_dnum_in_buffer) {
+      for (int dnum_inner_idx = 0;
+           dnum_inner_idx <
+           std::min(max_num_dnum_in_buffer, num_dnum - dnum_idx);
+           dnum_inner_idx++) {
+        for (int rf_inner_idx = 0;
+             rf_inner_idx <
+             std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+             rf_inner_idx++) {
+          Limb::Ptr opnd = precomputed[(dnum_idx + dnum_inner_idx) * 2];
+
+          addr_vec[4] = opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                            PIMOperandType::kEvk, addr_vec,
+                                            &pim_request, dramreq_type));
+
+          opnd = precomputed[dnum_inner_idx * 2 + 1];
+          addr_vec[4] = opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                            PIMOperandType::kEvk, addr_vec,
+                                            &pim_request, dramreq_type));
+        }
+      }
+    }
+    for (auto des_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = des_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = des_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kDest, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/Move.cpp src/dram/pimkernel/heean/Move.cpp
new file mode 100644
index 0000000..3790a97
--- /dev/null
+++ src/dram/pimkernel/heean/Move.cpp
@@ -0,0 +1,57 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void Move_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                 DRAMRequest::PIM_Operand& operand,
+                 const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer / num_dest;
+
+  assertTrue(src.size() == 1, "Move operands are not valid");
+  assertTrue(dest.size() == 1, "Move destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // read a1
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/Mult.cpp src/dram/pimkernel/heean/Mult.cpp
new file mode 100644
index 0000000..dc22e19
--- /dev/null
+++ src/dram/pimkernel/heean/Mult.cpp
@@ -0,0 +1,58 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void Mult_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                 DRAMRequest::PIM_Operand& operand,
+                 const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer / num_dest;
+
+  assertTrue(src.size() == 2, "Mult operands are not valid");
+  assertTrue(dest.size() == 1, "Mult destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // read a1
+    // b = a1 * a2
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/PMult.cpp src/dram/pimkernel/heean/PMult.cpp
new file mode 100644
index 0000000..430f6c9
--- /dev/null
+++ src/dram/pimkernel/heean/PMult.cpp
@@ -0,0 +1,75 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void PMult_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                  DRAMRequest::PIM_Operand& operand,
+                  const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto precomputed = get_operand(operand, PIMOperandType::kPrecomputed);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_precomputed = precomputed.size();
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  const int num_chunk_in_buffer = total_buffer / (num_precomputed + num_dest);
+
+  assertTrue(src.size() == 2, "PMult operands are not valid");
+  assertTrue(precomputed.size() == 1, "PMult operands are not valid");
+  assertTrue(dest.size() == 2, "PMult destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // read precomputed
+    for (auto prc_opnd : precomputed) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = prc_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = prc_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(
+            PIMCommand(PIMCommandType::kDRAM2RF, PIMOperandType::kPrecomputed,
+                       addr_vec, &pim_request, dramreq_type));
+      }
+    }
+
+    // a = a1 * p
+    // b = b1 * p
+    for (auto src_opnd : src) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                          PIMOperandType::kSrc, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+
+    // write b to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/PMult_Accum.cpp src/dram/pimkernel/heean/PMult_Accum.cpp
new file mode 100644
index 0000000..6ed45e6
--- /dev/null
+++ src/dram/pimkernel/heean/PMult_Accum.cpp
@@ -0,0 +1,103 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void PMult_Accum_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                        DRAMRequest::PIM_Operand& operand,
+                        const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto precomputed = get_operand(operand, PIMOperandType::kPrecomputed);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_x = precomputed.size();
+  int num_dest = dest.size();
+
+  int num_chunk = (src[0]->GetAddress()).num_chunks_;
+
+  // assertTrue(src.size() == 2, "PMult Accum operands are not valid");
+  assertTrue(src.size() == 2 * precomputed.size(),
+             "PMult Accum operands are not valid");
+  assertTrue(dest.size() == 2, "PMult Accum destinations are not valid");
+
+  // the number of chunks which can be buffered
+  int num_chunk_in_buffer = total_buffer / (num_x + num_dest);
+  int max_num_x_in_buffer = std::min(total_buffer - num_dest, num_x);
+  num_chunk_in_buffer = std::max(num_chunk_in_buffer, 1);
+
+  // std::next(buffer.begin(), std::min(max_size, buffer.size())
+  // loop for read Modup to RF
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    for (int x_idx = 0; x_idx < num_x; x_idx += max_num_x_in_buffer) {
+      // read precomputed to RF
+      for (int x_inner_idx = 0;
+           x_inner_idx < std::min(max_num_x_in_buffer, num_x - x_idx);
+           x_inner_idx++) {
+        for (int rf_inner_idx = 0;
+             rf_inner_idx <
+             std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+             rf_inner_idx++) {
+          Limb::Ptr opnd = precomputed.at(x_idx + x_inner_idx);
+          addr_vec[4] = opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(
+              PIMCommand(PIMCommandType::kDRAM2RF, PIMOperandType::kPrecomputed,
+                         addr_vec, &pim_request, dramreq_type));
+        }
+      }
+      for (int x_inner_idx = 0;
+           x_inner_idx < std::min(max_num_x_in_buffer, num_x - x_idx);
+           x_inner_idx++) {
+        for (int rf_inner_idx = 0;
+             rf_inner_idx <
+             std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+             rf_inner_idx++) {
+          Limb::Ptr opnd_b = src.at((x_idx + x_inner_idx) * 2);
+
+          addr_vec[4] = opnd_b->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd_b->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                            PIMOperandType::kSrc, addr_vec,
+                                            &pim_request, dramreq_type));
+        }
+      }
+
+      for (int x_inner_idx = 0;
+           x_inner_idx < std::min(max_num_x_in_buffer, num_x - x_idx);
+           x_inner_idx++) {
+        for (int rf_inner_idx = 0;
+             rf_inner_idx <
+             std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+             rf_inner_idx++) {
+          Limb::Ptr opnd_a = src.at((x_idx + x_inner_idx) * 2 + 1);
+
+          addr_vec[4] = opnd_a->GetRowAddr(chunk_idx + rf_inner_idx);
+          addr_vec[5] = opnd_a->GetColAddr(chunk_idx + rf_inner_idx);
+          pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                            PIMOperandType::kSrc, addr_vec,
+                                            &pim_request, dramreq_type));
+        }
+      }
+    }
+
+    for (auto des_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = des_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = des_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kDest, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/Tensor.cpp src/dram/pimkernel/heean/Tensor.cpp
new file mode 100644
index 0000000..0b67c26
--- /dev/null
+++ src/dram/pimkernel/heean/Tensor.cpp
@@ -0,0 +1,134 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void Tensor_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                   DRAMRequest::PIM_Operand& operand,
+                   const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_src = src.size();
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  // a1, a2, b2, a, b, aux is buffered
+  // input limbs : (b1, a1, b2, a2)
+  const int num_chunk_in_buffer = total_buffer / (num_src + num_dest - 1);
+
+  assertTrue(src.size() == 4, "Tensor operands are not valid");
+  assertTrue(dest.size() == 3, "Tensor destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // read a1
+    // read a2
+    // read b2
+    // a = a1 * b2 (read b2 from DRAM)
+    // a += b1 * a2 (read b1 from DRAM)
+    // b = b1 * b2 (read b1 from DRAM)
+    // aux = a1 * a2 (no read from DRAM)
+    // write a, b, aux to DRAM
+
+    // read a1
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[1];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kDRAM2RF,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // read a2
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[3];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kDRAM2RF,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // read b2
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[2];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kDRAM2RF,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // a = a1 * b2 (read b2 from DRAM)
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[2];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // a += b1 * a2 (read b1 from DRAM)
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[0];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMAC,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // b = b1*b2 (read b1 from DRAM)
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[0];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // aux = a1 * a2 (no read from DRAM, just dummy)
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[0];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // write a, b, aux to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/pimkernel/heean/Tensor_Square.cpp src/dram/pimkernel/heean/Tensor_Square.cpp
new file mode 100644
index 0000000..620923e
--- /dev/null
+++ src/dram/pimkernel/heean/Tensor_Square.cpp
@@ -0,0 +1,95 @@
+#include <dram/dram_interface.h>
+#include <dram/pim_kernel.h>
+
+namespace llm_system {
+namespace PIM_KERNEL {
+
+void Tensor_Square_kernel(PIMRequest& pim_request, DRAMRequestType dramreq_type,
+                          DRAMRequest::PIM_Operand& operand,
+                          const PIMHWConfig pim_hw_config) {
+  const int total_buffer = pim_hw_config.num_buffer;
+
+  Ramulator::AddrVec_t addr_vec = {0, 0, 0, 0, 0, 0};
+
+  auto src = get_operand(operand, PIMOperandType::kSrc);
+  auto dest = get_operand(operand, PIMOperandType::kDest);
+
+  int num_src = src.size();
+  int num_dest = dest.size();
+
+  int num_chunk = (dest[0]->GetAddress()).num_chunks_;
+
+  // the number of chunks which can be buffered
+  // b1, a1 is buffered
+  // input limbs : (b1, a1)
+  const int num_chunk_in_buffer = total_buffer / (num_src + num_dest);
+
+  assertTrue(src.size() == 2, "Tensor_Square operands are not valid");
+  assertTrue(dest.size() == 3, "Tensor_Square destinations are not valid");
+
+  for (int chunk_idx = 0; chunk_idx < num_chunk;
+       chunk_idx += num_chunk_in_buffer) {
+    // read a1
+    // aux = a1 * a1 (read a1 from DRAM)
+    // read b1
+    // b = b1 * b1 (read b1 from DRAM)
+    // a = 2 * b1 (read b1 from DRAM)
+    // a *= a1 (no read from DRAM)
+    // write a, b, aux to DRAM
+
+    // read a1
+    // aux = a1 * a1 (read a1 from DRAM)
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[1];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kDRAM2RF,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+    // read b1
+    // b = b1 * b1 (read b1 from DRAM)
+    // a = 2 * b1 (read b1 from DRAM)
+    // a *= a1 (no read from DRAM)
+    for (int rf_inner_idx = 0;
+         rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+         rf_inner_idx++) {
+      Limb::Ptr src_opnd = src[0];
+      addr_vec[4] = src_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+      addr_vec[5] = src_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kDRAM2RF,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+      pim_request.AddCommand(PIMCommand(PIMCommandType::kMult,
+                                        PIMOperandType::kSrc, addr_vec,
+                                        &pim_request, dramreq_type));
+    }
+
+    // write a, b, aux to DRAM
+    for (auto dest_opnd : dest) {
+      for (int rf_inner_idx = 0;
+           rf_inner_idx < std::min(num_chunk_in_buffer, num_chunk - chunk_idx);
+           rf_inner_idx++) {
+        addr_vec[4] = dest_opnd->GetRowAddr(chunk_idx + rf_inner_idx);
+        addr_vec[5] = dest_opnd->GetColAddr(chunk_idx + rf_inner_idx);
+        pim_request.AddCommand(PIMCommand(PIMCommandType::kRF2DRAM,
+                                          PIMOperandType::kRF, addr_vec,
+                                          &pim_request, dramreq_type));
+      }
+    }
+  }
+}
+
+}  // namespace PIM_KERNEL
+}  // namespace llm_system
\ No newline at end of file
diff --git src/dram/power.h src/dram/power.h
index 7d2f0f1..5710468 100644
--- src/dram/power.h
+++ src/dram/power.h
@@ -32,7 +32,7 @@ struct DramEnergy {
 // for example, energy for Read operation in HBM2E is 3.48 (= 0.44 + 1.01 + 1.23 + 0.5 + 0.3) pJ/b
 // and HBM's granularity is 32Byte (256bit), so we multiply 256 and divide it by 1000 to get nJ (= 3.48 * 256 / 1000 = 0.8912 nJ)
 
-static DramEnergy gpuEnergy{0.909, 0.891, 0.891, 0, 0, 0, 0.46 / 2 / 1000};
+static DramEnergy gpuEnergy{0.909, 0.891, 0.891, 0, 0, 0, 0.32 / 2 / 1000};  // 0.32 for bf16 GPU MAC, reference: Ten Lessons From Three Generations Shaped Google’s TPUv4i (ISCA'21)
 
 static DramEnergy logicEnergy{0.909,     0.464,     0.464,
                               0.909 * 8, 0.464 * 8, 0.464 * 8, 0.46 / 2 / 1000};  // X4
diff --git src/hardware/CMakeLists.txt src/hardware/CMakeLists.txt
index 47a22e6..497a6e4 100644
--- src/hardware/CMakeLists.txt
+++ src/hardware/CMakeLists.txt
@@ -1,5 +1,7 @@
 add_library(hardware OBJECT)
 
+target_link_libraries(hardware PUBLIC yaml-cpp::yaml-cpp)
+
 target_sources(
     hardware PRIVATE
 
@@ -14,4 +16,15 @@ target_sources(
     attention_sum_impl.cpp
     attention_gen_impl.cpp
     attention_mixed_impl.cpp
-)
\ No newline at end of file
+)
+
+add_executable(hardware-test test.cpp)
+
+target_link_libraries(
+    hardware-test
+    PRIVATE llm_system
+)
+
+set_target_properties(hardware-test PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
diff --git src/hardware/attention_gen_impl.cpp src/hardware/attention_gen_impl.cpp
index 678754c..2ae6ab8 100644
--- src/hardware/attention_gen_impl.cpp
+++ src/hardware/attention_gen_impl.cpp
@@ -1,10 +1,17 @@
 #include <memory>
 
+#include <algorithm>
+#include <cmath>
+#include <limits>
+#include <vector>
+#include <array>
+
 #include "common/type.h"
 #include "dram/dram_interface.h"
 #include "dram/dram_request.h"
 #include "hardware/layer_impl.h"
 #include "module/tensor.h"
+#include "hardware/tile.h"
 
 namespace llm_system {
 class DRAMRequest;
@@ -13,6 +20,7 @@ class Tensor;
 using Tensor_Ptr = std::shared_ptr<Tensor>;
 using DRAMRequest_Ptr = std::shared_ptr<DRAMRequest>;
 
+//// In this branch, we use only GPU-related code, neither LOGIC nor PIM
 ExecStatus AttentionGenExecutionGPU(Device_Ptr device,
                                     std::vector<Tensor_Ptr> tensor,
                                     BatchedSequence::Ptr sequences_metadata,
@@ -64,6 +72,13 @@ ExecStatus AttentionGenExecutionGPU(Device_Ptr device,
     k = head_dim;
     n = seq->current_len + seq->num_process_token;
 
+    // Determine tile sizes
+    TileConfig tiles = getOptimalTiles(m * num_heads / num_kv_heads, n, k, input->precision_byte,
+                                       config.l1_cache_size,
+                                       config.l2_cache_size);
+    // Compute cache traffic
+    auto traffic = computeCacheTraffic(m * num_heads / num_kv_heads, n, k, input->precision_byte, tiles);
+
     for (int kv_idx = 0; kv_idx < num_kv_heads; kv_idx++) {
       flops = m * k * n * 2.0 * attention_group_size;
       total_flops += flops;
@@ -78,23 +93,12 @@ ExecStatus AttentionGenExecutionGPU(Device_Ptr device,
       memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
       accumul_memory_duration += memory_duration;
     }
-    accumul_len += n;
-  }
 
-  if (use_ramulator) {
-    k_cache->setShape({accumul_len, head_dim * num_kv_heads});
-    ExecStatus temp;
-    temp =
-        issueRamulator(device, LayerType::ATTENTION_GEN, ProcessorType::GPU,
-                       DRAMRequestType::kRead, PIMOperandType::kDRAM, k_cache);
-    exec_status += temp;
-    accumul_memory_duration = temp.memory_duration;
-  }
-  else {
-    k_cache->setShape({accumul_len, head_dim * num_kv_heads});
-    ExecStatus temp;
-    temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, k_cache);
-    exec_status += temp;
+    exec_status.read_count += traffic[0] * num_kv_heads;
+    exec_status.l2_count += traffic[1] * num_kv_heads;
+    exec_status.l1_count += traffic[2] * num_kv_heads;
+
+    accumul_len += n;
   }
 
   exec_status.total_duration +=
@@ -113,9 +117,12 @@ ExecStatus AttentionGenExecutionGPU(Device_Ptr device,
     flops = 7.0 * m * n * num_heads; // scale + mask + softmax
     total_flops += flops;
 
+    memory_size = (2.0 * m * n * num_heads) * input->precision_byte;
+
     compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+    memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
 
-    exec_status.total_duration += compute_duration;
+    exec_status.total_duration += std::max(compute_duration, memory_duration);
   }
 
   // Context //
@@ -129,6 +136,13 @@ ExecStatus AttentionGenExecutionGPU(Device_Ptr device,
     k = seq->current_len + seq->num_process_token;
     n = head_dim;
 
+    // Determine tile sizes
+    TileConfig tiles = getOptimalTiles(m * num_heads / num_kv_heads, n, k, input->precision_byte,
+                                        config.l1_cache_size,
+                                        config.l2_cache_size);
+    // Compute cache traffic
+    auto traffic = computeCacheTraffic(m * num_heads / num_kv_heads, n, k, input->precision_byte, tiles);
+
     for (int kv_idx = 0; kv_idx < num_kv_heads; kv_idx++) {
       flops = m * k * n * 2.0 * attention_group_size;
       total_flops += flops;
@@ -143,39 +157,24 @@ ExecStatus AttentionGenExecutionGPU(Device_Ptr device,
       memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
       accumul_memory_duration += memory_duration;
     }
-    accumul_len += k;
-  }
 
-  if (use_ramulator) {
-    v_cache->setShape({accumul_len, head_dim * num_kv_heads});
-    ExecStatus temp;
-    temp =
-        issueRamulator(device, LayerType::ATTENTION_GEN, ProcessorType::GPU,
-                       DRAMRequestType::kRead, PIMOperandType::kDRAM, v_cache);
-    exec_status += temp;
-    accumul_memory_duration = temp.memory_duration;
-  }  
-  else {
-    v_cache->setShape({accumul_len, head_dim * num_kv_heads});
-    ExecStatus temp;
-    temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, v_cache);
-    exec_status += temp;
+    exec_status.read_count += traffic[0] * num_kv_heads;
+    exec_status.l2_count += traffic[1] * num_kv_heads;
+    exec_status.l1_count += traffic[2] * num_kv_heads;   
+
+    accumul_len += k;
   }
 
   exec_status.total_duration +=
       std::max(accumul_compute_duration, accumul_memory_duration);
 
-  exec_status.compute_util = 1000.0 * 1000.0 * 1000.0 * total_flops /
-                             compute_peak_flops / exec_status.total_duration;
-  exec_status.memory_util = 1000.0 * 1000.0 * 1000.0 * total_memory_size /
-                            memory_bandwidth / exec_status.total_duration;
-
   exec_status.flops = total_flops;
   exec_status.memory_size = total_memory_size;
 
   return exec_status;
 };
 
+//// not used
 ExecStatus AttentionGenExecutionLogic(Device_Ptr device,
                                       std::vector<Tensor_Ptr> tensor,
                                       BatchedSequence::Ptr sequences_metadata,
@@ -330,6 +329,7 @@ ExecStatus AttentionGenExecutionLogic(Device_Ptr device,
   return exec_status;
 };
 
+//// not used
 ExecStatus AttentionGenExecutionPIM(Device_Ptr device,
                                     std::vector<Tensor_Ptr> tensor,
                                     BatchedSequence::Ptr sequences_metadata,
@@ -486,6 +486,7 @@ ExecStatus AttentionGenExecutionPIM(Device_Ptr device,
   return exec_status;
 };
 
+//// In this branch, we use only GPU-related code, neither LOGIC nor PIM
 ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
   std::vector<Tensor_Ptr> tensor,
   BatchedSequence::Ptr sequences_metadata,
@@ -539,6 +540,174 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
   time_ns accumul_compute_duration = 0;
   time_ns accumul_memory_duration = 0;
 
+  // Score //
+  for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
+    seq = seq_list.at(seq_idx);
+
+    m = seq->num_process_token;
+    k = head_dim + qk_rope_head_dim;
+    n = seq->current_len + seq->num_process_token;
+
+    // Determine tile sizes
+    TileConfig tiles = getOptimalTiles(m, n, k, input->precision_byte,
+                                       config.l1_cache_size,
+                                       config.l2_cache_size);
+    // Compute cache traffic
+    auto traffic = computeCacheTraffic(m, n, k, input->precision_byte, tiles);
+
+    for (int head_idx = 0; head_idx < num_heads; head_idx++) {
+      flops = m * k * n * 2.0;
+      total_flops += flops;
+
+      memory_size = (m * k + k * n + m * n) * input->precision_byte;
+      total_memory_size += memory_size;
+
+      compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+      exec_status.compute_duration += compute_duration;
+      accumul_compute_duration += compute_duration;
+
+      memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+      accumul_memory_duration += memory_duration;
+    }
+
+    exec_status.read_count += traffic[0] * num_heads;
+    exec_status.l2_count += traffic[1] * num_heads;
+    exec_status.l1_count += traffic[2] * num_heads;    
+    
+    accumul_len += n;
+  }
+
+  exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
+
+  // Softmax //
+  for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
+    time_ns compute_duration = 0;
+    time_ns memory_duration = 0;
+
+    seq = seq_list.at(seq_idx);
+
+    m = seq->num_process_token;
+    n = seq->current_len + seq->num_process_token;
+
+    flops = 7.0 * m * n * num_heads; // scale + mask + softmax
+    total_flops += flops;
+
+    memory_size = (2.0 * m * n * num_heads) * input->precision_byte;
+
+    compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+    memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+
+    exec_status.total_duration += std::max(compute_duration, memory_duration);
+  }
+
+  // Context //
+  accumul_len = 0;
+  accumul_compute_duration = 0;
+  accumul_memory_duration = 0;
+  for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
+    seq = seq_list.at(seq_idx);
+
+    m = seq->num_process_token;
+    k = seq->current_len + seq->num_process_token;
+    n = head_dim;
+
+    // Determine tile sizes
+    TileConfig tiles = getOptimalTiles(m, n, k, input->precision_byte,
+                                       config.l1_cache_size,
+                                       config.l2_cache_size);
+    // Compute cache traffic
+    auto traffic = computeCacheTraffic(m, n, k, input->precision_byte, tiles);
+
+    for (int head_idx = 0; head_idx < num_heads; head_idx++) {
+      flops = m * k * n * 2.0; 
+      total_flops += flops;
+
+      memory_size = (m * k + k * n + m * n) * input->precision_byte;
+      total_memory_size += memory_size;
+
+      compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+      exec_status.compute_duration += compute_duration;
+      accumul_compute_duration += compute_duration;
+
+      memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+      accumul_memory_duration += memory_duration;
+    }
+
+    exec_status.read_count += traffic[0] * num_heads;
+    exec_status.l2_count += traffic[1] * num_heads;
+    exec_status.l1_count += traffic[2] * num_heads;     
+
+    accumul_len += k;
+  }
+
+  exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
+
+  exec_status.flops = total_flops;
+  exec_status.memory_size = total_memory_size;
+  input->setShape(orig_shape); // restore orig shape of input
+
+  return exec_status;
+};
+
+//// not used
+ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
+  std::vector<Tensor_Ptr> tensor,
+  BatchedSequence::Ptr sequences_metadata,
+  LayerInfo layer_info, bool use_ramulator) {
+
+  Tensor_Ptr input = tensor.at(0);
+  Tensor_Ptr k_cache = tensor.at(0);
+  Tensor_Ptr v_cache = tensor.at(0);
+  bool compressed_kv = true;
+  if(tensor.size() > 1){ // not use compressed_kv
+    compressed_kv = false;
+    k_cache = tensor.at(1);
+    v_cache = tensor.at(2);
+  }
+
+  auto config = device->config;
+  hw_metric compute_peak_flops =
+    config.logic_memory_bandwidth * config.logic_op_b;
+  hw_metric memory_bandwidth = config.logic_memory_bandwidth;
+  if(input->precision_byte == 1){
+    compute_peak_flops *= 2;
+  }
+
+  int head_dim = layer_info.head_dim;
+  int num_heads = layer_info.num_heads;
+  int num_kv_heads = layer_info.num_kv_heads;
+  int qk_rope_head_dim = layer_info.qk_rope_head_dim;
+  int use_flash_mla = layer_info.use_flash_mla;
+
+  time_ns time = 0;
+
+  int m, n, k;
+  double flops, memory_size;
+  double total_flops = 0;
+  double total_memory_size = 0;
+
+  time_ns compute_duration;
+  time_ns memory_duration;
+  time_ns total_duration = 0;
+
+  ExecStatus exec_status;
+  if (sequences_metadata->get_gen_process_token() == 0) {
+    return exec_status;
+  }
+
+  // Scoring //
+  std::vector<Sequence::Ptr> seq_list = sequences_metadata->get_gen();
+  Sequence::Ptr seq;
+  std::vector<int> orig_shape = input->shape;
+
+  std::vector<int> shape = {1, head_dim};
+
+  int num_seq = seq_list.size();
+
+  int accumul_len = 0;
+  time_ns accumul_compute_duration = 0;
+  time_ns accumul_memory_duration = 0;
+
   if(use_flash_mla){
     for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
       seq = seq_list.at(seq_idx);
@@ -574,22 +743,22 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
 
       // read query
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
 
       // read key
       input->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);                        
 
       // read value
       input->setShape({accumul_len, head_dim * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);                        
 
       // write output
       input->setShape({num_seq, num_heads * head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);                        
 
       exec_status += temp;
@@ -599,19 +768,19 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
       ExecStatus temp;
 
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       input->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       input->setShape({accumul_len, head_dim * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       input->setShape({num_seq, num_heads * head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
       exec_status += temp;
     }
 
@@ -647,15 +816,15 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
     if(use_ramulator) {
       ExecStatus temp;
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
 
       k_cache->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, k_cache);                        
 
       input->setShape({num_heads, accumul_len});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);                        
 
       exec_status += temp;
@@ -665,15 +834,15 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
       ExecStatus temp;
 
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       k_cache->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, k_cache);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, k_cache);
       exec_status += temp;
 
       input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
       exec_status += temp;
     }
 
@@ -704,13 +873,13 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
 
         // read input
         input->setShape({m, n * num_heads});
-        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                 DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
         exec_status += temp;
         memory_duration += temp.memory_duration;
 
         // store output
-        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                 DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
         exec_status += temp;
         memory_duration += temp.memory_duration;
@@ -720,11 +889,11 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
 
         // read input
         input->setShape({m, n * num_heads});
-        temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
+        temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
         exec_status += temp;
 
         // store output
-        temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
+        temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
         exec_status += temp;
       }
 
@@ -764,19 +933,19 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
       ExecStatus temp;
 
       input->setShape({num_heads, accumul_len});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
       exec_status += temp;
       accumul_memory_duration += temp.memory_duration;
       
       v_cache->setShape({accumul_len, head_dim * num_heads});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, v_cache);
       exec_status += temp;
       accumul_memory_duration += temp.memory_duration;
 
       input->setShape({num_seq, num_heads * head_dim});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::GPU,
+      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
                             DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
       exec_status += temp;
       accumul_memory_duration += temp.memory_duration;
@@ -785,15 +954,15 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
       ExecStatus temp;
       
       input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       v_cache->setShape({accumul_len, head_dim * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, v_cache);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, v_cache);
       exec_status += temp;
 
       input->setShape({num_seq, num_heads * head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
       exec_status += temp;
     }
     exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
@@ -810,7 +979,8 @@ ExecStatus MultiLatentAttentionGenExecutionGPU(Device_Ptr device,
   return exec_status;
 };
 
-ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
+//// not used
+ExecStatus MultiLatentAttentionGenExecutionPIM(Device_Ptr device,
   std::vector<Tensor_Ptr> tensor,
   BatchedSequence::Ptr sequences_metadata,
   LayerInfo layer_info, bool use_ramulator) {
@@ -826,9 +996,8 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
   }
 
   auto config = device->config;
-  hw_metric compute_peak_flops =
-    config.logic_memory_bandwidth * config.logic_op_b;
-  hw_metric memory_bandwidth = config.logic_memory_bandwidth;
+  hw_metric compute_peak_flops = config.pim_memory_bandwidth * config.pim_op_b;
+  hw_metric memory_bandwidth = config.pim_memory_bandwidth;
   if(input->precision_byte == 1){
     compute_peak_flops *= 2;
   }
@@ -903,22 +1072,22 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
 
       // read query
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
 
       // read key
       input->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);                        
 
       // read value
       input->setShape({accumul_len, head_dim * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);                        
 
       // write output
       input->setShape({num_seq, num_heads * head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);                        
 
       exec_status += temp;
@@ -928,26 +1097,25 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
       ExecStatus temp;
 
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       input->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       input->setShape({accumul_len, head_dim * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       input->setShape({num_seq, num_heads * head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
       exec_status += temp;
     }
 
     exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
   }
   else{
-
     // Score //
     for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
       seq = seq_list.at(seq_idx);
@@ -976,15 +1144,15 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
     if(use_ramulator) {
       ExecStatus temp;
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
 
       k_cache->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, k_cache);                        
 
       input->setShape({num_heads, accumul_len});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);                        
 
       exec_status += temp;
@@ -994,15 +1162,15 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
       ExecStatus temp;
 
       input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       k_cache->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, k_cache);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, k_cache);
       exec_status += temp;
 
       input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
       exec_status += temp;
     }
 
@@ -1033,13 +1201,13 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
 
         // read input
         input->setShape({m, n * num_heads});
-        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                 DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
         exec_status += temp;
         memory_duration += temp.memory_duration;
 
         // store output
-        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                 DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
         exec_status += temp;
         memory_duration += temp.memory_duration;
@@ -1049,11 +1217,11 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
 
         // read input
         input->setShape({m, n * num_heads});
-        temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
+        temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
         exec_status += temp;
 
         // store output
-        temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
+        temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
         exec_status += temp;
       }
 
@@ -1093,19 +1261,19 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
       ExecStatus temp;
 
       input->setShape({num_heads, accumul_len});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
       exec_status += temp;
       accumul_memory_duration += temp.memory_duration;
       
       v_cache->setShape({accumul_len, head_dim * num_heads});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kRead, PIMOperandType::kDRAM, v_cache);
       exec_status += temp;
       accumul_memory_duration += temp.memory_duration;
 
       input->setShape({num_seq, num_heads * head_dim});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::LOGIC,
+      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
                             DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
       exec_status += temp;
       accumul_memory_duration += temp.memory_duration;
@@ -1114,15 +1282,15 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
       ExecStatus temp;
       
       input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
       exec_status += temp;
 
       v_cache->setShape({accumul_len, head_dim * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kRead, v_cache);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, v_cache);
       exec_status += temp;
 
       input->setShape({num_seq, num_heads * head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::LOGIC, DRAMRequestType::kWrite, input);
+      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
       exec_status += temp;
     }
     exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
@@ -1139,33 +1307,24 @@ ExecStatus MultiLatentAttentionGenExecutionLogic(Device_Ptr device,
   return exec_status;
 };
 
-ExecStatus MultiLatentAttentionGenExecutionPIM(Device_Ptr device,
+//// In this branch, we use only GPU-related code, neither LOGIC nor PIM
+ExecStatus AbsorbMLAGenExecutionGPU(Device_Ptr device,
   std::vector<Tensor_Ptr> tensor,
   BatchedSequence::Ptr sequences_metadata,
   LayerInfo layer_info, bool use_ramulator) {
 
   Tensor_Ptr input = tensor.at(0);
-  Tensor_Ptr k_cache = tensor.at(0);
-  Tensor_Ptr v_cache = tensor.at(0);
-  bool compressed_kv = true;
-  if(tensor.size() > 1){ // not use compressed_kv
-    compressed_kv = false;
-    k_cache = tensor.at(1);
-    v_cache = tensor.at(2);
-  }
 
   auto config = device->config;
-  hw_metric compute_peak_flops = config.pim_memory_bandwidth * config.pim_op_b;
-  hw_metric memory_bandwidth = config.pim_memory_bandwidth;
-  if(input->precision_byte == 1){
-    compute_peak_flops *= 2;
-  }
+  hw_metric compute_peak_flops = config.compute_peak_flops;
+  hw_metric memory_bandwidth = config.memory_bandwidth;
 
   int head_dim = layer_info.head_dim;
   int num_heads = layer_info.num_heads;
   int num_kv_heads = layer_info.num_kv_heads;
   int qk_rope_head_dim = layer_info.qk_rope_head_dim;
-  int use_flash_mla = layer_info.use_flash_mla;
+  int kv_lora_rank = layer_info.kv_lora_rank;
+  bool use_flash_mla = layer_info.use_flash_mla;
 
   time_ns time = 0;
 
@@ -1183,689 +1342,165 @@ ExecStatus MultiLatentAttentionGenExecutionPIM(Device_Ptr device,
     return exec_status;
   }
 
-  // Scoring //
   std::vector<Sequence::Ptr> seq_list = sequences_metadata->get_gen();
   Sequence::Ptr seq;
-  std::vector<int> orig_shape = input->shape;
 
-  std::vector<int> shape = {1, head_dim};
+  std::vector<int> orig_shape = input->shape;
 
   int num_seq = seq_list.size();
 
-  int accumul_len = 0;
+  int accumul_len = 0; // num_seq x seqLen
   time_ns accumul_compute_duration = 0;
   time_ns accumul_memory_duration = 0;
 
-  if(use_flash_mla){
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      seq = seq_list.at(seq_idx);
-
-      m = seq->num_process_token;
-      k = head_dim + qk_rope_head_dim;
-      n = seq->current_len + seq->num_process_token;
-
-      accumul_len += n;
-
-      flops = 2.0 * m * (head_dim + qk_rope_head_dim) * n * num_heads + // score
-              2.0 * m * (head_dim) * n * num_heads; // context
-      total_flops += flops;
-
-
-      memory_size = 1.0 * (m * (head_dim + qk_rope_head_dim) + // query
-                    1.0 * n * (head_dim + qk_rope_head_dim) + // key
-                    1.0 * n * head_dim + // value
-                    1.0 * m * head_dim) * // output 
-                    num_heads * input->precision_byte;
-      total_memory_size += memory_size;
-
-      accumul_compute_duration += flops / compute_peak_flops * 1000 * 1000 * 1000;
-      exec_status.compute_duration += accumul_compute_duration;
-
-      accumul_memory_duration +=
-          memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-      exec_status.memory_duration += accumul_memory_duration;
-    }
-
-    if(use_ramulator) {
-      ExecStatus temp;
-
-      // read query
-      input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-
-      // read key
-      input->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, input);                        
-
-      // read value
-      input->setShape({accumul_len, head_dim * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, input);                        
+  // Scoring for NoPE//
+  for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
+    seq = seq_list.at(seq_idx);
 
-      // write output
-      input->setShape({num_seq, num_heads * head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);                        
+    m = seq->num_process_token;
+    k = kv_lora_rank;
+    n = seq->current_len + seq->num_process_token;
 
-      exec_status += temp;
-      accumul_memory_duration = temp.memory_duration;
-    }
-    else{
-      ExecStatus temp;
+    // Determine tile sizes
+    TileConfig tiles = getOptimalTiles(m * num_heads, n, k, input->precision_byte,
+                                       config.l1_cache_size,
+                                       config.l2_cache_size);
+    // Compute cache traffic
+    auto traffic = computeCacheTraffic(m * num_heads, n, k, input->precision_byte, tiles);
 
-      input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
-      exec_status += temp;
+    flops = 1.0 * m * k * n * 2.0 * num_heads;
+    total_flops += flops;
 
-      input->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
-      exec_status += temp;
+    memory_size = (1.0 * m * k * num_heads + 1.0 * k * n + 1.0 * m * n * num_heads) * input->precision_byte;
+    total_memory_size += memory_size;
 
-      input->setShape({accumul_len, head_dim * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
-      exec_status += temp;
+    exec_status.read_count += traffic[0];
+    exec_status.l2_count += traffic[1];
+    exec_status.l1_count += traffic[2];
 
-      input->setShape({num_seq, num_heads * head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
-      exec_status += temp;
-    }
+    compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+    exec_status.compute_duration += compute_duration;
+    accumul_compute_duration += compute_duration;
 
-    exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
+    memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+    accumul_memory_duration += memory_duration;
+    accumul_len += n;
   }
-  else{
-    // Score //
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      seq = seq_list.at(seq_idx);
-
-      m = seq->num_process_token;
-      k = head_dim + qk_rope_head_dim;
-      n = seq->current_len + seq->num_process_token;
-
-      for (int head_idx = 0; head_idx < num_heads; head_idx++) {
-        flops = m * k * n * 2.0;
-        total_flops += flops;
-
-        memory_size = (m * k + k * n + m * n) * input->precision_byte;
-        total_memory_size += memory_size;
-
-        compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
-        exec_status.compute_duration += compute_duration;
-        accumul_compute_duration += compute_duration;
 
-        memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-        accumul_memory_duration += memory_duration;
-      }
-      accumul_len += n;
-    }
-
-    if(use_ramulator) {
-      ExecStatus temp;
-      input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
+  exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
 
-      k_cache->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, k_cache);                        
+  // Scoring for RoPE//
+  accumul_len = 0;
+  accumul_compute_duration = 0;
+  accumul_memory_duration = 0;
+  for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
+    seq = seq_list.at(seq_idx);
 
-      input->setShape({num_heads, accumul_len});
-      temp += issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);                        
+    m = seq->num_process_token;
+    k = qk_rope_head_dim;
+    n = seq->current_len + seq->num_process_token;
 
-      exec_status += temp;
-      accumul_memory_duration = temp.memory_duration;
-    }
-    else{
-      ExecStatus temp;
+    // Determine tile sizes
+    TileConfig tiles = getOptimalTiles(m * num_heads, n, k, input->precision_byte,
+                                       config.l1_cache_size,
+                                       config.l2_cache_size);
+    // Compute cache traffic
+    auto traffic = computeCacheTraffic(m * num_heads, n, k, input->precision_byte, tiles);
 
-      input->setShape({num_seq * num_heads, head_dim + qk_rope_head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
-      exec_status += temp;
+    flops = 1.0 * m * k * n * 2.0 * num_heads;
+    total_flops += flops;
 
-      k_cache->setShape({accumul_len, (head_dim + qk_rope_head_dim) * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, k_cache);
-      exec_status += temp;
+    memory_size = (1.0 * m * k * num_heads + 1.0 * k * n + 1.0 * m * n * num_heads) * input->precision_byte;
+    total_memory_size += memory_size;
 
-      input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
-      exec_status += temp;
-    }
+    exec_status.read_count += traffic[0];
+    exec_status.l2_count += traffic[1];
+    exec_status.l1_count += traffic[2];
 
-    exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
+    compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+    exec_status.compute_duration += compute_duration;
+    accumul_compute_duration += compute_duration;
 
-    // Softmax //
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      time_ns compute_duration = 0;
-      time_ns memory_duration = 0;
+    memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+    accumul_memory_duration += memory_duration;
+    
+    accumul_len += n;
+  }
+  
+  exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
 
-      seq = seq_list.at(seq_idx);
 
-      m = seq->num_process_token;
-      n = seq->current_len + seq->num_process_token;
+  // Scale + mask + Softmax //
+  for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
+    time_ns compute_duration = 0;
+    time_ns memory_duration = 0;
 
-      flops = 7.0 * m * n * num_heads; // scale + mask + softmax
-      total_flops += flops;
+    seq = seq_list.at(seq_idx);
 
-      memory_size = (2.0 * m * n * num_heads) *input->precision_byte;
+    m = seq->num_process_token;
+    n = seq->current_len + seq->num_process_token;
 
-      compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
-      memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+    flops = 7.0 * m * n * num_heads; // scale + mask + softmax
+    total_flops += flops;
 
-      if(use_ramulator){
-        memory_duration = 0;
-        
-        ExecStatus temp;
+    memory_size = (2.0 * m * n * num_heads) * input->precision_byte;
+    total_memory_size += memory_size;
+    compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+    memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
 
-        // read input
-        input->setShape({m, n * num_heads});
-        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-        exec_status += temp;
-        memory_duration += temp.memory_duration;
+    exec_status.total_duration += std::max(compute_duration, memory_duration);;
+  }
 
-        // store output
-        temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
-        exec_status += temp;
-        memory_duration += temp.memory_duration;
-      }
-      else{
-        ExecStatus temp;
+  // Context //
+  accumul_len = 0;
+  accumul_compute_duration = 0;
+  accumul_memory_duration = 0;
+  for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
+    seq = seq_list.at(seq_idx);
 
-        // read input
-        input->setShape({m, n * num_heads});
-        temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
-        exec_status += temp;
+    m = seq->num_process_token;
+    k = seq->current_len + seq->num_process_token;
+    n = kv_lora_rank;
 
-        // store output
-        temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
-        exec_status += temp;
-      }
+    // Determine tile sizes
+    TileConfig tiles = getOptimalTiles(m * num_heads, n, k, input->precision_byte,
+                                       config.l1_cache_size,
+                                       config.l2_cache_size);
+    // Compute cache traffic
+    auto traffic = computeCacheTraffic(m * num_heads, n, k, input->precision_byte, tiles);
 
-      exec_status.total_duration += std::max(compute_duration, memory_duration);;
-    }
+    flops = 1.0 * m * k * n * 2.0 * num_heads;
+    total_flops += flops;
+    memory_size = (1.0 * m * k * num_heads + 1.0 * k * n +
+      1.0 * m * n * num_heads) * input->precision_byte;
+    total_memory_size += memory_size;
 
-    // Context //
-    accumul_len = 0;
-    accumul_compute_duration = 0;
-    accumul_memory_duration = 0;
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      seq = seq_list.at(seq_idx);
+    exec_status.read_count += traffic[0];
+    exec_status.l2_count += traffic[1];
+    exec_status.l1_count += traffic[2];
 
-      m = seq->num_process_token;
-      k = seq->current_len + seq->num_process_token;
-      n = head_dim;
+    compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
+    exec_status.compute_duration += compute_duration;
+    accumul_compute_duration += compute_duration;
 
-      for (int head_idx = 0; head_idx < num_heads; head_idx++) {
-        flops = m * k * n * 2.0; 
-        total_flops += flops;
+    memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+    accumul_memory_duration += memory_duration;
+    accumul_len += k;
+  }
 
-        memory_size = (m * k + k * n + m * n) * input->precision_byte;
-        total_memory_size += memory_size;
+  exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
 
-        compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
-        exec_status.compute_duration += compute_duration;
-        accumul_compute_duration += compute_duration;
+  // exec_status.total_duration = total_duration;
 
-        memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-        accumul_memory_duration += memory_duration;
-      }
-      accumul_len += k;
-    }
+  exec_status.flops = total_flops;
+  exec_status.memory_size = total_memory_size;
 
-    if (use_ramulator) {
-      accumul_memory_duration = 0;
-      ExecStatus temp;
+  input->setShape(orig_shape); // restore orig shape of input
 
-      input->setShape({num_heads, accumul_len});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-      
-      v_cache->setShape({accumul_len, head_dim * num_heads});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, v_cache);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-
-      input->setShape({num_seq, num_heads * head_dim});
-      temp = issueRamulator(device, LayerType::MLA_GEN, ProcessorType::PIM,
-                            DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-    }
-    else{
-      ExecStatus temp;
-      
-      input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      v_cache->setShape({accumul_len, head_dim * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kRead, v_cache);
-      exec_status += temp;
-
-      input->setShape({num_seq, num_heads * head_dim});
-      temp = getIdealMemoryStatus(device, ProcessorType::PIM, DRAMRequestType::kWrite, input);
-      exec_status += temp;
-    }
-    exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
-  }
-
-  exec_status.compute_util = 1000.0 * 1000.0 * 1000.0 * total_flops /
-  compute_peak_flops / exec_status.total_duration;
-  exec_status.memory_util = 1000.0 * 1000.0 * 1000.0 * total_memory_size /
-  memory_bandwidth / exec_status.total_duration;
-
-  exec_status.flops = total_flops;
-  exec_status.memory_size = total_memory_size;
-  input->setShape(orig_shape); // restore orig shape of input
-  return exec_status;
-};
-
-ExecStatus AbsorbMLAGenExecutionGPU(Device_Ptr device,
-  std::vector<Tensor_Ptr> tensor,
-  BatchedSequence::Ptr sequences_metadata,
-  LayerInfo layer_info, bool use_ramulator) {
-
-  Tensor_Ptr input = tensor.at(0);
-
-  auto config = device->config;
-  hw_metric compute_peak_flops = config.compute_peak_flops;
-  hw_metric memory_bandwidth = config.memory_bandwidth;
-
-  int head_dim = layer_info.head_dim;
-  int num_heads = layer_info.num_heads;
-  int num_kv_heads = layer_info.num_kv_heads;
-  int qk_rope_head_dim = layer_info.qk_rope_head_dim;
-  int kv_lora_rank = layer_info.kv_lora_rank;
-  bool use_flash_mla = layer_info.use_flash_mla;
-
-  time_ns time = 0;
-
-  int m, n, k;
-  double flops, memory_size;
-  double total_flops = 0;
-  double total_memory_size = 0;
-
-  time_ns compute_duration;
-  time_ns memory_duration;
-  time_ns total_duration = 0;
-
-  ExecStatus exec_status;
-  if (sequences_metadata->get_gen_process_token() == 0) {
-    return exec_status;
-  }
-
-  std::vector<Sequence::Ptr> seq_list = sequences_metadata->get_gen();
-  Sequence::Ptr seq;
-
-  std::vector<int> orig_shape = input->shape;
-
-  int num_seq = seq_list.size();
-
-  int accumul_len = 0; // num_seq x seqLen
-  time_ns accumul_compute_duration = 0;
-  time_ns accumul_memory_duration = 0;
-
-  if(use_flash_mla){
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      seq = seq_list.at(seq_idx);
-
-      m = seq->num_process_token;
-      k = kv_lora_rank + qk_rope_head_dim;
-      n = seq->current_len + seq->num_process_token;
-
-      accumul_len += n;
-
-      flops = 2.0 * num_heads * (kv_lora_rank + qk_rope_head_dim) * n + // score
-              2.0 * num_heads * (kv_lora_rank) * n; // context
-      total_flops += flops;
-
-
-      memory_size = 1.0 * (num_heads * (kv_lora_rank + qk_rope_head_dim) + // query
-                    1.0 * n * (kv_lora_rank + qk_rope_head_dim) + // latent kv and pe cache
-                    1.0 * num_heads * kv_lora_rank) * // output 
-                    input->precision_byte;
-      total_memory_size += memory_size;
-
-      accumul_compute_duration += flops / compute_peak_flops * 1000 * 1000 * 1000;
-      exec_status.compute_duration += accumul_compute_duration;
-
-      accumul_memory_duration +=
-          memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-      exec_status.memory_duration += accumul_memory_duration;
-    }
-
-    if(use_ramulator) {
-      ExecStatus temp;
-
-      // read query
-      input->setShape({num_seq * num_heads, (kv_lora_rank + qk_rope_head_dim)});
-      temp += issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-
-      // read latent kv and pe cache
-      input->setShape({accumul_len, (kv_lora_rank + qk_rope_head_dim)});
-      temp += issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-                            DRAMRequestType::kRead, PIMOperandType::kDRAM, input);                                          
-
-      // write output
-      input->setShape({num_seq, num_heads * kv_lora_rank});
-      temp += issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-                            DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);                        
-
-      exec_status += temp;
-      accumul_memory_duration = temp.memory_duration;
-    }
-    else{
-      ExecStatus temp;
-
-      input->setShape({num_seq * num_heads, (kv_lora_rank + qk_rope_head_dim)});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      input->setShape({accumul_len, (kv_lora_rank + qk_rope_head_dim)});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      input->setShape({num_seq, num_heads * kv_lora_rank});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
-      exec_status += temp;
-    }
-
-    exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
-  }
-  else{
-    // Scoring for NoPE//
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      seq = seq_list.at(seq_idx);
-
-      m = seq->num_process_token;
-      k = kv_lora_rank;
-      n = seq->current_len + seq->num_process_token;
-
-      flops = 1.0 * m * k * n * 2.0 * num_heads;
-      total_flops += flops;
-
-      memory_size = (1.0 * m * k * num_heads + 1.0 * k * n + 1.0 * m * n * num_heads) * input->precision_byte;
-      total_memory_size += memory_size;
-
-      compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
-      exec_status.compute_duration += compute_duration;
-      accumul_compute_duration += compute_duration;
-
-      memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-      accumul_memory_duration += memory_duration;
-      accumul_len += n;
-    }
-
-    if (use_ramulator) {
-      accumul_memory_duration = 0;
-
-      ExecStatus temp;
-
-      // read input
-      input->setShape({num_seq, (1 * kv_lora_rank) * num_heads});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-
-      // read compressed_KV
-      input->setShape({kv_lora_rank, accumul_len});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-
-      // store intermediate value
-      input->setShape({num_heads, accumul_len});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-    }
-    else{
-      ExecStatus temp;
-
-      // read input
-      input->setShape({num_seq, (1 * kv_lora_rank) * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      // read compressed_KV
-      input->setShape({kv_lora_rank, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      // store intermediate value
-      input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
-      exec_status += temp;
-    }
-
-    exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
-
-    // Scoring for RoPE//
-    accumul_len = 0;
-    accumul_compute_duration = 0;
-    accumul_memory_duration = 0;
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      seq = seq_list.at(seq_idx);
-
-      m = seq->num_process_token;
-      k = qk_rope_head_dim;
-      n = seq->current_len + seq->num_process_token;
-
-      flops = 1.0 * m * k * n * 2.0 * num_heads;
-      total_flops += flops;
-
-      memory_size = (1.0 * m * k * num_heads + 1.0 * k * n + 1.0 * m * n * num_heads) * input->precision_byte;
-      total_memory_size += memory_size;
-
-      compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
-      exec_status.compute_duration += compute_duration;
-      accumul_compute_duration += compute_duration;
-
-      memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-      accumul_memory_duration += memory_duration;
-      
-      accumul_len += n;
-    }
-
-    if (use_ramulator) {
-      accumul_memory_duration = 0;
-
-      ExecStatus temp;
-
-      // read input
-      input->setShape({num_seq, qk_rope_head_dim * num_heads});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-
-      // read latent_PE
-      input->setShape({qk_rope_head_dim, accumul_len});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-
-      // store intermediate value
-      input->setShape({num_heads, accumul_len});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration = temp.memory_duration;
-    }
-    else{
-      ExecStatus temp;
-
-      // read input
-      input->setShape({num_seq, qk_rope_head_dim * num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      // read latent_PE
-      input->setShape({qk_rope_head_dim, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      // store intermediate value
-      input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
-      exec_status += temp;
-    }
-    
-    exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
-
-
-    // Scale + mask + Softmax //
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      time_ns compute_duration = 0;
-      time_ns memory_duration = 0;
-
-      seq = seq_list.at(seq_idx);
-
-      m = seq->num_process_token;
-      n = seq->current_len + seq->num_process_token;
-
-      flops = 7.0 * m * n * num_heads; // scale + mask + softmax
-      total_flops += flops;
-
-      memory_size = (2.0 * m * n * num_heads) * input->precision_byte;
-      total_memory_size += memory_size;
-      compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
-      memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-
-      if(use_ramulator){
-        memory_duration = 0;
-        
-        ExecStatus temp;
-
-        // read input
-        input->setShape({m, n * num_heads});
-        temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-                DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-        exec_status += temp;
-        memory_duration += temp.memory_duration;
-
-        // store output
-        temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-                DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
-        exec_status += temp;
-        memory_duration += temp.memory_duration;
-      }
-      else{
-        ExecStatus temp;
-
-        // read input
-        input->setShape({m, n * num_heads});
-        temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-        exec_status += temp;
-
-        // store output
-        temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
-        exec_status += temp;
-      }
-
-      exec_status.total_duration += std::max(compute_duration, memory_duration);;
-    }
-
-    // Context //
-    accumul_len = 0;
-    accumul_compute_duration = 0;
-    accumul_memory_duration = 0;
-    for (int seq_idx = 0; seq_idx < num_seq; seq_idx++) {
-      seq = seq_list.at(seq_idx);
-
-      m = seq->num_process_token;
-      k = seq->current_len + seq->num_process_token;
-      n = kv_lora_rank;
-
-      flops = 1.0 * m * k * n * 2.0 * num_heads;
-      total_flops += flops;
-      memory_size = (1.0 * m * k * num_heads + 1.0 * k * n +
-        1.0 * m * n * num_heads) * input->precision_byte;
-      total_memory_size += memory_size;
-
-      compute_duration = flops / compute_peak_flops * 1000 * 1000 * 1000;
-      exec_status.compute_duration += compute_duration;
-      accumul_compute_duration += compute_duration;
-
-      memory_duration = memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-      accumul_memory_duration += memory_duration;
-      accumul_len += k;
-    }
-
-    if (use_ramulator) {
-      accumul_memory_duration = 0;
-
-      ExecStatus temp;
-
-      // read score output
-      input->setShape({num_heads, accumul_len});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-
-      // read compressed_kv
-      input->setShape({accumul_len, kv_lora_rank});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-
-
-      // store context out
-      input->setShape({num_seq * kv_lora_rank, num_heads});
-      temp = issueRamulator(device, LayerType::ABSORBED_MLA_GEN, ProcessorType::GPU,
-              DRAMRequestType::kWrite, PIMOperandType::kDRAM, input);
-      exec_status += temp;
-      accumul_memory_duration += temp.memory_duration;
-    }
-    else{
-      ExecStatus temp;
-
-      // read score output
-      input->setShape({num_heads, accumul_len});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      // read compressed_kv
-      input->setShape({accumul_len, kv_lora_rank});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-      exec_status += temp;
-
-      // store context out
-      input->setShape({num_seq * kv_lora_rank, num_heads});
-      temp = getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, input);
-      exec_status += temp;
-    }
-
-    exec_status.total_duration += std::max(accumul_compute_duration, accumul_memory_duration);
-  }
-
-  // exec_status.total_duration = total_duration;
-
-  exec_status.compute_util = 1000.0 * 1000.0 * 1000.0 * total_flops /
-  compute_peak_flops / exec_status.total_duration;
-  exec_status.memory_util = 1000.0 * 1000.0 * 1000.0 * total_memory_size /
-  memory_bandwidth / exec_status.total_duration;
-
-  exec_status.flops = total_flops;
-  exec_status.memory_size = total_memory_size;
-
-  input->setShape(orig_shape); // restore orig shape of input
   return exec_status;
 };
 
+//// not used
 ExecStatus AbsorbMLAGenExecutionLogic(Device_Ptr device,
   std::vector<Tensor_Ptr> tensor,
   BatchedSequence::Ptr sequences_metadata,
@@ -2270,6 +1905,7 @@ ExecStatus AbsorbMLAGenExecutionLogic(Device_Ptr device,
   return exec_status;
 };
 
+//// not used
 ExecStatus AbsorbMLAGenExecutionPIM(Device_Ptr device,
   std::vector<Tensor_Ptr> tensor,
   BatchedSequence::Ptr sequences_metadata,
diff --git src/hardware/cluster.cpp src/hardware/cluster.cpp
index e2de805..ae9191b 100644
--- src/hardware/cluster.cpp
+++ src/hardware/cluster.cpp
@@ -218,7 +218,6 @@ bool Cluster::checkMemorySize() {
                  
   std::cout << "Total: " << size / 1024.0 / 1024 / 1024 << "GB" << std::endl;
   if (size > config.memory_capacity) {
-    out_of_memory = true;
     if (config.exit_out_of_memory) {
       return true;
     } else if (config.mem_cap_limit == true){
@@ -349,53 +348,42 @@ bool Cluster::check_module_graph_remain() {
 
 void Cluster::exportToCSV(std::ofstream &csv, std::vector<Stat> &stat_list) {
   for (auto temp : stat_list) {
-    csv << std::to_string(temp.iter_info) << "," << std::to_string(temp.split)
-        << "," << temp.type << "," << std::to_string(temp.time) << ","
-        << std::to_string(temp.latency) << ","
-        << std::to_string(temp.queueing_delay) << ","
-        << std::to_string(temp.arrival_time) << ","
-        << std::to_string(temp.seq_queue_size) << ","
-        << std::to_string(temp.input_len) << ","
-        << std::to_string(temp.output_len) << ","
-        << std::to_string(temp.num_sum_iter) << ","
-        << std::to_string(temp.is_mixed) << ","
+    csv << std::to_string(temp.iter_info) << ","
+        << temp.type << ","
         << std::to_string(temp.batchsize) << ","
         << std::to_string(temp.process_token) << ","
         << std::to_string(temp.sum_seq) << "," << std::to_string(temp.gen_seq)
         << "," << std::to_string(temp.average_seq_len) << ","
-        << std::to_string(temp.sum_attention_opb) << ","
-        << std::to_string(temp.qkv_gen) << "," 
-        << std::to_string(temp.q_down_proj) << "," 
-        << std::to_string(temp.kv_down_proj) << ","
-        << std::to_string(temp.kr_proj) << ","
-        << std::to_string(temp.q_up_proj) << ","
-        << std::to_string(temp.qr_proj) << ","
-        << std::to_string(temp.kv_up_proj) << ","
-        << std::to_string(temp.tr_k_up_proj) << ","
-        << std::to_string(temp.v_up_proj) << ","
+        << "->" << ","
+        << std::to_string(temp.decoders - temp.moe_decoders) << "," // non-moe decoders
+        << std::to_string(temp.moe_decoders) << "," 
+        << std::to_string(temp.qkv_gen) << "," // MHA, GQA
+        << std::to_string(temp.q_down_proj) << "," // MLA of deepseek
+        << std::to_string(temp.kv_down_proj) << "," // MLA of deepseek
+        << std::to_string(temp.kr_proj) << "," // MLA of deepseek
+        << std::to_string(temp.q_up_proj) << "," // MLA of deepseek
+        << std::to_string(temp.qr_proj) << "," // MLA of deepseek
+        << std::to_string(temp.kv_up_proj) << "," // MLA of deepseek
+        << std::to_string(temp.tr_k_up_proj) << "," // MLA of deepseek
+        << std::to_string(temp.v_up_proj) << "," // MLA of deepseek
         << std::to_string(temp.atten_sum)
-        << "," << std::to_string(temp.atten_gen) << ","
+        << "," << std::to_string(temp.atten_gen) << "," // Score, softmax, and Context
         << std::to_string(temp.o_proj) << "," << std::to_string(temp.ffn) << ","
-        << std::to_string(temp.expert_ffn) << ","
-        << std::to_string(temp.communication) << ","
-        << std::to_string(temp.rope) << ","
-        << std::to_string(temp.layernorm) << ","
-        << std::to_string(temp.residual) << ","
-        << std::to_string(temp.act_energy) << ","
-        << std::to_string(temp.read_energy) << ","
-        << std::to_string(temp.write_energy) << ","
-        << std::to_string(temp.all_act_energy) << ","
-        << std::to_string(temp.all_read_energy) << ","
-        << std::to_string(temp.all_write_energy) << ","
-        << std::to_string(temp.mac_energy) << ","
-        << std::to_string(temp.total_energy) << ","
+        << std::to_string(temp.shared_expert_ffn) << ","
+        << std::to_string(temp.expert_ffn) << "," // gated expert ffn
+        << std::to_string(temp.communication) << "," // inter-GPU
+        << "->" << ","
         << std::to_string(temp.FC_DRAM_energy) << ","
         << std::to_string(temp.FC_COMP_energy) << ","
         << std::to_string(temp.Attn_DRAM_energy) << ","
         << std::to_string(temp.Attn_COMP_energy) << ","
-        << std::to_string(temp.MoE_DRAM_energy) << ","
-        << std::to_string(temp.MoE_COMP_energy) << ","
-        << std::to_string(temp.isOOM) << std::endl;
+        << std::to_string(temp.FFN_DRAM_energy) << "," // non-MoE FFN
+        << std::to_string(temp.FFN_COMP_energy) << "," // non-MoE FFN
+        << std::to_string(temp.shared_MoE_HBM_energy) << ","
+        << std::to_string(temp.shared_MoE_COMP_energy) << ","
+        << std::to_string(temp.MoE_HBM_energy) << "," // gated expert
+        << std::to_string(temp.MoE_OFFLOAD_energy) << "," // gated expert
+        << std::to_string(temp.MoE_COMP_energy) << std::endl; // gated expert
   }
   stat_list.resize(0);
 }
@@ -404,14 +392,10 @@ std::vector<Stat> Cluster::runIteration(int iter, std::string file_name) {
   std::ofstream csv;
   csv.open(file_name);
 
-  csv << "iter_info,split,type,time,latency,queueing_delay,arrival_time,seq_queue_"
-         "size,"
-         "input_len,output_len,num_sum_iter,mixed,batchsize,numtoken,num_sum_"
-         "seq,num_gen_seq,seqlen,sum_attention_opb,qkvgen,q_down_proj,kv_down_proj,kr_proj,"
+  csv << "iter_info,type,batchsize,numtoken,num_sum_"
+         "seq,num_gen_seq,seqlen(Lin+Lout),##Latency,non_MoE_decoders,MoE_decoders,qkvgen,q_down_proj,kv_down_proj,kr_proj,"
          "q_up_proj,qr_proj,kv_up_proj,tr_k_up_proj,v_up_proj,atten_sum,atten_gen,"
-         "o_proj,ffn,expert_ffn,communication,rope,layernorm,residual,act_energy,read_energy,write_"
-         "energy,all_act_energy,all_read_energy,all_write_energy,mac_energy,"
-         "total_energy,fc_dram,fc_comp,attn_dram,attn_comp,moe_dram,moe_comp,OOM"
+         "o_proj,ffn,shared_expert_ffn,expert_ffn,communication,##Energy,fc_dram,fc_comp,attn_dram,attn_comp,ffn_dram,ffn_comp,shared_moe_hbm,shared_moe_comp,moe_hbm,moe_offload,moe_comp"
       << std::endl;
 
   std::vector<Stat> stat_list;
@@ -420,7 +404,7 @@ std::vector<Stat> Cluster::runIteration(int iter, std::string file_name) {
   scheduler->fillRunningQueue();
 
   // hitting
-  scheduler->hittingQueue(10000);
+  //scheduler->hittingQueue(10000);
 
   if (config.disagg_system) {
     stat_list = runIterationSumGenSplit(iter, csv);
@@ -428,7 +412,7 @@ std::vector<Stat> Cluster::runIteration(int iter, std::string file_name) {
     stat_list = runIterationMixed(iter, csv);
   }
 
-  std::cout << "Total: " << std::to_string(scheduler->total_time) << std::endl;
+  //std::cout << "Total: " << std::to_string(scheduler->total_time) << std::endl;
   std::cout << file_name << std::endl;
   csv.close();
 
@@ -663,26 +647,36 @@ void Cluster::setStat(Stat &stat) {
 void Cluster::setTimeBreakDown(Stat &stat) {
   TimeBoard &timeboard = get_device(0)->top_module_graph->timeboard;
 
-  if(scheduler->model_config.qk_nope_head_dim == 0){
-    std::vector<TimeStamp *> QKV_gen;    // GPU
-    std::vector<TimeStamp *> AttnSum;    // GPU
-    std::vector<TimeStamp *> AttnGen;    // PIM or Logic
-    std::vector<TimeStamp *> O_proj;     // GPU
-    std::vector<TimeStamp *> FFN;        // PIM or Logic
-    std::vector<TimeStamp *> ExpertFFN;  // PIM or Logic
-    std::vector<TimeStamp *> Comm;       // PIM or Logic
+  if(scheduler->model_config.qk_nope_head_dim == 0){ // model using MHA, GQA
+    std::vector<TimeStamp *> Decoders; // non-MoE decoder
+    std::vector<TimeStamp *> MoEDecoders;
+    std::vector<TimeStamp *> QKV_gen;    
+    std::vector<TimeStamp *> AttnSum;    
+    std::vector<TimeStamp *> AttnGen;    
+    std::vector<TimeStamp *> O_proj;     
+    std::vector<TimeStamp *> FFN;        
+    std::vector<TimeStamp *> SharedExpertFFN;
+    std::vector<TimeStamp *> CommInSharedExpertFFN; // AllReduce after shared expert ffn
+    std::vector<TimeStamp *> ExpertFFN; // gated expert ffn + shared expert ffn
+    std::vector<TimeStamp *> Comm;       
     std::vector<TimeStamp *> CommInExpertFFN;
 
     std::vector<TimeStamp *> RoPE;
     std::vector<TimeStamp *> LayerNorm;
     std::vector<TimeStamp *> Residual;
 
+    //// The timeboard gathers records of stamps whose strings **include** a specified substring and,
+    //// after resolving their inclusion hierarchy, logs the corresponding values for each layer in stat.
+    timeboard.find_stamp("decoder_", Decoders);
+    timeboard.find_stamp("MoE_decoder_", MoEDecoders);
     timeboard.find_stamp("attn_qkv_proj", QKV_gen);
     timeboard.find_stamp("AttentionSum", AttnSum);
     timeboard.find_stamp("AttentionGen", AttnGen);
     timeboard.find_stamp("attn_o_proj", O_proj);
     timeboard.find_stamp("feedforward", FFN);
-    timeboard.find_stamp("expertFFN", ExpertFFN);
+    timeboard.find_stamp("shared_expert_FFN", SharedExpertFFN);
+    timeboard.find_stamp("shared_moe_all_reduce", CommInSharedExpertFFN);
+    timeboard.find_stamp("expertFFN", ExpertFFN); // gated expert ffn + shared expert ffn
     timeboard.find_stamp("moe_scatter", CommInExpertFFN);
     timeboard.find_stamp("moe_all_reduce_for_e_tp", CommInExpertFFN);
     timeboard.find_stamp("moe_all_reduce_for_gather", CommInExpertFFN);
@@ -700,12 +694,16 @@ void Cluster::setTimeBreakDown(Stat &stat) {
     timeboard.find_stamp("residual_1", Residual);
     timeboard.find_stamp("residual_2", Residual);
 
+    time_ns decoders = 0;
+    time_ns moe_decoders = 0;
     time_ns qkv_gen = 0;
     time_ns atten_sum = 0;
     time_ns atten_gen = 0;
     time_ns o_proj = 0;
     time_ns ffn = 0;
+    time_ns shared_expert_ffn = 0;
     time_ns expert_ffn = 0;
+    time_ns comm_in_shared_expert_ffn = 0;
     time_ns comm_in_expert_ffn = 0;
     time_ns communication = 0;
 
@@ -715,11 +713,27 @@ void Cluster::setTimeBreakDown(Stat &stat) {
 
     energy_nJ FC_DRAM = 0;
     energy_nJ FC_COMP = 0;
-    energy_nJ MoE_DRAM = 0;
+    energy_nJ FFN_DRAM = 0;
+    energy_nJ FFN_COMP = 0;
+    energy_nJ Shared_MoE_HBM = 0;
+    energy_nJ Shared_MoE_OFFLOAD = 0;
+    energy_nJ Shared_MoE_COMP = 0;
+    energy_nJ MoE_HBM = 0;
+    energy_nJ MoE_OFFLOAD = 0;
     energy_nJ MoE_COMP = 0;
     energy_nJ Attn_DRAM = 0;
     energy_nJ Attn_COMP = 0;
 
+    for (auto stamp : Decoders) {
+      decoders += stamp->get_duration();
+    }
+    stat.decoders = decoders;
+
+    for (auto stamp : MoEDecoders) {
+      moe_decoders += stamp->get_duration();
+    }
+    stat.moe_decoders = moe_decoders;
+
     for (auto stamp : QKV_gen) {
       qkv_gen += stamp->get_duration();
       FC_DRAM += stamp->getDramEnergy() * num_total_device;
@@ -750,33 +764,49 @@ void Cluster::setTimeBreakDown(Stat &stat) {
 
     for (auto stamp : FFN) {
       ffn += stamp->get_duration();
-      FC_DRAM += stamp->getDramEnergy() * num_total_device;
-      FC_COMP += stamp->getCompEnergy() * num_total_device;
+      FFN_DRAM += stamp->getDramEnergy() * num_total_device;
+      FFN_COMP += stamp->getCompEnergy() * num_total_device;
     }
     stat.ffn = ffn;
 
+    for (auto stamp : SharedExpertFFN) {
+      shared_expert_ffn += stamp->get_duration();
+      Shared_MoE_HBM += stamp->getMoeHbmEnergy() * num_total_device;
+      Shared_MoE_OFFLOAD += stamp->getMoeOffloadEnergy() * num_total_device;
+      Shared_MoE_COMP += stamp->getCompEnergy() * num_total_device;
+    }
+    for (auto stamp : CommInSharedExpertFFN) {
+      comm_in_shared_expert_ffn += stamp->get_duration();
+    }
+    shared_expert_ffn -= comm_in_shared_expert_ffn; // comm_in_shared_expert_ffn will be aggregated into stat.communication 
+    stat.shared_expert_ffn = shared_expert_ffn;
+    stat.shared_MoE_HBM_energy = Shared_MoE_HBM;
+    stat.shared_MoE_COMP_energy = Shared_MoE_COMP;
+
     for (auto stamp : ExpertFFN) {
       expert_ffn += stamp->get_duration();
     }
-
     // expertFFN may have different energy by device
     for(int device_id = 0; device_id < num_total_device; device_id ++){
       TimeBoard &timeboard_temp = get_device(device_id)->top_module_graph->timeboard;
-      std::vector<TimeStamp *> ExpertFFN_temp;  // PIM or Logic
+      std::vector<TimeStamp *> ExpertFFN_temp;
       timeboard_temp.find_stamp("expertFFN", ExpertFFN_temp);
       for (auto stamp : ExpertFFN_temp) {
-        MoE_DRAM += stamp->getDramEnergy();
+        MoE_HBM += stamp->getMoeHbmEnergy();
+        MoE_OFFLOAD += stamp->getMoeOffloadEnergy();
         MoE_COMP += stamp->getCompEnergy();
       }
     }
-
+    // MoE - shared_MoE = gated_MoE
+    MoE_HBM -= Shared_MoE_HBM;
+    MoE_OFFLOAD -= Shared_MoE_OFFLOAD;
+    MoE_COMP -= Shared_MoE_COMP;
     for (auto stamp : CommInExpertFFN) {
       comm_in_expert_ffn += stamp->get_duration();
     }
+    stat.expert_ffn = expert_ffn - shared_expert_ffn - comm_in_shared_expert_ffn - comm_in_expert_ffn; // to measure gated-expertFFN-only, exclude shared-expertFFN and communication
 
-    stat.expert_ffn = expert_ffn - comm_in_expert_ffn;
-
-    for (auto stamp : Comm) {
+    for (auto stamp : Comm) { // collects all communication in Decoder
       communication += stamp->get_duration();
     }
     stat.communication = communication;
@@ -800,8 +830,11 @@ void Cluster::setTimeBreakDown(Stat &stat) {
     stat.FC_COMP_energy = FC_COMP;
     stat.Attn_DRAM_energy = Attn_DRAM;
     stat.Attn_COMP_energy = Attn_COMP;
-    stat.MoE_DRAM_energy = MoE_DRAM;
-    stat.MoE_COMP_energy = MoE_COMP;
+    stat.FFN_DRAM_energy = FFN_DRAM;
+    stat.FFN_COMP_energy = FFN_COMP;
+    stat.MoE_HBM_energy = MoE_HBM; // gated_MoE
+    stat.MoE_OFFLOAD_energy = MoE_OFFLOAD; // gated_MoE
+    stat.MoE_COMP_energy = MoE_COMP; // gated_MoE
     
     double opb = 0;
     for (auto stamp : AttnSum) {
@@ -813,8 +846,9 @@ void Cluster::setTimeBreakDown(Stat &stat) {
     }
     stat.sum_attention_opb = opb;
   }
-  else{ // if Use MLA
-    std::vector<TimeStamp *> Decoders;    
+  else{ // model using MLA of deepseek
+    std::vector<TimeStamp *> Decoders; // non-MoE decoder
+    std::vector<TimeStamp *> MoEDecoders;
     std::vector<TimeStamp *> Q_down;    
     std::vector<TimeStamp *> KV_down;    
     std::vector<TimeStamp *> KR_proj;    
@@ -836,12 +870,16 @@ void Cluster::setTimeBreakDown(Stat &stat) {
 
     std::vector<TimeStamp *> O_proj;     
 
-    std::vector<TimeStamp *> FFN;        
-    std::vector<TimeStamp *> ExpertFFN;  
+    std::vector<TimeStamp *> FFN;
+    std::vector<TimeStamp *> SharedExpertFFN;        
+    std::vector<TimeStamp *> CommInSharedExpertFFN; // AllReduce after shared expert ffn
+    std::vector<TimeStamp *> ExpertFFN; // gated expert ffn + shared expert ffn
     std::vector<TimeStamp *> Comm;       
     std::vector<TimeStamp *> CommInExpertFFN;
     std::vector<TimeStamp *> Test;
 
+    //// The timeboard gathers records of stamps whose strings **include** a specified substring and,
+    //// after resolving their inclusion hierarchy, logs the corresponding values for each layer in stat.
     timeboard.find_stamp("attn_q_down_proj", Q_down);
     timeboard.find_stamp("attn_kv_down_proj", KV_down);
     timeboard.find_stamp("attn_kr_proj", KR_proj);
@@ -860,7 +898,9 @@ void Cluster::setTimeBreakDown(Stat &stat) {
     timeboard.find_stamp("attn_o_proj", O_proj);
 
     timeboard.find_stamp("feedforward", FFN);
-    timeboard.find_stamp("expertFFN", ExpertFFN);
+    timeboard.find_stamp("shared_expert_FFN", SharedExpertFFN);
+    timeboard.find_stamp("shared_moe_all_reduce", CommInSharedExpertFFN);
+    timeboard.find_stamp("expertFFN", ExpertFFN); // gated expert ffn + shared expert ffn
     timeboard.find_stamp("moe_scatter", CommInExpertFFN);
     timeboard.find_stamp("moe_all_reduce_for_e_tp", CommInExpertFFN);
     timeboard.find_stamp("moe_all_reduce_for_gather", CommInExpertFFN);
@@ -881,7 +921,10 @@ void Cluster::setTimeBreakDown(Stat &stat) {
     timeboard.find_stamp("residual_2", Residual);
 
     timeboard.find_stamp("decoder_", Decoders);
+    timeboard.find_stamp("MoE_decoder_", MoEDecoders);
 
+    time_ns decoders = 0;
+    time_ns moe_decoders = 0;    
     time_ns q_down_proj = 0;
     time_ns kv_down_proj = 0;
     time_ns kr_proj = 0;
@@ -899,7 +942,9 @@ void Cluster::setTimeBreakDown(Stat &stat) {
     time_ns atten_gen = 0;
     time_ns o_proj = 0;
     time_ns ffn = 0;
+    time_ns shared_expert_ffn = 0;
     time_ns expert_ffn = 0;
+    time_ns comm_in_shared_expert_ffn = 0;
     time_ns comm_in_expert_ffn = 0;
     time_ns communication = 0;
     
@@ -909,11 +954,27 @@ void Cluster::setTimeBreakDown(Stat &stat) {
 
     energy_nJ FC_DRAM = 0;
     energy_nJ FC_COMP = 0;
-    energy_nJ MoE_DRAM = 0;
+    energy_nJ FFN_DRAM = 0;
+    energy_nJ FFN_COMP = 0;
+    energy_nJ Shared_MoE_HBM = 0;
+    energy_nJ Shared_MoE_OFFLOAD = 0;
+    energy_nJ Shared_MoE_COMP = 0;
+    energy_nJ MoE_HBM = 0;
+    energy_nJ MoE_OFFLOAD = 0;
     energy_nJ MoE_COMP = 0;
     energy_nJ Attn_DRAM = 0;
     energy_nJ Attn_COMP = 0;
 
+    for (auto stamp : Decoders) {
+      decoders += stamp->get_duration();
+    }
+    stat.decoders = decoders;
+
+    for (auto stamp : MoEDecoders) {
+      moe_decoders += stamp->get_duration();
+    }
+    stat.moe_decoders = moe_decoders;
+
     for (auto stamp : Q_down){
       q_down_proj += stamp->get_duration();
       Attn_DRAM += stamp->getDramEnergy() * num_total_device;
@@ -993,33 +1054,49 @@ void Cluster::setTimeBreakDown(Stat &stat) {
 
     for (auto stamp : FFN) {
       ffn += stamp->get_duration();
-      FC_DRAM += stamp->getDramEnergy() * num_total_device;
-      FC_COMP += stamp->getCompEnergy() * num_total_device;
+      FFN_DRAM += stamp->getDramEnergy() * num_total_device;
+      FFN_COMP += stamp->getCompEnergy() * num_total_device;
     }
     stat.ffn = ffn;
 
+    for (auto stamp : SharedExpertFFN) {
+      shared_expert_ffn += stamp->get_duration();
+      Shared_MoE_HBM += stamp->getMoeHbmEnergy() * num_total_device;
+      Shared_MoE_OFFLOAD += stamp->getMoeOffloadEnergy() * num_total_device;
+      Shared_MoE_COMP += stamp->getCompEnergy() * num_total_device;
+    }
+    for (auto stamp : CommInSharedExpertFFN) {
+      comm_in_shared_expert_ffn += stamp->get_duration();
+    }
+    shared_expert_ffn -= comm_in_shared_expert_ffn; // comm_in_shared_expert_ffn will be aggregated into stat.communication 
+    stat.shared_expert_ffn = shared_expert_ffn;
+    stat.shared_MoE_HBM_energy = Shared_MoE_HBM;
+    stat.shared_MoE_COMP_energy = Shared_MoE_COMP;
+
     for (auto stamp : ExpertFFN) {
       expert_ffn += stamp->get_duration();
     }
-
     // expertFFN may have different energy by device
     for(int device_id = 0; device_id < num_total_device; device_id ++){
       TimeBoard &timeboard_temp = get_device(device_id)->top_module_graph->timeboard;
-      std::vector<TimeStamp *> ExpertFFN_temp;  // PIM or Logic
+      std::vector<TimeStamp *> ExpertFFN_temp;
       timeboard_temp.find_stamp("expertFFN", ExpertFFN_temp);
       for (auto stamp : ExpertFFN_temp) {
-        MoE_DRAM += stamp->getDramEnergy();
+        MoE_HBM += stamp->getMoeHbmEnergy();
+        MoE_OFFLOAD += stamp->getMoeOffloadEnergy();
         MoE_COMP += stamp->getCompEnergy();
       }
     }
-
+    // MoE - shared-MoE = gated-MoE
+    MoE_HBM -= Shared_MoE_HBM;
+    MoE_OFFLOAD -= Shared_MoE_OFFLOAD;
+    MoE_COMP -= Shared_MoE_COMP;
     for (auto stamp : CommInExpertFFN) {
       comm_in_expert_ffn += stamp->get_duration();
     }
+    stat.expert_ffn = expert_ffn - shared_expert_ffn - comm_in_shared_expert_ffn - comm_in_expert_ffn; // to measure gated-expertFFN-only, exclude shared-expertFFN and communication
 
-    stat.expert_ffn = expert_ffn - comm_in_expert_ffn;
-
-    for (auto stamp : Comm) {
+    for (auto stamp : Comm) { // collects all communication in Decoder
       communication += stamp->get_duration();
     }
     stat.communication = communication;
@@ -1043,9 +1120,11 @@ void Cluster::setTimeBreakDown(Stat &stat) {
     stat.FC_COMP_energy = FC_COMP;
     stat.Attn_DRAM_energy = Attn_DRAM;
     stat.Attn_COMP_energy = Attn_COMP;
-    stat.MoE_DRAM_energy = MoE_DRAM;
-    stat.MoE_COMP_energy = MoE_COMP;
-    stat.isOOM = out_of_memory;
+    stat.FFN_DRAM_energy = FFN_DRAM;
+    stat.FFN_COMP_energy = FFN_COMP;
+    stat.MoE_HBM_energy = MoE_HBM; // gated_MoE
+    stat.MoE_OFFLOAD_energy = MoE_OFFLOAD; // gated_MoE
+    stat.MoE_COMP_energy = MoE_COMP; // gated_MoE
     
     double opb = 0;
     for (auto stamp : AttnSum) {
diff --git src/hardware/hardware_config.h src/hardware/hardware_config.h
index 2b1885b..ab1ab57 100644
--- src/hardware/hardware_config.h
+++ src/hardware/hardware_config.h
@@ -1,4 +1,6 @@
 #pragma once
+
+#include <yaml-cpp/yaml.h>
 #include <string>
 #include <vector>
 
@@ -24,7 +26,7 @@ class SystemConfig {
                  hw_metric device_ict_latency = 3.0 * 1000,
                  hw_metric device_ict_bandwidth = 450.0 * 1000 * 1000 * 1000, 
                  hw_metric compute_peak_flops = 989.4 * 1000 * 1000 * 1000 * 1000,
-                 hw_metric memory_bandwidth = 3.352 * 1000 * 1000 * 1000 * 1000,
+                 hw_metric base_memory_bandwidth = 3.352 * 1000 * 1000 * 1000 * 1000,
                  hw_metric memory_capacity = 80.0 * 1024 * 1024 * 1024,\
                  int logic_x = 4,
                  hw_metric logic_op_b = 8,                 
@@ -60,6 +62,7 @@ class SystemConfig {
         device_ict_latency(device_ict_latency),
         device_ict_bandwidth(device_ict_bandwidth),
         compute_peak_flops(compute_peak_flops),
+        base_memory_bandwidth(base_memory_bandwidth),
         memory_bandwidth(memory_bandwidth),
         memory_capacity(memory_capacity),
         logic_x(logic_x),
@@ -86,12 +89,18 @@ class SystemConfig {
         use_inject_rate(use_inject_rate),
         request_per_second(request_per_second),
         num_cube(num_cube),
-        num_logic_cube(num_logic_cube){
+        num_logic_cube(num_logic_cube),
+        l1_cache_size(256.0 * 1024),
+        l2_cache_size(50.0 * 1024 * 1024) {
+          parseOffloadConfig();
+
+          memory_bandwidth = base_memory_bandwidth - offload_bandwidth;
+
           logic_memory_bandwidth = memory_bandwidth * logic_x;
           pim_memory_bandwidth = memory_bandwidth * pim_x;
-        };
+        }
 
-    SystemConfig& operator=(const SystemConfig& rhs) = default;
+  SystemConfig& operator=(const SystemConfig& rhs) = default;
 
   std::string gpu_gen;
 
@@ -108,17 +117,20 @@ class SystemConfig {
   hw_metric device_ict_bandwidth;  // B/s
 
   // Device specification
+  hw_metric l1_cache_size;
+  hw_metric l2_cache_size;
   hw_metric compute_peak_flops;
-  hw_metric memory_bandwidth;
-
+  hw_metric memory_bandwidth; // HBM read/write bandwidth - SSD read bandwidth
+  hw_metric base_memory_bandwidth; // HBM read/write bandwidth
   hw_metric memory_capacity;
+  hw_metric offload_bandwidth;
 
-  // Logic specification
+  // not used
   int logic_x;
   hw_metric logic_memory_bandwidth = memory_bandwidth * logic_x;
   hw_metric logic_op_b;
 
-  // PIM specifiaction
+  // not used
   int pim_x;
   hw_metric pim_memory_bandwidth = memory_bandwidth * pim_x;
   hw_metric pim_op_b;
@@ -132,21 +144,17 @@ class SystemConfig {
 
   bool communication_hiding = false;
 
-  bool disagg_system = true;
+  bool disagg_system = false;
   bool use_low_unit_moe_only = false;
   bool use_ramulator = false;
   
   bool exit_out_of_memory = false;
   bool mem_cap_limit = false;
 
-  bool use_flash_mla = true; 
-  bool use_flash_attention = true; 
-  bool reuse_kv_cache = true;
+  bool use_flash_mla = false; 
+  bool use_flash_attention = false; 
+  bool reuse_kv_cache = false;
   hw_metric kv_cache_reuse_rate; 
-  // this rate includes, 
-  // 1) how long does prompt share tokens with cached KV 
-  // 2) does prompt share tokens with cached KV
-  // because we select rate between [0, kv_cache_reuse_rate * 2), kv_cache_reuse_rate must be max 0.5
 
   bool prefill_mode = false; 
   bool decode_mode = false;
@@ -156,7 +164,26 @@ class SystemConfig {
 
   int num_cube; //8: for HBM3E (B100), 5 for HBM3 (H100)
   int num_logic_cube;
-  // Device
+
+  private:
+    void parseOffloadConfig() {
+      YAML::Node config = YAML::LoadFile("config.yaml");
+
+      bool offload_cpu = config["system"]["offload"]["offload_expert_to_cpu_memory"].as<bool>();
+      bool offload_ssd = config["system"]["offload"]["offload_expert_to_ssd"].as<bool>();
+
+      if (offload_cpu || offload_ssd) {
+        int gen = config["system"]["offload"]["offload_bandwidth"].as<int>();
+        if (gen == 4) {
+          offload_bandwidth = 450.0 * 1000 * 1000 * 1000;  // NVLink 4.0
+        } else if (gen == 5) {
+          offload_bandwidth = 900.0 * 1000 * 1000 * 1000;  // NVLink 5.0
+        }
+      }
+      else {
+        offload_bandwidth = 0.0;
+      }
+    }  
 };
 
 
@@ -169,7 +196,7 @@ static SystemConfig A100 = SystemConfig(
                  3.0 * 1000,                        // device_ict_latency, nvlink 3
                  150.0 * 1000 * 1000 * 1000,        // device_ict_bandwidth
                  312.0 * 1000 * 1000 * 1000 * 1000, // compute_peak_flops, FP16
-                 2.039 * 1000 * 1000 * 1000 * 1000, // memory_bandwidth
+                 2.039 * 1000 * 1000 * 1000 * 1000, // base_memory_bandwidth
                  80.0 * 1024 * 1024 * 1024,         // memory_capacity 
                  4,                                 // logic_x 
                  8,                                 // logic_op_b                 
@@ -207,7 +234,7 @@ static SystemConfig H100 = SystemConfig(
                  0.8 * 1000,                        // device_ict_latency
                  450.0 * 1000 * 1000 * 1000,        // device_ict_bandwidth, nvlink 4
                  989.4 * 1000 * 1000 * 1000 * 1000, // compute_peak_flops, FP16
-                 3.352 * 1000 * 1000 * 1000 * 1000, // memory_bandwidth
+                 3.352 * 1000 * 1000 * 1000 * 1000, // base_memory_bandwidth
                  80.0 * 1024 * 1024 * 1024,         // memory_capacity 
                  4,                                 // logic_x 
                  8,                                 // logic_op_b                 
@@ -245,7 +272,7 @@ static SystemConfig B100 = SystemConfig(
                   0.8 * 1000,                        // device_ict_latency, nvlink 5.0
                   900.0 * 1000 * 1000 * 1000,        // device_ict_bandwidth
                   1750.0 * 1000 * 1000 * 1000 * 1000,// compute_peak_flops, FP16
-                  8.000 * 1000 * 1000 * 1000 * 1000, // memory_bandwidth
+                  8.000 * 1000 * 1000 * 1000 * 1000, // base_memory_bandwidth
                   192.0 * 1024 * 1024 * 1024,        // memory_capacity 
                   4,                                 // logic_x 
                   8,                                 // logic_op_b                 
@@ -283,7 +310,7 @@ static SystemConfig B200 = SystemConfig(
                  0.8 * 1000,                        // device_ict_latency, nvlink 5.0
                  900.0 * 1000 * 1000 * 1000,        // device_ict_bandwidth
                  2250.0 * 1000 * 1000 * 1000 * 1000,// compute_peak_flops, FP16
-                 8.000 * 1000 * 1000 * 1000 * 1000, // memory_bandwidth
+                 8.000 * 1000 * 1000 * 1000 * 1000, // base_memory_bandwidth
                  192.0 * 1024 * 1024 * 1024,        // memory_capacity 
                  4,                                 // logic_x 
                  8,                                 // logic_op_b                 
diff --git src/hardware/linear_impl.cpp src/hardware/linear_impl.cpp
index c8f4309..9be0704 100644
--- src/hardware/linear_impl.cpp
+++ src/hardware/linear_impl.cpp
@@ -1,10 +1,18 @@
+#include <yaml-cpp/yaml.h>
 #include <memory>
 
+#include <algorithm>
+#include <cmath>
+#include <limits>
+#include <vector>
+#include <array>
+
 #include "common/type.h"
 #include "dram/dram_interface.h"
 #include "dram/dram_request.h"
 #include "hardware/layer_impl.h"
 #include "module/tensor.h"
+#include "hardware/tile.h"
 
 namespace llm_system {
 class DRAMRequest;
@@ -13,12 +21,14 @@ class Tensor;
 using Tensor_Ptr = std::shared_ptr<Tensor>;
 using DRAMRequest_Ptr = std::shared_ptr<DRAMRequest>;
 
+//// In this branch, we use only GPU-related code, neither LOGIC nor PIM
 ExecStatus LinearExecutionGPU(Device_Ptr device, Tensor_Ptr input,
                               Tensor_Ptr weight, Tensor_Ptr output,
                               bool use_ramulator) {
   auto config = device->config;
   hw_metric compute_peak_flops = config.compute_peak_flops;
   hw_metric memory_bandwidth = config.memory_bandwidth;
+  hw_metric offload_bandwidth = config.offload_bandwidth;
 
   double m = input->shape[0];
   double k = input->shape[1];
@@ -27,53 +37,79 @@ ExecStatus LinearExecutionGPU(Device_Ptr device, Tensor_Ptr input,
   hw_metric total_flops = 2.0 * m * k * n;
   hw_metric total_memory_size = (m * k + k * n + m * n) * weight->precision_byte;
 
-  time_ns compute_duration =
-      total_flops / compute_peak_flops * 1000 * 1000 * 1000;
-  time_ns memory_duration =
-      total_memory_size / memory_bandwidth * 1000 * 1000 * 1000;
-
   ExecStatus exec_status;
   if (input->getSize() == 0) {
     return exec_status;
   }
-
-  exec_status.compute_duration = compute_duration;
   
-  if (use_ramulator) {
-    exec_status +=
-        issueRamulator(device, LayerType::LINEAR, ProcessorType::GPU,
-                       DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-    exec_status +=
-        issueRamulator(device, LayerType::LINEAR, ProcessorType::GPU,
-                       DRAMRequestType::kRead, PIMOperandType::kDRAM, weight);
-    exec_status +=
-        issueRamulator(device, LayerType::LINEAR, ProcessorType::GPU,
-                       DRAMRequestType::kWrite, PIMOperandType::kDRAM, output);
-  } else {
+  ///////////////////////////////////////////
+  ///////////////// latency /////////////////
+  YAML::Node set_config = YAML::LoadFile("config.yaml");
+  time_ns compute_duration =
+      total_flops / compute_peak_flops * 1000 * 1000 * 1000;
+  // MoE with offloading
+  if (set_config["system"]["offload"]["offload_expert_to_cpu_memory"].as<bool>() ||
+      set_config["system"]["offload"]["offload_expert_to_ssd"].as<bool>()) {
+      if (set_config["system"]["offload"]["collects_gpu_compute"].as<bool>()) { // collects GPU-compute latency
+        time_ns memory_duration =
+          total_memory_size / memory_bandwidth * 1000 * 1000 * 1000;
+        exec_status.memory_duration = memory_duration;
+        exec_status.compute_duration = compute_duration;
+        exec_status.total_duration =
+          std::max(exec_status.compute_duration, exec_status.memory_duration);
+      } else { // collects offloaded-weight copying latency
+        time_ns memory_duration =
+          (k * n) * weight->precision_byte / offload_bandwidth * 1000 * 1000 * 1000;
+        exec_status.total_duration = memory_duration;
+      }
+  }
+  // MoE without offloading (baseline)
+  else {
+    time_ns memory_duration =
+      total_memory_size / memory_bandwidth * 1000 * 1000 * 1000;
     exec_status.memory_duration = memory_duration;
-    exec_status += getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
-
-    exec_status += getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, weight);
-    
-    exec_status += getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, output);
+    exec_status.compute_duration = compute_duration;
+    exec_status.total_duration =
+      std::max(exec_status.compute_duration, exec_status.memory_duration);
   }
 
-  exec_status.total_duration =
-      std::max(exec_status.compute_duration, exec_status.memory_duration);
 
-  exec_status.compute_util = 1000.0 * 1000.0 * 1000.0 * total_flops /
-                             compute_peak_flops / exec_status.total_duration;
-  exec_status.memory_util = 1000.0 * 1000.0 * 1000.0 * total_memory_size /
-                            memory_bandwidth / exec_status.total_duration;
+  //////////////////////////////////////////
+  ///////////////// energy /////////////////  
+
+  // Determine tile sizes
+  TileConfig tiles = getOptimalTiles(m, n, k, weight->precision_byte,
+                                     config.l1_cache_size,
+                                     config.l2_cache_size);
+  // Compute cache traffic
+  auto traffic = computeCacheTraffic(m, n, k, weight->precision_byte, tiles);
+
+  exec_status.read_count = traffic[0];
+  exec_status.l2_count = traffic[1];
+  exec_status.l1_count = traffic[2];
+
+  if (set_config["system"]["offload"]["offload_expert_to_cpu_memory"].as<bool>() ||
+      set_config["system"]["offload"]["offload_expert_to_ssd"].as<bool>()) {
+    // MoE with offloading
+    if (set_config["system"]["offload"]["collects_gpu_compute"].as<bool>()) {
+      // collect GPU-compute
+      exec_status.moe_hbm_read_count = traffic[0];
+    } else {
+      // collect offlaoded-weight copying
+      exec_status.moe_offload_read_count = k * n * weight->precision_byte;      
+    }
+  } else {
+    // MoE without offloading
+    exec_status.moe_hbm_read_count = traffic[0];
+  }
 
   exec_status.flops = total_flops;
   exec_status.memory_size = total_memory_size;
 
-  exec_status.opb = total_flops / total_memory_size;
-
   return exec_status;
 };
 
+//// not used
 ExecStatus LinearExecutionLogic(Device_Ptr device, Tensor_Ptr input,
                                 Tensor_Ptr weight, Tensor_Ptr output,
                                 bool use_ramulator) {
@@ -138,6 +174,7 @@ ExecStatus LinearExecutionLogic(Device_Ptr device, Tensor_Ptr input,
   return exec_status;
 };
 
+//// not used
 ExecStatus LinearExecutionPIM(Device_Ptr device, Tensor_Ptr input,
                               Tensor_Ptr weight, Tensor_Ptr output,
                               bool use_ramulator) {
@@ -201,6 +238,7 @@ ExecStatus LinearExecutionPIM(Device_Ptr device, Tensor_Ptr input,
   return exec_status;
 };
 
+//// In this branch, we use only GPU-related code, neither LOGIC nor PIM
 ExecStatus BatchedLinearExecutionGPU(Device_Ptr device, Tensor_Ptr input,
                               Tensor_Ptr weight, Tensor_Ptr output,
                               bool use_ramulator, bool duplicated_input) {
@@ -221,70 +259,42 @@ ExecStatus BatchedLinearExecutionGPU(Device_Ptr device, Tensor_Ptr input,
   int k = input->shape[2];
   int n = weight->shape[2];
 
+  // Determine tile sizes
+  TileConfig tiles = getOptimalTiles(m, n, k, weight->precision_byte,
+                                     config.l1_cache_size,
+                                     config.l2_cache_size);
+  // Compute cache traffic
+  auto traffic = computeCacheTraffic(m, n, k, weight->precision_byte, tiles);
+
+
   hw_metric total_flops = 2.0 * m * k * n * 1.0 * num_heads;
-  
   hw_metric total_memory_size;
-  if(duplicated_input){
-    total_memory_size = 1.0 * (m * k + k * n * 1.0  * num_heads + m * n * 1.0  * num_heads) * weight->precision_byte;
-  }
-  else{
-    total_memory_size = 1.0 * (m * k + k * n + m * n) * 1.0  * num_heads * weight->precision_byte;
-  }
-
-  time_ns compute_duration =
-      total_flops / compute_peak_flops * 1000 * 1000 * 1000;
-  time_ns memory_duration =
-      total_memory_size / memory_bandwidth * 1000 * 1000 * 1000;
 
   ExecStatus exec_status;
   if (input->getSize() == 0) {
     return exec_status;
   }
 
-  exec_status.compute_duration = compute_duration;
+  total_memory_size = 1.0 * (m * k + k * n + m * n) * 1.0  * num_heads * weight->precision_byte;
 
-  if (use_ramulator) {
-    if(duplicated_input){
-      input->setShape({m, k});
-    }
-    else{
-      input->setShape({m, k * num_heads});
-    }
-    exec_status +=
-        issueRamulator(device, LayerType::LINEAR, ProcessorType::GPU,
-                       DRAMRequestType::kRead, PIMOperandType::kDRAM, input);
-    
-    weight->setShape({k * num_heads, n});
-    exec_status +=
-        issueRamulator(device, LayerType::LINEAR, ProcessorType::GPU,
-                       DRAMRequestType::kRead, PIMOperandType::kDRAM, weight);
+  exec_status.read_count = traffic[0] * num_heads;
+  exec_status.l2_count = traffic[1] * num_heads;
+  exec_status.l1_count = traffic[2] * num_heads;
 
-    output->setShape({m, n * num_heads});
-    exec_status +=
-        issueRamulator(device, LayerType::LINEAR, ProcessorType::GPU,
-                       DRAMRequestType::kWrite, PIMOperandType::kDRAM, output);
-  } else {
-    exec_status.memory_duration = memory_duration;
-    exec_status += getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, input);
+  time_ns compute_duration =
+      total_flops / compute_peak_flops * 1000 * 1000 * 1000;
+  time_ns memory_duration =
+      total_memory_size / memory_bandwidth * 1000 * 1000 * 1000;
 
-    exec_status += getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kRead, weight);
-    
-    exec_status += getIdealMemoryStatus(device, ProcessorType::GPU, DRAMRequestType::kWrite, output);
-  }
+  exec_status.compute_duration = compute_duration;
+  exec_status.memory_duration = memory_duration;
 
   exec_status.total_duration =
       std::max(exec_status.compute_duration, exec_status.memory_duration);
 
-  exec_status.compute_util = 1000.0 * 1000.0 * 1000.0 * total_flops /
-                             compute_peak_flops / exec_status.total_duration;
-  exec_status.memory_util = 1000.0 * 1000.0 * 1000.0 * total_memory_size /
-                            memory_bandwidth / exec_status.total_duration;
-
   exec_status.flops = total_flops;
   exec_status.memory_size = total_memory_size;
 
-  exec_status.opb = total_flops / total_memory_size;
-
   input->setShape(input_orig_shape);
   weight->setShape(weight_orig_shape);
   output->setShape(output_orig_shape);
@@ -292,6 +302,7 @@ ExecStatus BatchedLinearExecutionGPU(Device_Ptr device, Tensor_Ptr input,
   return exec_status;
 };
 
+//// not used
 ExecStatus BatchedLinearExecutionLogic(Device_Ptr device, Tensor_Ptr input,
                                 Tensor_Ptr weight, Tensor_Ptr output,
                                 bool use_ramulator, bool duplicated_input) {
@@ -355,6 +366,7 @@ ExecStatus BatchedLinearExecutionLogic(Device_Ptr device, Tensor_Ptr input,
   return exec_status;
 };
 
+//// not used
 ExecStatus BatchedLinearExecutionPIM(Device_Ptr device, Tensor_Ptr input,
                               Tensor_Ptr weight, Tensor_Ptr output,
                               bool use_ramulator, bool duplicated_input) {
diff --git src/hardware/stat.h src/hardware/stat.h
index af0a0a7..fc44fb2 100644
--- src/hardware/stat.h
+++ src/hardware/stat.h
@@ -24,11 +24,14 @@ struct Stat {
   double sum_attention_opb = 0.0;
   int end_token = 0;
 
+  time_ns decoders = 0;
+  time_ns moe_decoders = 0;
   time_ns qkv_gen = 0;
   time_ns atten_sum = 0;
   time_ns atten_gen = 0;
   time_ns o_proj = 0;
   time_ns ffn = 0;
+  time_ns shared_expert_ffn = 0;
   time_ns expert_ffn = 0;
   time_ns communication = 0;
 
@@ -63,9 +66,15 @@ struct Stat {
   energy_nJ FC_COMP_energy = 0;
   energy_nJ Attn_DRAM_energy = 0;
   energy_nJ Attn_COMP_energy = 0;
-  energy_nJ MoE_DRAM_energy = 0;
-  energy_nJ MoE_COMP_energy = 0;
+  energy_nJ FFN_DRAM_energy = 0;
+  energy_nJ FFN_COMP_energy = 0;
+  energy_nJ shared_MoE_HBM_energy = 0;
+  energy_nJ shared_MoE_COMP_energy = 0;
+  energy_nJ MoE_HBM_energy = 0;
+  energy_nJ MoE_OFFLOAD_energy = 0;
+  energy_nJ MoE_COMP_energy = 0;  
 
+  
   bool isOOM = false;
 
   int is_mixed = 0; // wheter it is mixed stage or not
diff --git src/hardware/tile.h src/hardware/tile.h
new file mode 100644
index 0000000..e8a5965
--- /dev/null
+++ src/hardware/tile.h
@@ -0,0 +1,105 @@
+#pragma once
+#include <vector>
+#include <array>
+#include <cmath>
+#include <limits>
+#include <algorithm>
+
+struct TileConfig {
+  int l1_tm;
+  int l1_tn;
+  int l1_tk;
+  int l2_tm;
+  int l2_tn;
+  int l2_tk;
+};
+
+// Determine optimal L1/L2 tile sizes
+inline TileConfig getOptimalTiles(double m, double n, double k,
+                           int dbyte,
+                           double l1_cache_size,
+                           double l2_cache_size) {
+    std::vector<int> trange = {8, 16, 32, 64, 128, 192, 256, 320, 384, 448, 512};
+    int l1_tk = 32;
+    double min_cost = std::numeric_limits<double>::max();
+    int opt_l1_tm = trange[0], opt_l1_tn = trange[0];
+
+    // L1 tile search
+    for (int tm : trange) {
+        for (int tn : trange) {
+            int tm_eff = std::min<int>(m, tm);
+            int tn_eff = std::min<int>(n, tn);
+            double required = (double)(tm_eff + tn_eff) * l1_tk * dbyte
+                              + (double)tm_eff * tn_eff * dbyte;
+            if (required > l1_cache_size) continue;
+            // L2 access estimate
+            double l2_access = (std::ceil(n / (double)tn_eff) * m * k
+                              + std::ceil(m / (double)tm_eff) * n * k
+                              + m * n) * dbyte;
+            double cost = l2_access;
+            if (cost < min_cost) {
+                min_cost = cost;
+                opt_l1_tm = tm_eff;
+                opt_l1_tn = tn_eff;
+            }
+        }
+    }
+
+    // L2 tile search
+    int l2_tk = std::max(1, (int)(k / 64));
+    double min_access = std::numeric_limits<double>::max();
+    int opt_l2_tm = opt_l1_tm, opt_l2_tn = opt_l1_tn;
+
+    std::vector<int> tm2_cands;
+    int max_i = std::max<int>(1, (int)(m / opt_l1_tm));
+    for (int i = 1; i <= max_i; ++i) {
+        int tm2 = std::min<int>(m, opt_l1_tm * i);
+        tm2_cands.push_back(tm2);
+    }
+    tm2_cands.push_back((int)m);
+
+    std::vector<int> tn2_cands;
+    int max_j = std::max<int>(1, (int)(n / opt_l1_tn));
+    for (int j = 1; j <= max_j; ++j) {
+        int tn2 = std::min<int>((int)n, opt_l1_tn * j);
+        tn2_cands.push_back(tn2);
+    }
+    tn2_cands.push_back(n);
+
+    for (int tm2 : tm2_cands) {
+        for (int tn2 : tn2_cands) {
+            double required2 = (double)(tm2 + tn2) * l2_tk * dbyte + (double)tm2 * tn2 * dbyte;
+            if (required2 > l2_cache_size && !(tm2 == opt_l1_tm && tn2 == opt_l1_tn)) continue;
+            double access = (std::ceil(m / (double)tm2) * n * k
+                           + std::ceil(n / (double)tn2) * m * k
+                           + m * n) * dbyte;
+            if (access < min_access) {
+                min_access = access;
+                opt_l2_tm = tm2;
+                opt_l2_tn = tn2;
+            }
+        }
+    }
+
+    return {opt_l1_tm, opt_l1_tn, l1_tk, opt_l2_tm, opt_l2_tn, l2_tk};
+}
+
+// Compute DRAM, L2, and L1 traffic (in bytes)
+inline std::array<double, 3> computeCacheTraffic(double m, double n, double k,
+                                          int dbyte,
+                                          const TileConfig &tiles) {
+    // DRAM traffic using L2 tile
+    double dram = (std::ceil(m / (double)tiles.l2_tm) * n * k
+                 + std::ceil(n / (double)tiles.l2_tn) * m * k
+                 + m * n) * dbyte;
+    // L2 traffic using L1 tile
+    double l2  = (std::ceil(m / (double)tiles.l1_tm) * n * k
+                 + std::ceil(n / (double)tiles.l1_tn) * m * k
+                 + m * n) * dbyte;
+    // L1 traffic using small register tiles
+    const int reg_tm = 16, reg_tn = 16;
+    double l1 = (std::ceil(m / (double)reg_tm) * n * k
+               + std::ceil(n / (double)reg_tn) * m * k
+               + m * n) * dbyte;
+    return {dram, l2, l1};
+}
\ No newline at end of file
diff --git src/model/CMakeLists.txt src/model/CMakeLists.txt
index c4a4ffc..a19fad7 100644
--- src/model/CMakeLists.txt
+++ src/model/CMakeLists.txt
@@ -5,3 +5,16 @@ target_sources(
     
     llm.cpp   
 )
+
+add_executable(model-test test.cpp)
+
+target_link_libraries(
+    model-test
+    PRIVATE llm_system
+)
+
+set_target_properties(model-test PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+target_link_libraries(model PRIVATE hardware)
diff --git src/model/llm.cpp src/model/llm.cpp
index 8def059..d8fb61b 100644
--- src/model/llm.cpp
+++ src/model/llm.cpp
@@ -19,7 +19,7 @@ LLM::LLM(const ModelConfig& model_config, Cluster::Ptr cluster,
                                            model_config, device_list, device);
   add_module(embedding_layer);
 
-  if ((model_config.model_name != "deepseekV3")) {
+  if ((model_config.model_name != "deepseekR1")) {
     for (int layer = 0; layer < model_config.num_layers; layer++) {
       if ((model_config.expert_freq != 0) && (layer % model_config.expert_freq == 0)) {
         // MoE decoder;
@@ -39,7 +39,7 @@ LLM::LLM(const ModelConfig& model_config, Cluster::Ptr cluster,
         add_module(decoder);
       }
     }
-  } else if ((model_config.model_name == "deepseekV3")) {
+  } else if ((model_config.model_name == "deepseekR1")) {
     for (int layer = 0; layer < model_config.first_k_dense; layer++) {
       auto decoder =
           Decoder::Create(module_map_name, "decoder_" + std::to_string(layer),
@@ -70,7 +70,7 @@ Tensor::Ptr LLM::forward(const Tensor::Ptr input,
   Module::Ptr embedding = get_module("Embedding_layer");
   temp = (*embedding)(input, sequences_metadata);
 
-  if ((model_config.model_name != "deepseekV3")){
+  if ((model_config.model_name != "deepseekR1")){
     for (int layer = 0; layer < model_config.num_layers; layer++) {
       if ((model_config.expert_freq != 0) && (layer % model_config.expert_freq == 0)){
         decoder = get_module("MoE_decoder_" + std::to_string(layer));
@@ -79,7 +79,7 @@ Tensor::Ptr LLM::forward(const Tensor::Ptr input,
       }
       out = (*decoder)(temp, sequences_metadata);
     }
-  } else if ((model_config.model_name == "deepseekV3")) {
+  } else if ((model_config.model_name == "deepseekR1")) {
     for (int layer = 0; layer < model_config.first_k_dense; layer++) {
       decoder = get_module("decoder_" + std::to_string(layer));
       out = (*decoder)(temp, sequences_metadata);
diff --git src/model/model_config.h src/model/model_config.h
index 21f2eb8..f9ddc01 100644
--- src/model/model_config.h
+++ src/model/model_config.h
@@ -85,38 +85,33 @@ class ModelConfig {
   int output_len;
 };
 
-static ModelConfig mixtral = ModelConfig(4096, 128, 32, 32, 8, 32768, 14336,
-                                         14336, 1, 2, 8, 0, 1, 2, 3, 0, 0, 0, 0, 0, 32000, false, false, "mixtral");
+static ModelConfig mixtral =
+    ModelConfig(4096, 128, 32, 32, 8, 32768, 14336, 14336, 1, 2, 8, 0, 1, 2, 3, 0, 0, 0, 0, 0, 32000, false, false, "mixtral");
 
-static ModelConfig openMoE = ModelConfig(
-    3072, 128, 32, 24, 24, 2048, 12288, 12288, 2, 2, 32, 0, 4, 2, 3, 0, 0, 0, 0, 0, 32000, false, false, "openMoE");
+static ModelConfig openMoE =
+    ModelConfig(3072, 128, 32, 24, 24, 2048, 12288, 12288, 2, 2, 32, 0, 4, 2, 3, 0, 0, 0, 0, 0, 32000, false, false, "openMoE");
 
 static ModelConfig llama7bMoE =
-    ModelConfig(4096, 128, 32, 32, 32, 4096, 11008, 688, 1, 2, 16, 0, 1, 2, 3, 0, 0, 0, 0, 0, 32000, false, false,
-                "llama7bMoE");
+    ModelConfig(4096, 128, 32, 32, 32, 4096, 11008, 688, 1, 2, 16, 0, 1, 2, 3, 0, 0, 0, 0, 0, 32000, false, false, "llama7bMoE");
 
-static ModelConfig grok1 = ModelConfig(6144, 128, 64, 48, 8, 8192, 32768, 32768,
-                                       1, 2, 8, 0, 1, 2, 3, 0, 0, 0, 0, 0, 131072, false, false, "grok1");
+static ModelConfig grok1 =
+    ModelConfig(6144, 128, 64, 48, 8, 8192, 32768, 32768, 1, 2, 8, 0, 1, 2, 3, 0, 0, 0, 0, 0, 131072, false, false, "grok1");
 
-static ModelConfig glam = ModelConfig(4096, 128, 32, 32, 32, 8192, 16384, 16384,
-                                      1, 2, 64, 0, 2, 2, 2, 0, 0, 0, 0, 0, 256000, false, false, "glam");
+static ModelConfig glam =
+    ModelConfig(4096, 128, 32, 32, 32, 8192, 16384, 16384, 1, 2, 64, 0, 2, 2, 2, 0, 0, 0, 0, 0, 256000, false, false, "glam");
 
-static ModelConfig deepseekV3 =
-    ModelConfig(7168, 128, 60, 128, 128, 131072, 18432, 2048, 1, 1, 256, 1, 1, 8,
-                3, 3, 1536, 512, 128, 64, 129280, true, true,"deepseekV3"); // n_layer = 60 (not consider MTP module)
+static ModelConfig deepseekR1 =
+    ModelConfig(7168, 128, 60, 128, 128, 131072, 18432, 2048, 1, 2, 256, 1, 1, 8, 3, 3, 1536, 512, 128, 64, 129280, true, true,"deepseekR1"); // n_layer = 60 (not consider MTP module)
+
+static ModelConfig llama3_70B =
+    ModelConfig(8192, 128, 80, 64, 8, 131072, 28672, 0, 1, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 128256, false, false, "llama3_70B");
 
 static ModelConfig llama3_405B =
-    ModelConfig(16384, 128, 126, 128, 8, 131072, 53248, 53248, 1, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 128256, false, false,
-                "llama3_405B");
+    ModelConfig(16384, 128, 126, 128, 8, 131072, 53248, 53248, 1, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 128256, false, false, "llama3_405B");
 
 static ModelConfig llama4_scout = // 16 Expert 
-    ModelConfig(5120, 128, 48, 40, 8, 10485760, 16384, 8192, 1, 2, 16, 1, 1, 1,
-                3, 0, 0, 0, 0, 0, 202048, false, false,"llama4_scout");
+    ModelConfig(5120, 128, 48, 40, 8, 10485760, 16384, 8192, 1, 2, 16, 1, 1, 1, 3, 0, 0, 0, 0, 0, 202048, false, false,"llama4_scout");
       
 static ModelConfig llama4_maverick = // 128 Expert 
-                ModelConfig(5120, 128, 48, 40, 8, 1048576, 16384, 8192, 1, 2, 128, 1, 2, 1,
-                            3, 0, 0, 0, 0, 0, 202048, false, false,"llama4_maverick");
-
-// if model_config.q_lora_rank != 0 -> MLA로
-
+    ModelConfig(5120, 128, 48, 40, 8, 1048576, 16384, 8192, 1, 2, 128, 1, 2, 1, 3, 0, 0, 0, 0, 0, 202048, false, false,"llama4_maverick");
 }  // namespace llm_system
\ No newline at end of file
diff --git src/module/CMakeLists.txt src/module/CMakeLists.txt
index 5c64b05..3be23a2 100644
--- src/module/CMakeLists.txt
+++ src/module/CMakeLists.txt
@@ -1,5 +1,7 @@
 add_library(module OBJECT)
 
+target_link_libraries(module PRIVATE yaml-cpp::yaml-cpp)
+
 target_compile_definitions(module PRIVATE DEBUG)
 
 target_sources(
@@ -24,4 +26,15 @@ target_sources(
     residual.cpp
     expert.cpp
     lm_head.cpp
-)
\ No newline at end of file
+)
+
+add_executable(timeboard-test test.cpp)
+
+target_link_libraries(
+    timeboard-test
+    PRIVATE llm_system
+)
+
+set_target_properties(timeboard-test PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+)
diff --git src/module/communication.cpp src/module/communication.cpp
index 155454e..4053e58 100644
--- src/module/communication.cpp
+++ src/module/communication.cpp
@@ -273,11 +273,6 @@ TensorVec MoEGather::forward(const TensorVec input_vec,
   intra_node_comm_size /= device->model_config.ne_tp_dg; // receive only (1 / tp_degree) tokens, and then all reduce
   inter_node_comm_size /= device->model_config.ne_tp_dg; // receive only (1 / tp_degree) tokens, and then all reduce
 
-  // FP8 dispatch && BF16 combine
-  if((device->model_config.model_name == "deepseekV3") && device->model_config.precision_byte == 1){
-    intra_node_comm_size *= 2;
-    inter_node_comm_size *= 2;
-  }
 
   if(intra_node_comm_size == 0 && inter_node_comm_size == 0){
     return input_vec;
diff --git src/module/expert.cpp src/module/expert.cpp
index 8119196..83e3809 100644
--- src/module/expert.cpp
+++ src/module/expert.cpp
@@ -90,12 +90,12 @@ ExpertFFN::ExpertFFN(std::string& prefix, std::string& name,
     if (model_config.ffn_way == 2) {
         auto shared_expert_ffn = FeedForward2Way::Create(
             module_map_name, "shared_expert_FFN_" + std::to_string(shared_expert_idx),
-            model_config, scheduler, non_moe_device_list, device, false, true, true); // Shared Expert use TP degree of non-moe
+            model_config, scheduler, non_moe_device_list, device, true, true, false); // Shared Expert use TP degree of non-moe
         add_module(shared_expert_ffn);
     } else if (model_config.ffn_way == 3) {
         auto shared_expert_ffn = FeedForward3Way::Create(
             module_map_name, "shared_expert_FFN_" + std::to_string(shared_expert_idx),
-            model_config, scheduler, non_moe_device_list, device, false, true, true); // Shared Expert use TP degree of non-moe
+            model_config, scheduler, non_moe_device_list, device, true, true, false); // Shared Expert use TP degree of non-moe
         add_module(shared_expert_ffn);
     }
   }
diff --git src/module/layer.cpp src/module/layer.cpp
index 891abaa..c0580a7 100644
--- src/module/layer.cpp
+++ src/module/layer.cpp
@@ -276,7 +276,7 @@ Tensor::Ptr MultiLatentAttention::forward(const Tensor::Ptr input,
     attn_input.push_back(query);
     attn_input.push_back(key_value);
     attn_input.push_back(q_rope_out);
-    attn_input.push_back(k_rope_out); // 실제로는 RoPE의 output이 여기 input으로 들어가야함. 
+    attn_input.push_back(k_rope_out);
 
     TensorVec attn_out = (*multi_latent_attention)(attn_input, sequences_metadata);
     Tensor::Ptr o_proj = (*attn_o_proj)(attn_out.at(0), sequences_metadata);
@@ -318,9 +318,9 @@ FeedForward2Way::FeedForward2Way(std::string& prefix, std::string& name,
       model_config.hidden_dim, device_list, device);
   add_module(ffn_down_proj);
 
-  if (perform_all_reduce) {
+  if (perform_all_reduce) { // only true when executing shared-expertFFN
     auto all_reduce =
-        AllReduce::Create(module_map_name, "all_reduce", device_list, device);
+        AllReduce::Create(module_map_name, "shared_moe_all_reduce", device_list, device);
     add_module(all_reduce);
   }
 }
@@ -336,8 +336,8 @@ Tensor::Ptr FeedForward2Way::forward(const Tensor::Ptr input,
   Tensor::Ptr ffn_down = (*ffn_down_proj)(act_out, sequences_metadata);
   Tensor::Ptr result;
 
-  if (perform_all_reduce) {
-    Module::Ptr all_reduce = get_module("all_reduce");
+  if (perform_all_reduce) { // only true when executing shared-expertFFN
+    Module::Ptr all_reduce = get_module("shared_moe_all_reduce");
     result = (*all_reduce)(ffn_down, sequences_metadata);
   } else {
     result = ffn_down;
@@ -384,9 +384,9 @@ FeedForward3Way::FeedForward3Way(std::string& prefix, std::string& name,
                                           intermediate_dim, device_list, device);
     add_module(w3);
 
-    if (perform_all_reduce) {
+    if (perform_all_reduce) { // only true when executing shared-expertFFN
       auto all_reduce =
-          AllReduce::Create(module_map_name, "all_reduce", device_list, device);
+          AllReduce::Create(module_map_name, "shared_moe_all_reduce", device_list, device);
       add_module(all_reduce);
     }
   }
@@ -426,8 +426,8 @@ Tensor::Ptr FeedForward3Way::forward(const Tensor::Ptr input,
   Tensor::Ptr ffn_out = (*down_proj)(up_proj_out, sequences_metadata);
 
   Tensor::Ptr result;
-  if (perform_all_reduce) {
-    Module::Ptr all_reduce = get_module("all_reduce");
+  if (perform_all_reduce) { // only true when executing shared-expertFFN
+    Module::Ptr all_reduce = get_module("shared_moe_all_reduce");
     result = (*all_reduce)(ffn_out, sequences_metadata);
   } else {
     result = ffn_out;
diff --git src/module/module_graph.cpp src/module/module_graph.cpp
index cc43672..11cd4d6 100644
--- src/module/module_graph.cpp
+++ src/module/module_graph.cpp
@@ -1,3 +1,4 @@
+#include <yaml-cpp/yaml.h>
 #include "module/module_graph.h"
 
 namespace llm_system {
@@ -255,48 +256,41 @@ void TopModuleGraph::set_pop_status() {
       exec_status.processor_type == ProcessorType::LOGIC ||
       exec_status.processor_type == ProcessorType::GPU) {
     int processor_type = (int)exec_status.processor_type;
-    status.act_energy +=
-        exec_status.act_count * dram_powers[processor_type].kACT_energy_j_;
-    status.read_energy +=
-        exec_status.read_count * dram_powers[processor_type].kREAD_energy_j_;
-    status.write_energy +=
-        exec_status.write_count * dram_powers[processor_type].kWRITE_energy_j_;
 
-    status.all_act_energy += exec_status.all_act_count *
-                             dram_powers[processor_type].kALL_ACT_energy_j_;
-    status.all_read_energy += exec_status.all_read_count *
-                              dram_powers[processor_type].kALL_READ_energy_j_;
-    status.all_write_energy += exec_status.all_write_count *
-                               dram_powers[processor_type].kALL_WRITE_energy_j_;
+    float L1_ENERGY = 0.16 * 0.001; // (nJ/bit)
+    float L2_ENERGY = 0.3 * 0.001; // (nJ/bit)
+
+    // device memory energy
+    float HBM_READ_ENERGY = 4.2 * 0.001;  // HBM3 (nJ/bit)
+
+    // data copying energy from CPU-memory/SSD to HBM
+    YAML::Node config = YAML::LoadFile("config.yaml");
+    float OFFLOAD_READ_ENERGY = 0.0;
+    if(config["system"]["offload"]["offload_expert_to_cpu_memory"].as<bool>()){
+      OFFLOAD_READ_ENERGY = 9.2 * 0.001;  // DDR5 read (nJ/bit)
+      OFFLOAD_READ_ENERGY += HBM_READ_ENERGY;  // and HBM write
+    } else if(config["system"]["offload"]["offload_expert_to_ssd"].as<bool>()){
+      OFFLOAD_READ_ENERGY = 102.4 * 0.001;  // M.2 NVMe SSD read (nJ/bit)
+      float scale = config["system"]["offload"]["ssd_energy_scale"].as<float>();
+      OFFLOAD_READ_ENERGY *= scale;
+      OFFLOAD_READ_ENERGY += HBM_READ_ENERGY;  // and HBM write
+    }
 
+    // memory/storage access energy
+    status.read_energy +=
+        exec_status.read_count * 8 * HBM_READ_ENERGY; // 8 for Byte->bit
+    status.moe_hbm_read_energy +=
+        exec_status.moe_hbm_read_count * 8 * HBM_READ_ENERGY;
+    status.moe_offload_read_energy +=
+        exec_status.moe_offload_read_count * 8 * OFFLOAD_READ_ENERGY;
+
+    // GPU-compute energy
     status.mac_energy +=
         exec_status.flops * dram_powers[processor_type].kMAC_energy_j_;
-    ;  // 2flops per operation, energy per operation, pJ to nJ
+    status.cache_energy += (exec_status.l1_count * 8 * L1_ENERGY
+        + exec_status.l2_count * 8 * L2_ENERGY);
   }
 
-  // if (!exec_status.parallel_execution) {
-  //   // status.device_time = std::max(status.device_time,
-  //   //                               std::max(status.low_time,
-  //   //                               status.high_time));
-  //   // status.low_time = status.device_time;
-  //   // status.high_time = status.device_time;
-  //   status.parallel_execution = false;
-  // } else {
-  //   status.parallel_execution = true;
-  // }
-
-  // if (exec_status.processor_type == ProcessorType::LOGIC ||
-  //     exec_status.processor_type == ProcessorType::PIM) {
-  //   status.low_time += exec_status.total_duration;
-  //   status.device_time = status.low_time;
-  // } else if (exec_status.processor_type == ProcessorType::GPU) {
-  //   status.high_time += exec_status.total_duration;
-  //   status.device_time = status.high_time;
-  // } else {
-  //   status.low_time = status.device_time;
-  //   status.high_time = status.device_time;
-  // }
-
   status.compute_util = exec_status.compute_util;
   status.memory_util = exec_status.memory_util;
   status.processor_type = exec_status.processor_type;
diff --git src/module/status.h src/module/status.h
index 21d6b2d..9aa7fc9 100644
--- src/module/status.h
+++ src/module/status.h
@@ -38,6 +38,11 @@ struct ExecStatus {
   counter_t all_write_count = 0;
   counter_t ref_count = 0;
 
+  counter_t l1_count = 0;
+  counter_t l2_count = 0;
+  counter_t moe_hbm_read_count = 0;
+  counter_t moe_offload_read_count = 0; 
+
   bool parallel_execution = false;
 
   ExecStatus& operator+=(const ExecStatus& rhs) {
@@ -54,6 +59,11 @@ struct ExecStatus {
     all_write_count += rhs.all_write_count;
     ref_count += rhs.ref_count;
 
+    l1_count += rhs.l1_count;
+    l2_count += rhs.l2_count;
+    moe_hbm_read_count += rhs.moe_hbm_read_count;
+    moe_offload_read_count += rhs.moe_offload_read_count;
+
     return *this;
   }
 };
@@ -95,7 +105,11 @@ class StatusBoard {
   energy_nJ all_read_energy_load;
   energy_nJ all_write_energy_load;
 
+  energy_nJ moe_hbm_read_energy;
+  energy_nJ moe_offload_read_energy;
+
   energy_nJ mac_energy;
+  energy_nJ cache_energy;
 
   util compute_util;
   util memory_util;
diff --git src/module/timeboard.cpp src/module/timeboard.cpp
index 2b78b70..eea8cbb 100644
--- src/module/timeboard.cpp
+++ src/module/timeboard.cpp
@@ -54,7 +54,7 @@ void TimeStamp::set_status(const StatusBoard& output_status) {
     status.output_tensor_shape = output_status.tensor->shape;
   }
 
-  status.act_energy = output_status.act_energy - status.act_energy; // get layer's energy
+  status.act_energy = output_status.act_energy - status.act_energy;
   status.read_energy = output_status.read_energy - status.read_energy;
   status.write_energy = output_status.write_energy - status.write_energy;
 
@@ -62,7 +62,11 @@ void TimeStamp::set_status(const StatusBoard& output_status) {
   status.all_read_energy = output_status.all_read_energy - status.all_read_energy;
   status.all_write_energy = output_status.all_write_energy - status.all_write_energy;
   
+  status.moe_hbm_read_energy = output_status.moe_hbm_read_energy - status.moe_hbm_read_energy;
+  status.moe_offload_read_energy = output_status.moe_offload_read_energy - status.moe_offload_read_energy;
+
   status.mac_energy = output_status.mac_energy - status.mac_energy;
+  status.cache_energy = output_status.cache_energy - status.cache_energy;
 
   status.memory_util = output_status.memory_util;
   status.compute_util = output_status.compute_util;
@@ -94,8 +98,8 @@ void TimeStamp::print() {
     std::cout << name;
     print_time();
     print_tensor();
-    print_energy();
-    print_util();
+    //print_energy();
+    //print_util();
     std::cout << std::endl;
   }
 
@@ -119,7 +123,7 @@ void TimeStamp::exportGantt(std::string filepath, int device_id) {
     print_time();
     print_tensor();
     // print_energy();
-    print_util();
+    //print_util();
     std::cout << std::endl;
   }
 
diff --git src/module/timeboard.h src/module/timeboard.h
index 819ec59..fcbf372 100644
--- src/module/timeboard.h
+++ src/module/timeboard.h
@@ -34,17 +34,25 @@ class TimeStamp {
   }
 
   energy_nJ getDramEnergy(){
-    return status.act_energy + status.read_energy + status.write_energy +
-    status.all_act_energy + status.all_read_energy + status.all_write_energy;
+    return status.read_energy; // includes both DRAM-read/write
   }
 
-  energy_nJ getDramEnergyForLoad(){
-    return status.act_energy_load + status.read_energy_load + status.write_energy_load +
-    status.all_act_energy_load + status.all_read_energy_load + status.all_write_energy_load;
+  energy_nJ getMoeHbmEnergy(){
+    return status.moe_hbm_read_energy;
+  }
+
+  energy_nJ getMoeOffloadEnergy(){
+    return status.moe_offload_read_energy;
   }
 
   energy_nJ getCompEnergy(){
-    return status.mac_energy;
+    return status.mac_energy + status.cache_energy;  // GPU-compute energy
+  }
+
+  // not used
+  energy_nJ getDramEnergyForLoad(){
+    return status.act_energy_load + status.read_energy_load + status.write_energy_load +
+    status.all_act_energy_load + status.all_read_energy_load + status.all_write_energy_load;
   }
 
   double getOpb() { return status.opb; }
diff --git src/scheduler/CMakeLists.txt src/scheduler/CMakeLists.txt
index dcfb59d..f8c8f2a 100644
--- src/scheduler/CMakeLists.txt
+++ src/scheduler/CMakeLists.txt
@@ -5,4 +5,16 @@ target_sources(
 
     scheduler.cpp
     sequence.cpp
-)
\ No newline at end of file
+)
+
+target_link_libraries(scheduler PRIVATE hardware)
+# add_executable(scheduler-test test.cpp)
+
+# target_link_libraries(
+#     scheduler-test
+#     PRIVATE llm_system
+# )
+
+# set_target_properties(scheduler-test PROPERTIES
+#     RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+# )
diff --git src/scheduler/scheduler.cpp src/scheduler/scheduler.cpp
index 9c560f3..577732b 100644
--- src/scheduler/scheduler.cpp
+++ src/scheduler/scheduler.cpp
@@ -56,10 +56,10 @@ void Scheduler::pushDummySeq(int input_len, int output_len) {
     delta -= 1;
   }
 
-  // to give sequence some randomness, you can insert delat value in to length by uncommenting below
-  // delta = 0;
-  // input_len = input_len - delta;
-  // output_len = output_len + delta;
+  // to give sequence some randomness, you can insert non-zero delat value in to length by uncommenting below
+  delta = 0;
+  input_len = input_len - delta;
+  output_len = output_len + delta;
 
   if (output_len == 0) {
     return;
diff --git util/gantt.ipynb util/gantt.ipynb
new file mode 100644
index 0000000..ca54ee4
--- /dev/null
+++ util/gantt.ipynb
@@ -0,0 +1,230 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 2000x800 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "import matplotlib.pyplot as plt\n",
+    "import re\n",
+    "import os\n",
+    "from collections import defaultdict\n",
+    "\n",
+    "\n",
+    "# Define input log files for each device\n",
+    "\n",
+    "gantt_directory = \"../build/gantt\"\n",
+    "\n",
+    "# Define allowed operations (including wildcard match for expert_FFN)\n",
+    "allowed_operations = {\n",
+    "    \"attn_q_down_proj\",\n",
+    "    \"attn_kv_down_proj\",\n",
+    "    \"attn_kr_proj\",\n",
+    "    \"attn_q_up_proj\",\n",
+    "    \"attn_qr_proj\",\n",
+    "    \"attn_kv_up_proj\",\n",
+    "    \"attn_qkv_proj\",\n",
+    "    \"AttentionSum\",\n",
+    "    \"AttentionGen\",\n",
+    "    \"gate_fn\",\n",
+    "    \"moe_scatter\",\n",
+    "    \"attn_o_proj\",\n",
+    "    \"all_reduce\",\n",
+    "    \"gate_proj\",\n",
+    "    \"activation\",\n",
+    "    \"up_proj\",\n",
+    "    \"down_proj\",\n",
+    "    \"moe_gather\",\n",
+    "    \"moe_all_reduce\"\n",
+    "}\n",
+    "\n",
+    "# Store parsed tasks per device\n",
+    "device_data = defaultdict(list)\n",
+    "\n",
+    "def parse_log_file(file_path, device_name):\n",
+    "    with open(file_path, 'r') as f:\n",
+    "        lines = f.readlines()\n",
+    "\n",
+    "    parsed_tasks = []\n",
+    "    base_indent = None\n",
+    "    skip_indent = None\n",
+    "\n",
+    "    for i, line in enumerate(lines):\n",
+    "        line = line.replace('\\t', '    ')  # Convert tabs to spaces\n",
+    "        indent_level = len(line) - len(line.lstrip(' '))\n",
+    "\n",
+    "        if base_indent is None:\n",
+    "            base_indent = indent_level\n",
+    "\n",
+    "        relative_indent = indent_level - base_indent\n",
+    "        stripped_line = line.strip()\n",
+    "\n",
+    "        match = re.match(r'^(.*?)\\|\\s*([\\d.]+)us\\s*\\|\\s*([\\d.]+)\\s*-\\s*([\\d.]+)', stripped_line)\n",
+    "        if not match:\n",
+    "            continue\n",
+    "\n",
+    "        operation = match.group(1).strip()\n",
+    "        duration = float(match.group(2))\n",
+    "        start_time = float(match.group(3))\n",
+    "        end_time = float(match.group(4))\n",
+    "        \n",
+    "        if duration <= 0:\n",
+    "            continue\n",
+    "\n",
+    "        if operation == \"Linear\":\n",
+    "            continue\n",
+    "        \n",
+    "        if operation not in allowed_operations and \"expert_FFN\" not in operation:\n",
+    "            continue\n",
+    "\n",
+    "        if skip_indent is not None:\n",
+    "            if relative_indent > skip_indent:\n",
+    "                continue\n",
+    "            else:\n",
+    "                skip_indent = None\n",
+    "                \n",
+    "        if \"expert_FFN\" in operation:\n",
+    "            skip_indent = relative_indent\n",
+    "\n",
+    "        task = {\n",
+    "            \"operation\": operation,\n",
+    "            \"start_time\": start_time,\n",
+    "            \"end_time\": end_time,\n",
+    "            \"duration\": duration,\n",
+    "            \"indent\": relative_indent\n",
+    "        }\n",
+    "        parsed_tasks.append(task)\n",
+    "\n",
+    "    \n",
+    "    #merge experts\n",
+    "    first_expert = True\n",
+    "    expert_task = None\n",
+    "    end_time = 0\n",
+    "    for idx, task in enumerate(parsed_tasks):\n",
+    "        if \"expert_FFN\" in task[\"operation\"]:\n",
+    "            if first_expert:\n",
+    "                expert_task = {\n",
+    "                    \"operation\": \"MoE\",\n",
+    "                    \"start_time\": task[\"start_time\"],\n",
+    "                    \"end_time\": task[\"end_time\"],\n",
+    "                    \"duration\": task[\"duration\"],\n",
+    "                    \"indent\": task[\"indent\"]\n",
+    "                }\n",
+    "                first_expert = False\n",
+    "            else:\n",
+    "                end_time = task[\"end_time\"]\n",
+    "        elif not first_expert:\n",
+    "            \n",
+    "            expert_task[\"end_time\"] = end_time\n",
+    "            expert_task[\"duration\"] = end_time - expert_task[\"start_time\"]\n",
+    "            device_data[device_name].append(expert_task)\n",
+    "            expert_task = None\n",
+    "            first_expert = True\n",
+    "            \n",
+    "            device_data[device_name].append(task)\n",
+    "        else:\n",
+    "            device_data[device_name].append(task)\n",
+    "            \n",
+    "limit_num_device = 4\n",
+    "current_device_idx = 0\n",
+    "for filename in os.listdir(gantt_directory):\n",
+    "    current_device_idx = current_device_idx +1\n",
+    "    if current_device_idx == limit_num_device:\n",
+    "        break\n",
+    "    file_path = os.path.join(gantt_directory, filename)\n",
+    "    if os.path.isfile(file_path):\n",
+    "        device_name = os.path.splitext(filename)[0]\n",
+    "        \n",
+    "        parse_log_file(file_path, device_name)\n",
+    "\n",
+    "\n",
+    "# Sort device names for proper ordering (device_0, device_1, ...)\n",
+    "sorted_devices = sorted(device_data.keys(), key=lambda x: int(re.search(r'\\d+', x).group()))\n",
+    "\n",
+    "# Plot Gantt Chart for all devices (each device has separate y position with extra spacing)\n",
+    "fig, ax = plt.subplots(figsize=(20, 8))\n",
+    "\n",
+    "colors = [\n",
+    "    'tab:blue', 'tab:orange', 'tab:green', 'tab:red',\n",
+    "    'tab:purple', 'tab:brown', 'tab:pink', 'tab:gray',\n",
+    "    'tab:olive' #, 'tab:cyan'\n",
+    "]\n",
+    "color_map = {}\n",
+    "\n",
+    "device_spacing = 1.5  # Increase spacing between devices for better visibility\n",
+    "\n",
+    "for device_index, device in enumerate(sorted_devices):\n",
+    "    tasks = device_data[device]\n",
+    "    y_position = device_index * device_spacing  # Spread devices vertically\n",
+    "\n",
+    "    for task in tasks:\n",
+    "        operation = task['operation']\n",
+    "        start = task['start_time']\n",
+    "        duration = task['duration']\n",
+    "\n",
+    "        if duration <= 0:\n",
+    "            continue\n",
+    "\n",
+    "        if operation not in color_map:\n",
+    "            color_map[operation] = colors[len(color_map) % len(colors)]\n",
+    "\n",
+    "        ax.barh(y_position, duration, left=start, color=color_map[operation])\n",
+    "\n",
+    "        ax.text(start + duration / 2, y_position, operation,\n",
+    "                ha='center', va='center', fontsize=8, rotation=90)\n",
+    "\n",
+    "# Set y-axis ticks and labels to each sorted device\n",
+    "yticks = [i * device_spacing for i in range(len(sorted_devices))]\n",
+    "ax.set_yticks(yticks)\n",
+    "ax.set_yticklabels(sorted_devices)\n",
+    "\n",
+    "ax.set_xlabel(\"Time (us)\")\n",
+    "ax.set_title(\"Device-wise Gantt Chart (Filtered Operations Only, expert_FFN excluded)\")\n",
+    "\n",
+    "plt.grid(True, linestyle='--', alpha=0.6)\n",
+    "plt.tight_layout()\n",
+    "plt.show()\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "CXL",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.9.18"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}
